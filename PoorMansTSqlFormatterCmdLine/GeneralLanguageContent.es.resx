<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="UnrecognizedArgumentsErrorMessage" xml:space="preserve">
    <value>Hemos encontrado argumentos no reconocidos!</value>
  </data>
  <data name="BackupFailureWarningMessage" xml:space="preserve">
    <value>Copia de seguridad fallada: {0}{1} Saltando este archivo.</value>
    <comment>{0} is the filename, {1} is a linebreak.</comment>
  </data>
  <data name="ContentWriteFailureWarningMessage" xml:space="preserve">
    <value>Error al escribir el archivo formateado: {0}</value>
  </data>
  <data name="ErrorDetailMessageFragment" xml:space="preserve">
    <value> Detalle del error: {0}</value>
  </data>
  <data name="FileReadFailureWarningMessage" xml:space="preserve">
    <value>Error al abrir el archivo (abandonando): {0}</value>
  </data>
  <data name="FolderCreationFailureWarningMessage" xml:space="preserve">
    <value>Error al crear la carpeta: {0}</value>
  </data>
  <data name="NoFilesFoundWarningMessage" xml:space="preserve">
    <value>Ningun archivo se encontró con este nombre o patrón ({0}) y extensión ({1})</value>
    <comment>{0} is the filename pattern, {1} is the requested extensions</comment>
  </data>
  <data name="OutputFileCreationErrorMessage" xml:space="preserve">
    <value>El archivo de destino indicado no se pudo crear. Detalle del error: {0}</value>
  </data>
  <data name="ParseErrorWarningPrefix" xml:space="preserve">
    <value>--ALERTA! SE ENCONTRARON ERRORES AL ANALIZAR EL CODIGO SQL!</value>
  </data>
  <data name="ParsingErrorWarningMessage" xml:space="preserve">
    <value>Se encontró un error analizando los contenidos del archivo (abandonado): {0}</value>
  </data>
  <data name="PathPatternErrorMessage" xml:space="preserve">
    <value>Se encontró un error procesando este nombre de archivo o patrón. Detalle del error: {0}</value>
  </data>
  <data name="PossiblePartialWriteWarningMessage" xml:space="preserve">
    <value> AVISO: es posible que este archivo haya sido sobrescrito con contenidos partiales!</value>
  </data>
  <data name="ProgramSummary" xml:space="preserve">
    <value>Poor Man's T-SQL Formatter - una biblioteca pequeña y gratuita 
para el formateado de T-SQL (Transact-SQL) para .Net 2.0, 
escrita en C#. Distribuida bajo licencia AGPL v3.
Copyright (C) 2011 Tao Klerks</value>
  </data>
  <data name="ProgramUsageNotes" xml:space="preserve">
    <value>
Notas de uso: 

SqlFormatter &lt;archivo or patrón&gt; &lt;opciones&gt;

is  indentString (predeterminado: \t)
st  spacesPerTab (predeterminado: 4)
mw  maxLineWidth (predeterminado: 999)
sb  statementBreaks (predeterminado: 2)
cb  clauseBreaks (predeterminado: 1)
tc  trailingCommas (predeterminado: falso)
sac spaceAfterExpandedComma (predeterminado: falso)
ebc expandBetweenConditions (predeterminado: verdadero)
ebe expandBooleanExpressions (predeterminado: verdadero)
ecs expandCaseStatements (predeterminado: verdadero)
ecl expandCommaLists (predeterminado: verdadero)
ecl expandInLists (predeterminado: verdadero)
bjo breakJoinOnSections (predeterminado: falso)
uk  uppercaseKeywords (predeterminado: verdadero)
sk  standardizeKeywords (predeterminado: falso)
ae  allowParsingErrors (predeterminado: falso)
e   extensions (predeterminado: sql)
r   recursive (predeterminado: falso)
b   backups (predeterminado: verdadero)
o   outputFileOrFolder (predeterminado: ninguno; si se incluye, anula la option "backups")
l   languageCode (predeterminado: idioma actual si es soportado; optiones soportadas incluyen EN, FR y ES)
h ? help

Se pueden desactivar opciones booleanas siguendolas de un "menos", o activarlas con solo incluirlas o siguendolas de un "mas".
Se puede proporcionar el codigo SQL por tubería (pipe) en vez de proporcionar un nombre de archivo, pero tiene que ser codificado con UTF-8.

Exemplos:

SqlFormatter TestFiles\* /is:"  " /tc /uk- 

SqlFormatter test*.sql /o:resultfile.sql

echo select algunacolumna from algunatabla | SqlFormatter 
    
</value>
  </data>
  <data name="UnrecognizedLanguageErrorMessage" xml:space="preserve">
    <value>No se reconoció el codigo de idioma proporcionado.</value>
  </data>
  <data name="NoInputErrorMessage" xml:space="preserve">
    <value>Ningun archivo de entrada (o tubería/pipe) ha sido proporcionado.</value>
  </data>
</root>

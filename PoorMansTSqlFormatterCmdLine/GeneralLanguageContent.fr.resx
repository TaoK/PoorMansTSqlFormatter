<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="UnrecognizedArgumentsErrorMessage" xml:space="preserve">
    <value>Paramètres inconnus trouvés!</value>
  </data>
  <data name="BackupFailureWarningMessage" xml:space="preserve">
    <value>Sauvegarde échouée: {0}{1} On saute la mise en forme pour ce fichier.</value>
    <comment>{0} is the filename, {1} is a linebreak.</comment>
  </data>
  <data name="ContentWriteFailureWarningMessage" xml:space="preserve">
    <value>L'écriture du contenu mis en forme a échoué: {0}</value>
  </data>
  <data name="ErrorDetailMessageFragment" xml:space="preserve">
    <value> Détail de l'erreur: {0}</value>
  </data>
  <data name="FileReadFailureWarningMessage" xml:space="preserve">
    <value>La lecture du contenu du fichier a échoué (abandonné): {0}</value>
  </data>
  <data name="FolderCreationFailureWarningMessage" xml:space="preserve">
    <value>La création du dossier a échoué: {0}</value>
  </data>
  <data name="NoFilesFoundWarningMessage" xml:space="preserve">
    <value>Aucun fichier trouvé pour ce nom ou modèle de nom ({0}) et extension ({1})</value>
    <comment>{0} is the filename pattern, {1} is the requested extensions</comment>
  </data>
  <data name="OutputFileCreationErrorMessage" xml:space="preserve">
    <value>Le fichier de destination n'a pas pu se créer. Détail de l'erreur: {0}</value>
  </data>
  <data name="ParseErrorWarningPrefix" xml:space="preserve">
    <value>--ATTENTION! DES ERREURS ON ÉTÉS DÉTECTÉES PENDANT L'ANALYSE DU CODE SQL!</value>
  </data>
  <data name="ParsingErrorWarningMessage" xml:space="preserve">
    <value>Une erreur s'est produite pendant l'analyse ou la mise en forme des contenus de ce fichier (abandonné): {0}</value>
  </data>
  <data name="PathPatternErrorMessage" xml:space="preserve">
    <value>Une erreur s'est produite pendant le traitement du nom de fichier ou modèle. Détail de l'erreur: {0}</value>
  </data>
  <data name="PossiblePartialWriteWarningMessage" xml:space="preserve">
    <value> AVIS: il se peut que se fichier ait été écrasé par des contenus partiels!</value>
  </data>
  <data name="ProgramSummary" xml:space="preserve">
    <value>Poor Man's T-SQL Formatter - une petite bibliothèque gratuite de 
formattage de T-SQL (Transact-SQL) pour .Net 2.0, écrite en C#. 
Distribuée sous AGPL v3.
Copyright (C) 2011 Tao Klerks</value>
  </data>
  <data name="ProgramUsageNotes" xml:space="preserve">
    <value>
Notes d'usage: 

SqlFormatter &lt;nom de fichier ou modèle&gt; &lt;options&gt;

is  indentString (par défaut: \t)
st  spacesPerTab (par défaut: 4)
mw  maxLineWidth (par défaut: 999)
sb  statementBreaks (par défaut: 2)
cb  clauseBreaks (par défaut: 1)
tc  trailingCommas (par défaut: faux)
sac spaceAfterExpandedComma (par défaut: faux)
ebc expandBetweenConditions (par défaut: vrai)
ebe expandBooleanExpressions (par défaut: vrai)
ecs expandCaseStatements (par défaut: vrai)
ecl expandCommaLists (par défaut: vrai)
eil expandInLists (par défaut: vrai)
bjo breakJoinOnSections (par défaut: faux)
uk  uppercaseKeywords (par défaut: vrai)
sk  standardizeKeywords (par défaut: faux)
ae  allowParsingErrors (par défaut: faux)
e   extensions (par défaut: sql)
r   recursive (par défaut: faux)
b   backups (par défaut: vrai)
o   outputFileOrFolder (par défaut: aucun; s'il est spécifié, overrides the backup option)
l   languageCode (par défaut: langue actuelle si elle est supportée; valeurs valables sont EN, FR et ES)
h ? help

On peut désactiver les options booléennes en les suivant d'un "moins", et les activer simplement en les spécifiant, ou aussi en les suivant d'un "plus".
Vous pouvez aussi utilizer un Tube (/tuyeau/pipe) pour proportionner le SQL d'entree (en codage UTF-8), et alors aucun nom de fichier est attenu.

Par exemple:

SqlFormatter TestFiles\* /is:"  " /tc /uk- 

SqlFormatter test*.sql /o:resultfile.sql

echo select unecolonnequelconque from untableauquelconque | SqlFormatter 

</value>
  </data>
  <data name="UnrecognizedLanguageErrorMessage" xml:space="preserve">
    <value>Le code de langue fourni n'est pas valable.</value>
  </data>
  <data name="NoInputErrorMessage" xml:space="preserve">
    <value>Aucun fichier d'entrée (ou tube/pipe) n'a été proportionné.</value>
  </data>
</root>

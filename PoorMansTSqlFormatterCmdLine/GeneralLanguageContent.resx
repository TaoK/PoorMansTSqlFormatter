<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BackupFailureWarningMessage" xml:space="preserve">
    <value>Failed to back up file: {0}{1} Skipping formatting for this file.</value>
    <comment>{0} is the filename, {1} is a linebreak.</comment>
  </data>
  <data name="ContentWriteFailureWarningMessage" xml:space="preserve">
    <value>Failed to write reformatted contents: {0}</value>
  </data>
  <data name="ErrorDetailMessageFragment" xml:space="preserve">
    <value> Error detail: {0}</value>
  </data>
  <data name="FileReadFailureWarningMessage" xml:space="preserve">
    <value>Failed to read file contents (aborted): {0}</value>
  </data>
  <data name="FolderCreationFailureWarningMessage" xml:space="preserve">
    <value>Failed to create target folder: {0}</value>
  </data>
  <data name="NoFilesFoundWarningMessage" xml:space="preserve">
    <value>No files found matching filename/pattern ({0}) and extension ({1})</value>
    <comment>{0} is the filename pattern, {1} is the requested extensions </comment>
  </data>
  <data name="NoInputErrorMessage" xml:space="preserve">
    <value>No input (filename(s) or piped input) has been provided.</value>
  </data>
  <data name="OutputFileCreationErrorMessage" xml:space="preserve">
    <value>The requested output file could not be created. Error detail: {0}</value>
  </data>
  <data name="ParseErrorWarningPrefix" xml:space="preserve">
    <value>--WARNING! ERRORS ENCOUNTERED DURING SQL PARSING!</value>
  </data>
  <data name="ParsingErrorWarningMessage" xml:space="preserve">
    <value>Encountered error when parsing or formatting file contents (aborted): {0}</value>
  </data>
  <data name="PathPatternErrorMessage" xml:space="preserve">
    <value>Error processing requested filename/pattern. Error detail: {0}</value>
  </data>
  <data name="PossiblePartialWriteWarningMessage" xml:space="preserve">
    <value> NOTE: this file may have been overwritten with partial content!</value>
  </data>
  <data name="ProgramSummary" xml:space="preserve">
    <value>Poor Man's T-SQL Formatter - a small free Transact-SQL formatting 
library for .Net 2.0, written in C#. Distributed under AGPL v3.
Copyright (C) 2011 Tao Klerks</value>
  </data>
  <data name="ProgramUsageNotes" xml:space="preserve">
    <value>
Usage notes: 

SqlFormatter &lt;filename or pattern&gt; &lt;options&gt;

is  indentString (default: \t)
st  spacesPerTab (default: 4)
mw  maxLineWidth (default: 999)
sb  statementBreaks (default: 2)
cb  clauseBreaks (default: 1)
tc  trailingCommas (default: false)
sac spaceAfterExpandedComma (default: false)
ebc expandBetweenConditions (default: true)
ebe expandBooleanExpressions (default: true)
ecs expandCaseStatements (default: true)
ecl expandCommaLists (default: true)
eil expandInLists (default: true)
uk  uppercaseKeywords (default: true)
sk  standardizeKeywords (default: false)
ae  allowParsingErrors (default: false)
e   extensions (default: sql)
r   recursive (default: false)
b   backups (default: true)
o   outputFileOrFolder (default: none; if set, overrides the backup option)
l   languageCode (default: current if supported or EN; valid values include EN, FR and ES)
h ? help

Disable boolean options with a trailing minus, enable by just specifying them or with a trailing plus.
You can also pipe the SQL to be formatted in (UTF-8 encoding), and then no input path is expected.

Examples:

SqlFormatter TestFiles\* /is:"  " /tc /uk- 

SqlFormatter test*.sql /o:resultfile.sql

echo select somecolumn from sometable | SqlFormatter 

</value>
  </data>
  <data name="UnrecognizedArgumentsErrorMessage" xml:space="preserve">
    <value>Unrecognized arguments found!</value>
  </data>
  <data name="UnrecognizedLanguageErrorMessage" xml:space="preserve">
    <value>The provided Language Code is not supported.</value>
  </data>
</root>

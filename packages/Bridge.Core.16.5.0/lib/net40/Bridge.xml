<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bridge</name>
    </assembly>
    <members>
        <member name="T:Bridge.Internal.Html5.XMLHttpRequest">
            <summary>
            XMLHttpRequest is a JavaScript object that was designed by Microsoft and adopted by Mozilla, Apple, and Google. It's now being standardized in the W3C. It provides an easy way to retrieve data from a URL without having to do a full page refresh. A Web page can update just a part of the page without disrupting what the user is doing.  XMLHttpRequest is used heavily in AJAX programming.
            Despite its name, XMLHttpRequest can be used to retrieve any type of data, not just XML, and it supports protocols other than HTTP (including file and ftp).
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.XMLHttpRequest.OnReadyStateChange">
            <summary>
            A JavaScript function object that is called whenever the readyState attribute changes. The callback is called from the user interface thread.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.XMLHttpRequest.Response">
            <summary>
            The response entity body according to responseType, as an ArrayBuffer, Blob, Document, JavaScript object (for "json"), or string. This is null if the request is not complete or was not successful.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.XMLHttpRequest.ResponseText">
            <summary>
            The response to the request as text, or null if the request was unsuccessful or has not yet been sent.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.XMLHttpRequest.Status">
            <summary>
            The status of the response to the request. This is the HTTP result code (for example, status is 200 for a successful request).
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.XMLHttpRequest.StatusText">
            <summary>
            The response string returned by the HTTP server. Unlike status, this includes the entire text of the response message ("200 OK", for example).
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.XMLHttpRequest.Timeout">
            <summary>
            The number of milliseconds a request can take before automatically being terminated. A value of 0 (which is the default) means there is no timeout.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.XMLHttpRequest.WithCredentials">
            <summary>
            Indicates whether or not cross-site Access-Control requests should be made using credentials such as cookies or authorization headers. The default is false.
            </summary>
        </member>
        <member name="M:Bridge.Internal.Html5.XMLHttpRequest.Abort">
            <summary>
            Aborts the request if it has already been sent.
            </summary>
        </member>
        <member name="M:Bridge.Internal.Html5.XMLHttpRequest.GetAllResponseHeaders">
            <summary>
            Returns all the response headers as a string, or null if no response has been received. Note: For multipart requests, this returns the headers from the current part of the request, not from the original channel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bridge.Internal.Html5.XMLHttpRequest.GetResponseHeader(System.String)">
            <summary>
            Returns the string containing the text of the specified header, or null if either the response has not yet been received or the header doesn't exist in the response.
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Internal.Html5.XMLHttpRequest.Open(System.String,System.String)">
            <summary>
            Initializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use openRequest()instead.
            </summary>
            <param name="method">The HTTP method to use, such as "GET", "POST", "PUT", "DELETE", etc. Ignored for non-HTTP(S) URLs.</param>
            <param name="url">The URL to send the request to.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.XMLHttpRequest.Open(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use openRequest()instead.
            </summary>
            <param name="method">The HTTP method to use, such as "GET", "POST", "PUT", "DELETE", etc. Ignored for non-HTTP(S) URLs.</param>
            <param name="url">The URL to send the request to.</param>
            <param name="async">An optional boolean parameter, defaulting to true, indicating whether or not to perform the operation asynchronously. If this value is false, the send()method does not return until the response is received. If true, notification of a completed transaction is provided using event listeners. This must be true if the multipart attribute is true, or an exception will be thrown.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.XMLHttpRequest.Open(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use openRequest()instead.
            </summary>
            <param name="method">The HTTP method to use, such as "GET", "POST", "PUT", "DELETE", etc. Ignored for non-HTTP(S) URLs.</param>
            <param name="url">The URL to send the request to.</param>
            <param name="async">An optional boolean parameter, defaulting to true, indicating whether or not to perform the operation asynchronously. If this value is false, the send()method does not return until the response is received. If true, notification of a completed transaction is provided using event listeners. This must be true if the multipart attribute is true, or an exception will be thrown.</param>
            <param name="user">The optional user name to use for authentication purposes; by default, this is an empty string.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.XMLHttpRequest.Open(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use openRequest()instead.
            </summary>
            <param name="method">The HTTP method to use, such as "GET", "POST", "PUT", "DELETE", etc. Ignored for non-HTTP(S) URLs.</param>
            <param name="url">The URL to send the request to.</param>
            <param name="async">An optional boolean parameter, defaulting to true, indicating whether or not to perform the operation asynchronously. If this value is false, the send()method does not return until the response is received. If true, notification of a completed transaction is provided using event listeners. This must be true if the multipart attribute is true, or an exception will be thrown.</param>
            <param name="user">The optional user name to use for authentication purposes; by default, this is an empty string.</param>
            <param name="password">The optional password to use for authentication purposes; by default, this is an empty string.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.XMLHttpRequest.OverrideMimeType(System.String)">
            <summary>
            Overrides the MIME type returned by the server. This may be used, for example, to force a stream to be treated and parsed as text/xml, even if the server does not report it as such. This method must be called before send().
            </summary>
            <param name="mimetype"></param>
        </member>
        <member name="M:Bridge.Internal.Html5.XMLHttpRequest.Send">
            <summary>
            Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent. If the request is synchronous, this method doesn't return until the response has arrived.
            </summary>
        </member>
        <member name="M:Bridge.Internal.Html5.XMLHttpRequest.Send(System.String)">
            <summary>
            Sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent. If the request is synchronous, this method doesn't return until the response has arrived.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Bridge.Internal.Html5.XMLHttpRequest.SetRequestHeader(System.String,System.String)">
            <summary>
            Sets the value of an HTTP request header. You must call setRequestHeader() after open(), but before send(). If this method is called several times with the same header, the values are merged into one single request header.
            </summary>
            <param name="header">The name of the header whose value is to be set.</param>
            <param name="value">The value to set as the body of the header.</param>
        </member>
        <member name="F:Bridge.Internal.Html5.XMLHttpRequest.ReadyState">
            <summary>
            The state of the request
            </summary>
        </member>
        <member name="T:Bridge.Internal.Html5.File">
            <summary>
            The File interface provides information about -- and access to the contents of -- files.
            These are generally retrieved from a FileList object returned as a result of a user selecting files using the &lt;input&gt; element, from a drag and drop operation's DataTransfer object, or from the mozGetAsFile() API on an HTMLCanvasElement.
            The file reference can be saved when the form is submitted while the user is offline, so that the data can be retrieved and uploaded when the Internet connection is restored.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.File.Name">
            <summary>
            The name of the file referenced by the File object.
            </summary>
        </member>
        <member name="T:Bridge.Internal.Html5.ArrayBuffer">
            <summary>
            The ArrayBuffer is a data type that is used to represent a generic, fixed-length binary data buffer. You can't directly manipulate the contents of an ArrayBuffer; instead, you create an ArrayBufferView object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.
            </summary>
        </member>
        <member name="M:Bridge.Internal.Html5.ArrayBuffer.#ctor">
            <summary>
             The empty constuctor
            </summary>
        </member>
        <member name="M:Bridge.Internal.Html5.ArrayBuffer.#ctor(System.Int32)">
            <summary>
            The constructor accepts as input a byte length for the new buffer, and returns the newly-created ArrayBuffer object.
            </summary>
            <param name="length">The size, in bytes, of the array buffer to create.</param>
        </member>
        <member name="F:Bridge.Internal.Html5.ArrayBuffer.ByteLength">
            <summary>
            The size, in bytes, of the array. This is established when the array is constructed and cannot be changed. Read only.
            </summary>
        </member>
        <member name="M:Bridge.Internal.Html5.ArrayBuffer.Slice(System.Int32)">
            <summary>
            Returns a new ArrayBuffer whose contents are a copy of this ArrayBuffer's bytes from begin, inclusive, up to end, exclusive. If either begin or end is negative, it refers to an index from the end of the array, as opposed to from the beginning.
            </summary>
            <param name="begin">Byte index to start slicing.</param>
            <returns>A new ArrayBuffer object.</returns>
        </member>
        <member name="M:Bridge.Internal.Html5.ArrayBuffer.Slice(System.Int32,System.Int32)">
            <summary>
            Returns a new ArrayBuffer whose contents are a copy of this ArrayBuffer's bytes from begin, inclusive, up to end, exclusive. If either begin or end is negative, it refers to an index from the end of the array, as opposed to from the beginning.
            </summary>
            <param name="begin">Byte index to start slicing.</param>
            <param name="end">Byte index to end slicing. If end is unspecified, the new ArrayBuffer contains all bytes from begin to the end of this ArrayBuffer.</param>
            <returns>A new ArrayBuffer object.</returns>
        </member>
        <member name="T:Bridge.Internal.Html5.ArrayBufferView">
             <summary>
             ArrayBufferView is a helper type representing any of the following JavaScript TypedArray types:
            
                 Int8Array,
                 Uint8Array,
                 Uint8ClampedArray,
                 Int16Array,
                 Uint16Array,
                 Int32Array,
                 Uint32Array,
                 Float32Array,
                 Float64Array or
                 DataView.
            
             This is a helper type to simplify the specification, it isn't an interface and there are no objects implementing it.
             </summary>
        </member>
        <member name="T:Bridge.Internal.Html5.DataView">
            <summary>
            An ArrayBuffer is a useful object for representing an arbitrary chunk of data. In many cases, such data will be read from disk or from the network, and will not follow the alignment restrictions that are imposed on the Typed Array Views described earlier. In addition, the data will often be heterogeneous in nature and have a defined byte order.
            The DataView view provides a low-level interface for reading such data from and writing it to an ArrayBuffer.
            </summary>
        </member>
        <member name="M:Bridge.Internal.Html5.DataView.#ctor(Bridge.Internal.Html5.ArrayBuffer)">
            <summary>
            Returns a new DataView object using the passed ArrayBuffer for its storage.
            </summary>
            <param name="buffer">An existing ArrayBuffer to use as the storage for the new DataView object.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.DataView.#ctor(Bridge.Internal.Html5.ArrayBuffer,System.Int32)">
            <summary>
            Returns a new DataView object using the passed ArrayBuffer for its storage.
            </summary>
            <param name="buffer">An existing ArrayBuffer to use as the storage for the new DataView object.</param>
            <param name="byteOffset">The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the view of the buffer will start with the first byte.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.DataView.#ctor(Bridge.Internal.Html5.ArrayBuffer,System.Int32,System.Int32)">
            <summary>
            Returns a new DataView object using the passed ArrayBuffer for its storage.
            </summary>
            <param name="buffer">An existing ArrayBuffer to use as the storage for the new DataView object.</param>
            <param name="byteOffset">The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the view of the buffer will start with the first byte.</param>
            <param name="byteLength">The number of elements in the byte array. If unspecified, length of the view will match the buffer's length.</param>
        </member>
        <member name="F:Bridge.Internal.Html5.DataView.Buffer">
            <summary>
            The buffer this view references. Read only.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.DataView.ByteLength">
            <summary>
            The length, in bytes, of the view. Read only.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.DataView.ByteOffset">
            <summary>
            The offset, in bytes, to the first byte of the view within the ArrayBuffer. Read only.
            </summary>
        </member>
        <member name="M:Bridge.Internal.Html5.DataView.GetInt8(System.Int32)">
            <summary>
            Gets a signed 8-bit integer at the specified byte offset from the start of the view.
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to read the data.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Internal.Html5.DataView.GetUint8(System.Int32)">
            <summary>
            Gets an unsigned 8-bit integer at the specified byte offset from the start of the view.
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to read the data.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Internal.Html5.DataView.GetInt16(System.Int32)">
            <summary>
            Gets a signed 16-bit integer at the specified byte offset from the start of the view.
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to read the data.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Internal.Html5.DataView.GetInt16(System.Int32,System.Boolean)">
            <summary>
            Gets a signed 16-bit integer at the specified byte offset from the start of the view.
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to read the data.</param>
            <param name="littleEndian">Indicates whether the 16-bit int is stored in little- or big-endian format. If false or undefined, a big-endian value is read.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Internal.Html5.DataView.GetUint16(System.Int32)">
            <summary>
            Gets an unsigned 16-bit integer at the specified byte offset from the start of the view.
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to read the data.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Internal.Html5.DataView.GetUint16(System.Int32,System.Boolean)">
            <summary>
            Gets an unsigned 16-bit integer at the specified byte offset from the start of the view.
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to read the data.</param>
            <param name="littleEndian">Indicates whether the 16-bit int is stored in little- or big-endian format. If false or undefined, a big-endian value is read.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Internal.Html5.DataView.GetInt32(System.Int32)">
            <summary>
            Gets an signed 32-bit integer at the specified byte offset from the start of the view.
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to read the data.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Internal.Html5.DataView.GetInt32(System.Int32,System.Boolean)">
            <summary>
            Gets an signed 32-bit integer at the specified byte offset from the start of the view.
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to read the data.</param>
            <param name="littleEndian">Indicates whether the 32-bit int is stored in little- or big-endian format. If false or undefined, a big-endian value is read.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Internal.Html5.DataView.GetUint32(System.Int32)">
            <summary>
            Gets an unsigned 32-bit integer at the specified byte offset from the start of the view.
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to read the data.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Internal.Html5.DataView.GetUint32(System.Int32,System.Boolean)">
            <summary>
            Gets an unsigned 32-bit integer at the specified byte offset from the start of the view.
            </summary>
            <param name="byteOffset">The offset, in byte, from the start of the view where to read the data.</param>
            <param name="littleEndian">Indicates whether the 32-bit int is stored in little- or big-endian format. If false or undefined, a big-endian value is read.</param>
            <returns></returns>
        </member>
        <member name="T:Bridge.Internal.Html5.Float32Array">
            <summary>
            Represents an array of 32-bit floating point numbers (corresponding to the C 'float' data type)
            in the platform byte order. If control over byte order is needed, use DataView instead.
            The contents are initialized to 0. Once established, you can reference elements in the array
            using the object's methods, or using standard array index syntax (that is, using bracket
            notation).
            </summary>
        </member>
        <member name="M:Bridge.Internal.Html5.Float32Array.#ctor(Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Creates a new Float32Array of the specified length.
            </summary>
            <param name="length">Length of array to create</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Float32Array.#ctor(Bridge.Internal.Html5.Float32Array)">
            <summary>
            Creates a new Float32Array out of the specified Float32Array.
            </summary>
            <param name="typedArray">Float32Array to use as initial contents to the new array.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Float32Array.#ctor(System.Object)">
            <summary>
            Creates a new Float32Array out of the specified object.
            </summary>
            <param name="objectInstance">Object to be converted into the new array.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Float32Array.#ctor(Bridge.Internal.Html5.ArrayBuffer,System.UInt32,System.UInt32)">
            <summary>
            Creates a new Float32Array out of the specified buffer and byteOffset with the specified length.
            </summary>
            <param name="buffer">Arraybuffer to use as base for contents.</param>
            <param name="byteOffset">Optional. Position in the buffer to start reading data from.</param>
            <param name="length">Optional. Number of elements to consider while creating the array.</param>
        </member>
        <member name="P:Bridge.Internal.Html5.Float32Array.Item(Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Allows index operations on the array.
            </summary>
            <param name="i">Index position in the array.</param>
            <returns>The element in the specified position.</returns>
        </member>
        <member name="F:Bridge.Internal.Html5.Float32Array.BYTES_PER_ELEMENT">
            <summary>
            Returns a number value of the element size. 1 in the case of an Float32Array.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.Float32Array.length">
            <summary>
            Length property whose value is 3.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.Float32Array.name">
            <summary>
            Returns the string value of the constructor name. In the case of the Float32Array type: "Float32Array".
            </summary>
        </member>
        <member name="T:Bridge.Internal.Html5.Float64Array">
            <summary>
            Represents an array of 64-bit floating point numbers (corresponding to the C 'double' data type)
            in the platform byte order. If control over byte order is needed, use DataView instead.
            The contents are initialized to 0. Once established, you can reference elements in the array
            using the object's methods, or using standard array index syntax (that is, using bracket
            notation).
            </summary>
        </member>
        <member name="M:Bridge.Internal.Html5.Float64Array.#ctor(Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Creates a new Float64Array of the specified length.
            </summary>
            <param name="length">Length of array to create</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Float64Array.#ctor(Bridge.Internal.Html5.Float64Array)">
            <summary>
            Creates a new Float64Array out of the specified Float64Array.
            </summary>
            <param name="typedArray">Float64Array to use as initial contents to the new array.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Float64Array.#ctor(System.Object)">
            <summary>
            Creates a new Float64Array out of the specified object.
            </summary>
            <param name="objectInstance">Object to be converted into the new array.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Float64Array.#ctor(Bridge.Internal.Html5.ArrayBuffer,System.UInt32,System.UInt32)">
            <summary>
            Creates a new Float64Array out of the specified buffer and byteOffset with the specified length.
            </summary>
            <param name="buffer">Arraybuffer to use as base for contents.</param>
            <param name="byteOffset">Optional. Position in the buffer to start reading data from.</param>
            <param name="length">Optional. Number of elements to consider while creating the array.</param>
        </member>
        <member name="P:Bridge.Internal.Html5.Float64Array.Item(Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Allows index operations on the array.
            </summary>
            <param name="i">Index position in the array.</param>
            <returns>The element in the specified position.</returns>
        </member>
        <member name="F:Bridge.Internal.Html5.Float64Array.BYTES_PER_ELEMENT">
            <summary>
            Returns a number value of the element size. 1 in the case of an Float64Array.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.Float64Array.length">
            <summary>
            Length property whose value is 3.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.Float64Array.name">
            <summary>
            Returns the string value of the constructor name. In the case of the Float64Array type: "Float64Array".
            </summary>
        </member>
        <member name="T:Bridge.Internal.Html5.Int16Array">
            <summary>
            Represents an array of twos-complement 16-bit signed integers in the platform byte order.
            If control over byte order is needed, use DataView instead. The contents are initialized to 0.
            Once established, you can reference elements in the array using the object's methods, or using
            standard array index syntax (that is, using bracket notation).
            </summary>
        </member>
        <member name="M:Bridge.Internal.Html5.Int16Array.#ctor(Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Creates a new Int16Array of the specified length.
            </summary>
            <param name="length">Length of array to create</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Int16Array.#ctor(Bridge.Internal.Html5.Int16Array)">
            <summary>
            Creates a new Int16Array out of the specified Int16Array.
            </summary>
            <param name="typedArray">Int16Array to use as initial contents to the new array.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Int16Array.#ctor(System.Object)">
            <summary>
            Creates a new Int16Array out of the specified object.
            </summary>
            <param name="objectInstance">Object to be converted into the new array.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Int16Array.#ctor(Bridge.Internal.Html5.ArrayBuffer,System.UInt32,System.UInt32)">
            <summary>
            Creates a new Int16Array out of the specified buffer and byteOffset with the specified length.
            </summary>
            <param name="buffer">Arraybuffer to use as base for contents.</param>
            <param name="byteOffset">Optional. Position in the buffer to start reading data from.</param>
            <param name="length">Optional. Number of elements to consider while creating the array.</param>
        </member>
        <member name="P:Bridge.Internal.Html5.Int16Array.Item(Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Allows index operations on the array.
            </summary>
            <param name="i">Index position in the array.</param>
            <returns>The element in the specified position.</returns>
        </member>
        <member name="F:Bridge.Internal.Html5.Int16Array.BYTES_PER_ELEMENT">
            <summary>
            Returns a number value of the element size. 1 in the case of an Int16Array.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.Int16Array.length">
            <summary>
            Length property whose value is 3.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.Int16Array.name">
            <summary>
            Returns the string value of the constructor name. In the case of the Int16Array type: "Int16Array".
            </summary>
        </member>
        <member name="T:Bridge.Internal.Html5.Int32Array">
            <summary>
            Represents an array of twos-complement 32-bit signed integers in the platform byte order.
            If control over byte order is needed, use DataView instead. The contents are initialized to 0.
            Once established, you can reference elements in the array using the object's methods, or using
            standard array index syntax (that is, using bracket notation).
            </summary>
        </member>
        <member name="M:Bridge.Internal.Html5.Int32Array.#ctor(Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Creates a new Int32Array of the specified length.
            </summary>
            <param name="length">Length of array to create</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Int32Array.#ctor(Bridge.Internal.Html5.Int32Array)">
            <summary>
            Creates a new Int32Array out of the specified Int32Array.
            </summary>
            <param name="typedArray">Int32Array to use as initial contents to the new array.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Int32Array.#ctor(System.Object)">
            <summary>
            Creates a new Int32Array out of the specified object.
            </summary>
            <param name="objectInstance">Object to be converted into the new array.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Int32Array.#ctor(Bridge.Internal.Html5.ArrayBuffer,System.UInt32,System.UInt32)">
            <summary>
            Creates a new Int32Array out of the specified buffer and byteOffset with the specified length.
            </summary>
            <param name="buffer">Arraybuffer to use as base for contents.</param>
            <param name="byteOffset">Optional. Position in the buffer to start reading data from.</param>
            <param name="length">Optional. Number of elements to consider while creating the array.</param>
        </member>
        <member name="P:Bridge.Internal.Html5.Int32Array.Item(Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Allows index operations on the array.
            </summary>
            <param name="i">Index position in the array.</param>
            <returns>The element in the specified position.</returns>
        </member>
        <member name="F:Bridge.Internal.Html5.Int32Array.BYTES_PER_ELEMENT">
            <summary>
            Returns a number value of the element size. 1 in the case of an Int32Array.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.Int32Array.length">
            <summary>
            Length property whose value is 3.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.Int32Array.name">
            <summary>
            Returns the string value of the constructor name. In the case of the Int32Array type: "Int32Array".
            </summary>
        </member>
        <member name="T:Bridge.Internal.Html5.Int8Array">
            <summary>
            Represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0.
            Once established, you can reference elements in the array using the object's methods, or using standard
            array index syntax (that is, using bracket notation).
            </summary>
        </member>
        <member name="M:Bridge.Internal.Html5.Int8Array.#ctor(System.Int32)">
            <summary>
            Creates a new Int8Array of the specified length.
            </summary>
            <param name="length">Length of array to create</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Int8Array.#ctor(Bridge.Internal.Html5.Int8Array)">
            <summary>
            Creates a new Int8Array out of the specified Int8Array.
            </summary>
            <param name="typedArray">Int8Array to use as initial contents to the new array.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Int8Array.#ctor(System.Object)">
            <summary>
            Creates a new Int8Array out of the specified object.
            </summary>
            <param name="objectInstance">Object to be converted into the new array.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Int8Array.#ctor(Bridge.Internal.Html5.ArrayBuffer,System.UInt32,System.UInt32)">
            <summary>
            Creates a new Int8Array out of the specified buffer and byteOffset with the specified length.
            </summary>
            <param name="buffer">Arraybuffer to use as base for contents.</param>
            <param name="byteOffset">Optional. Position in the buffer to start reading data from.</param>
            <param name="length">Optional. Number of elements to consider while creating the array.</param>
        </member>
        <member name="P:Bridge.Internal.Html5.Int8Array.Item(Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Allows index operations on the array.
            </summary>
            <param name="i">Index position in the array.</param>
            <returns>The element in the specified position.</returns>
        </member>
        <member name="F:Bridge.Internal.Html5.Int8Array.BYTES_PER_ELEMENT">
            <summary>
            Returns a number value of the element size. 1 in the case of an Int8Array.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.Int8Array.length">
            <summary>
            Length property whose value is 3.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.Int8Array.name">
            <summary>
            Returns the string value of the constructor name. In the case of the Int8Array type: "Int8Array".
            </summary>
        </member>
        <member name="T:Bridge.Internal.Html5.TypedArray.Prototype`2">
            <summary>
            Represents the prototype for TypedArray constructors.
            TypedArray instances inherit from TypedArray.prototype. You can use the constructor's prototype
            object to add properties or methods to all TypedArray instances, where TypedArray is one of the
            typed array types.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.TypedArray.Prototype`2.Buffer">
            <summary>
            Returns the ArrayBuffer referenced by the typed array. Fixed at construction time and thus
            read only.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.TypedArray.Prototype`2.ByteLength">
            <summary>
            Returns the length (in bytes) of the typed array from the start of its ArrayBuffer.
            Fixed at construction time and thus read only
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.TypedArray.Prototype`2.ByteOffset">
            <summary>
            Returns the offset (in bytes) of the typed array from the start of its ArrayBuffer.
            Fixed at construction time and thus read only.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.TypedArray.Prototype`2.Length">
            <summary>
            Returns the number of elements hold in the typed array. Fixed at construction time and thus
            read only.
            </summary>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.CopyWithin(Bridge.Union{System.Int32,System.UInt32},Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Copies a sequence of array elements within the array to the position starting at target.
            The copy is taken from the index positions of the second and third arguments start and end.
            The end argument is optional and defaults to the length of the array.
            </summary>
            <param name="target">Target start index position where to copy the elements to.</param>
            <param name="start">Source start index position where to start copying elements from.</param>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.CopyWithin(Bridge.Union{System.Int32,System.UInt32},Bridge.Union{System.Int32,System.UInt32},Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Copies a sequence of array elements within the array to the position starting at target.
            The copy is taken from the index positions of the second and third arguments start and end.
            The end argument is optional and defaults to the length of the array.
            </summary>
            <param name="target">Target start index position where to copy the elements to.</param>
            <param name="start">Source start index position where to start copying elements from.</param>
            <param name="end">Optional. Source end index position where to end copying elements from.</param>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.Every(System.Func{`1,Bridge.Union{System.Int32,System.UInt32},`0,System.Boolean},`0)">
            <summary>
            Tests whether all elements in the array pass the test provided by a function.
            </summary>
            <param name="callback">
            Function to test for each element, taking three arguments:
            currentValue: The current element being processed in the typed array.
            index: The index of the current element being processed in the typed array.
            array: The typed array every was called upon.
            </param>
            <param name="thisArg">Optional. Value to use as this when executing callback.</param>
            <returns>True if callback returns true for all elements on array, false otherwise.</returns>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.Fill(`1)">
            <summary>
            Fills all the elements of an array from a start index to an end index with a static value.
            </summary>
            <param name="value">Value to fill the typed array with.</param>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.Fill(`1,Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Fills all the elements of an array from a start index to an end index with a static value.
            </summary>
            <param name="value">Value to fill the typed array with.</param>
            <param name="start">Optional. Start index. Defaults to 0.</param>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.Fill(`1,Bridge.Union{System.Int32,System.UInt32},Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Fills all the elements of an array from a start index to an end index with a static value.
            </summary>
            <param name="value">Value to fill the typed array with.</param>
            <param name="start">Optional. Start index. Defaults to 0.</param>
            <param name="end">Optional. End index. Defaults to 0.</param>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.Filter(System.Func{`1,Bridge.Union{System.Int32,System.UInt32},`0,System.Boolean},`0)">
            <summary>
            Creates a new array with all of the elements of this array for which the provided filtering
            function returns true.
            </summary>
            <param name="callback">
            Function to test each element of the typed array. Invoked with arguments
            (element, index, typedarray). Return true to keep the element, false otherwise.
            </param>
            <param name="thisArg">Value to use as this when executing callback.</param>
            <returns></returns>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.ForEach(System.Func{`1,Bridge.Union{System.Int32,System.UInt32},`0,`1},`0)">
            <summary>
            Calls a function for each element in the array.
            </summary>
            <param name="callback">
            Function that produces an element of the new typed array, taking three arguments:
            currentValue: The current element being processed in the typed array.
            index: The index of the current element being processed in the typed array.
            array: The array forEach() was called upon.
            </param>
            <param name="thisArg">Optional. Value to use as 'this' when executing callback.</param>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.IndexOf(`1,Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Returns the first (least) index of an element within the array equal to the specified
            value, or -1 if none is found.
            </summary>
            <param name="searchElement">Element to locate in the typed array.</param>
            <param name="fromIndex">
            The index to start the search at. If the index is greater than or equal to the typed array's
            length, -1 is returned, which means the typed array will not be searched. If the provided
            index value is a negative number, it is taken as the offset from the end of the typed array.
            Note: if the provided index is negative, the typed array is still searched from front to back.
            If the calculated index is less than 0, then the whole typed array will be searched.
            Default: 0 (entire typed array is searched).
            </param>
            <returns>
            The first index at which a given element can be found in the typed array, or -1 if it is
            not present.
            </returns>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.Join(System.Char)">
            <summary>
            Joins all elements of an array into a string.
            </summary>
            <param name="separator">
            Optional. Specifies a string to separate each element. The separator is converted to a string
            if necessary. If omitted, the typed array elements are separated with a comma (",").
            </param>
            <returns>A string containing the elements, separated by "," or the specified separator.</returns>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.Join(System.String)">
            <summary>
            Joins all elements of an array into a string.
            </summary>
            <param name="separator">
            Optional. Specifies a string to separate each element. The separator is converted to a string
            if necessary. If omitted, the typed array elements are separated with a comma (",").
            </param>
            <returns>A string containing the elements, separated by "," or the specified separator.</returns>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.LastIndexOf(`1)">
            <summary>
            Returns the last (greatest) index of an element within the array equal to the specified
            value, or -1 if none is found.
            </summary>
            <param name="searchElement">Element to locate in the typed array.</param>
            <returns>
            The last index at which a given element can be found in the typed array, or -1 if it is
            not present.
            </returns>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.LastIndexOf(`1,Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Returns the last (greatest) index of an element within the array equal to the specified
            value, or -1 if none is found.
            </summary>
            <param name="searchElement">Element to locate in the typed array.</param>
            <param name="fromIndex">
            The index at which to start searching backwards. Defaults to the typed array's length, i.e.
            the whole typed array will be searched. If the index is greater than or equal to the length
            of the typed array, the whole typed array will be searched. If negative, it is taken as the
            offset from the end of the typed array. Note that even when the index is negative, the typed
            array is still searched from back to front. If the calculated index is less than 0, -1 is
            returned, i.e. the typed array will not be searched.
            </param>
            <returns>
            The last index at which a given element can be found in the typed array, or -1 if it is
            not present.
            </returns>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.Map(System.Func{`1,Bridge.Union{System.Int32,System.UInt32},`0,`1},`0)">
            <summary>
            Creates a new array with the results of calling a provided function on every element in this array.
            </summary>
            <param name="callback">
            Function that produces an element of the new typed array, taking three arguments:
            currentValue: The current element being processed in the typed array.
            index: The index of the current element being processed in the typed array.
            array: The array forEach() was called upon.
            </param>
            <param name="thisArg">Optional. Value to use as 'this' when executing callback.</param>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.Reduce(System.Func{`1,`1,Bridge.Union{System.Int32,System.UInt32},`0,`1},`1)">
            <summary>
            Apply a function against an accumulator and each value of the array (from left-to-right)
            as to reduce it to a single value.
            </summary>
            <param name="callback">
            Function to execute on each value in the typed array, taking four arguments:
            previousValue: The value previously returned in the last invocation of the callback, or initialValue,
            if supplied (see below).
            currentValue: The current element being processed in the typed array.
            index: The index of the current element being processed in the typed array.
            array: The typed array reduce was called upon.
            </param>
            <param name="initialValue">
            Optional. Object to use as the first argument to the first call of the callback.
            </param>
            <returns></returns>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.ReduceRight(System.Func{`1,`1,Bridge.Union{System.Int32,System.UInt32},`0,`1},`1)">
            <summary>
            Apply a function against an accumulator and each value of the array (from right-to-left)
            as to reduce it to a single value.
            </summary>
            <param name="callback">
            Function to execute on each value in the typed array, taking four arguments:
            previousValue: The value previously returned in the last invocation of the callback, or initialValue,
            if supplied (see below).
            currentValue: The current element being processed in the typed array.
            index: The index of the current element being processed in the typed array.
            array: The typed array reduce was called upon.
            </param>
            <param name="initialValue">
            Optional. Object to use as the first argument to the first call of the callback.
            </param>
            <returns></returns>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.Reverse">
            <summary>
            Reverses the order of the elements of an array — the first becomes the last,
            and the last becomes the first.
            </summary>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.Set(System.Array)">
            <summary>
            Stores multiple values in the typed array, reading input values from a specified array.
            </summary>
            <param name="array">
            The array from which to copy values. All values from the source array are copied into the
            target array, unless the length of the source array plus the offset exceeds the length of
            the target array, in which case an exception is thrown.
            </param>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.Set(System.Array,Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Stores multiple values in the typed array, reading input values from a specified array.
            </summary>
            <param name="array">
            The array from which to copy values. All values from the source array are copied into the
            target array, unless the length of the source array plus the offset exceeds the length of
            the target array, in which case an exception is thrown.
            </param>
            <param name="offset">
            The offset into the target array at which to begin writing values from the source array.
            If you omit this value, 0 is assumed (that is, the source array will overwrite values in
            the target array starting at index 0).
            </param>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.Set(`0,Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Stores multiple values in the typed array, reading input values from a specified array.
            </summary>
            <param name="typedArray">
            If the source array is a typed array, the two arrays may share the same underlying
            ArrayBuffer; the browser will intelligently copy the source range of the buffer to the
            destination range.
            </param>
            <param name="offset">
            The offset into the target array at which to begin writing values from the source array.
            If you omit this value, 0 is assumed (that is, the source array will overwrite values in
            the target array starting at index 0).
            </param>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.Slice">
            <summary>
            Extracts a section of an array and returns a new array.
            </summary>
            <returns>A shallow copy of elements from the original typed array</returns>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.Slice(Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Extracts a section of an array and returns a new array.
            </summary>
            <param name="begin">
            Zero-based index at which to begin extraction.
            As a negative index, begin indicates an offset from the end of the sequence.
            slice(-2) extracts the last two elements in the sequence.
            If begin is omitted, slice begins from index 0.
            </param>
            <returns>A shallow copy of elements from the original typed array</returns>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.Slice(Bridge.Union{System.Int32,System.UInt32},Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Extracts a section of an array and returns a new array.
            </summary>
            <param name="begin">
            Zero-based index at which to begin extraction.
            As a negative index, begin indicates an offset from the end of the sequence.
            slice(-2) extracts the last two elements in the sequence.
            If begin is omitted, slice begins from index 0.
            </param>
            <param name="end">
            Zero-based index at which to end extraction.
            slice() extracts up to but not including end.slice(1,4) extracts the second element up to
            the fourth element (elements indexed 1, 2, and 3).
            As a negative index, end indicates an offset from the end of the sequence.
            slice(2,-1) extracts the third element through the second-to-last element in the sequence.
            If end is omitted, slice extracts to the end of the sequence (arr.length).
            </param>
            <returns>A shallow copy of elements from the original typed array</returns>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.Some(System.Func{`1,Bridge.Union{System.Int32,System.UInt32},`0,`1},`0)">
            <summary>
            Returns true if at least one element in this array satisfies the provided testing function.
            </summary>
            <param name="callback">
            Function to test for each element, taking three arguments:
            currentValue: The current element being processed in the typed array.
            index: The index of the current element being processed in the typed array.
            array: The array some() was called upon.
            </param>
            <param name="thisArg">Optional. Value to use as 'this' when executing callback.</param>
            <returns>
            True if at least one element in this array satisfies the provided testing function.
            False otherwise.
            </returns>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.Sort">
            <summary>
            Sorts the elements of an array in place and returns the array.
            </summary>
            <returns>Sorted TypedArray.</returns>
            <remarks>Most browsers do not support this yet.</remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.Sort(System.Func{`1,`1,System.Int32})">
             <summary>
             Sorts the elements of an array in place and returns the array.
             </summary>
             <param name="compareFunction">
             Specifies a function that defines the sort order. If omitted, the array is sorted according to
             each character's Unicode code point value, according to the string conversion of each element.
             Example: int compareFunction(a, b) { ... };
             </param>
             <remarks>
             Most browsers do not support this yet.
            
             If compareFunction is supplied, the array elements are sorted according to the return value of the
             compare function. If a and b are two elements being compared, then:
             • If compareFunction(a, b) is less than 0, sort a to a lower index than b, i.e. a comes first.
             • If compareFunction(a, b) returns 0, leave a and b unchanged with respect to each other, but sorted
               with respect to all different elements. Note: the ECMAscript standard does not guarantee this
               behaviour, and thus not all browsers (e.g. Mozilla versions dating back to at least 2003) respect
               this.
             • If compareFunction(a, b) is greater than 0, sort b to a lower index than a.
             • compareFunction(a, b) must always return the same value when given a specific pair of elements a
               and b as its two arguments. If inconsistent results are returned then the sort order is undefined.
             </remarks>
             <returns>Sorted TypedArray.</returns>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.SubArray">
            <summary>
            Returns a new TypedArray from the given start and end element index.
            </summary>
            <returns>
            A new TypedArray on the same ArrayBuffer store and with the same element types
            as for this TypedArray object.
            </returns>
            <remarks>
            Some browsers do not support this yet (may require begin and end parameters).
            </remarks>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.SubArray(Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Returns a new TypedArray from the given start and end element index.
            </summary>
            <param name="begin">Element to begin at. The offset is inclusive.</param>
            <returns>
            A new TypedArray on the same ArrayBuffer store and with the same element types
            as for this TypedArray object.
            </returns>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.SubArray(Bridge.Union{System.Int32,System.UInt32},Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Returns a new TypedArray from the given start and end element index.
            </summary>
            <param name="begin">Element to begin at. The offset is inclusive.</param>
            <param name="end">
            Element to end at. The offset is exclusive. If not specified, all elements from the one
            specified by begin to the end of the array are included in the new view.
            </param>
            <returns>
            A new TypedArray on the same ArrayBuffer store and with the same element types
            as for this TypedArray object.
            </returns>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.ToLocaleString">
            <summary>
            The elements are converted to Strings using their toLocaleString methods and these Strings
            are separated by a locale-specific String (such as a comma “,”).
            </summary>
            <returns>A localized string representing the array and its elements.</returns>
        </member>
        <member name="M:Bridge.Internal.Html5.TypedArray.Prototype`2.ToString">
            <summary>
            Joins the array and returns one string containing each array element separated by commas.
            </summary>
            <returns>A string representing the array and its elements.</returns>
        </member>
        <member name="P:Bridge.Internal.Html5.TypedArray.Prototype`2.System#Collections#Generic#ICollection{TypedElement}#IsReadOnly">
            <summary>
            Gets a value indicating whether the TypedArray is read-only.
            </summary>
        </member>
        <member name="T:Bridge.Internal.Html5.Uint16Array">
            <summary>
            Represents an array of 16-bit unsigned integers in the platform byte order.
            If control over byte order is needed, use DataView instead. The contents are initialized to 0.
            Once established, you can reference elements in the array using the object's methods, or using
            standard array index syntax (that is, using bracket notation).
            </summary>
        </member>
        <member name="M:Bridge.Internal.Html5.Uint16Array.#ctor(Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Creates a new Uint16Array of the specified length.
            </summary>
            <param name="length">Length of array to create</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Uint16Array.#ctor(Bridge.Internal.Html5.Uint16Array)">
            <summary>
            Creates a new Uint16Array out of the specified Uint16Array.
            </summary>
            <param name="typedArray">Uint16Array to use as initial contents to the new array.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Uint16Array.#ctor(System.Object)">
            <summary>
            Creates a new Uint16Array out of the specified object.
            </summary>
            <param name="objectInstance">Object to be converted into the new array.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Uint16Array.#ctor(Bridge.Internal.Html5.ArrayBuffer,System.UInt32,System.UInt32)">
            <summary>
            Creates a new Uint16Array out of the specified buffer and byteOffset with the specified length.
            </summary>
            <param name="buffer">Arraybuffer to use as base for contents.</param>
            <param name="byteOffset">Optional. Position in the buffer to start reading data from.</param>
            <param name="length">Optional. Number of elements to consider while creating the array.</param>
        </member>
        <member name="P:Bridge.Internal.Html5.Uint16Array.Item(Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Allows index operations on the array.
            </summary>
            <param name="i">Index position in the array.</param>
            <returns>The element in the specified position.</returns>
        </member>
        <member name="F:Bridge.Internal.Html5.Uint16Array.BYTES_PER_ELEMENT">
            <summary>
            Returns a number value of the element size. 1 in the case of an Uint16Array.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.Uint16Array.length">
            <summary>
            Length property whose value is 3.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.Uint16Array.name">
            <summary>
            Returns the string value of the constructor name. In the case of the Uint16Array type: "Uint16Array".
            </summary>
        </member>
        <member name="T:Bridge.Internal.Html5.Uint32Array">
            <summary>
            Represents an array of 32-bit unsigned integers in the platform byte order.
            If control over byte order is needed, use DataView instead. The contents are initialized to 0.
            Once established, you can reference elements in the array using the object's methods, or using
            standard array index syntax (that is, using bracket notation).
            </summary>
        </member>
        <member name="M:Bridge.Internal.Html5.Uint32Array.#ctor(Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Creates a new Uint32Array of the specified length.
            </summary>
            <param name="length">Length of array to create</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Uint32Array.#ctor(Bridge.Internal.Html5.Uint32Array)">
            <summary>
            Creates a new Uint32Array out of the specified Uint32Array.
            </summary>
            <param name="typedArray">Uint32Array to use as initial contents to the new array.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Uint32Array.#ctor(System.Object)">
            <summary>
            Creates a new Uint32Array out of the specified object.
            </summary>
            <param name="objectInstance">Object to be converted into the new array.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Uint32Array.#ctor(Bridge.Internal.Html5.ArrayBuffer,System.UInt32,System.UInt32)">
            <summary>
            Creates a new Uint32Array out of the specified buffer and byteOffset with the specified length.
            </summary>
            <param name="buffer">Arraybuffer to use as base for contents.</param>
            <param name="byteOffset">Optional. Position in the buffer to start reading data from.</param>
            <param name="length">Optional. Number of elements to consider while creating the array.</param>
        </member>
        <member name="P:Bridge.Internal.Html5.Uint32Array.Item(Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Allows index operations on the array.
            </summary>
            <param name="i">Index position in the array.</param>
            <returns>The element in the specified position.</returns>
        </member>
        <member name="F:Bridge.Internal.Html5.Uint32Array.BYTES_PER_ELEMENT">
            <summary>
            Returns a number value of the element size. 1 in the case of an Uint32Array.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.Uint32Array.length">
            <summary>
            Length property whose value is 3.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.Uint32Array.name">
            <summary>
            Returns the string value of the constructor name. In the case of the Uint32Array type: "Uint32Array".
            </summary>
        </member>
        <member name="T:Bridge.Internal.Html5.Uint8Array">
            <summary>
            Represents an array of twos-complement 8-bit unsigned integers. The contents are initialized to 0.
            Once established, you can reference elements in the array using the object's methods, or using standard
            array index syntax (that is, using bracket notation).
            </summary>
        </member>
        <member name="M:Bridge.Internal.Html5.Uint8Array.#ctor(Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Creates a new Uint8Array of the specified length.
            </summary>
            <param name="length">Length of array to create</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Uint8Array.#ctor(Bridge.Internal.Html5.Uint8Array)">
            <summary>
            Creates a new Uint8Array out of the specified Uint8Array.
            </summary>
            <param name="typedArray">Uint8Array to use as initial contents to the new array.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Uint8Array.#ctor(System.Object)">
            <summary>
            Creates a new Uint8Array out of the specified object.
            </summary>
            <param name="objectInstance">Object to be converted into the new array.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Uint8Array.#ctor(Bridge.Internal.Html5.ArrayBuffer,System.UInt32,System.UInt32)">
            <summary>
            Creates a new Uint8Array out of the specified buffer and byteOffset with the specified length.
            </summary>
            <param name="buffer">Arraybuffer to use as base for contents.</param>
            <param name="byteOffset">Optional. Position in the buffer to start reading data from.</param>
            <param name="length">Optional. Number of elements to consider while creating the array.</param>
        </member>
        <member name="P:Bridge.Internal.Html5.Uint8Array.Item(Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Allows index operations on the array.
            </summary>
            <param name="i">Index position in the array.</param>
            <returns>The element in the specified position.</returns>
        </member>
        <member name="F:Bridge.Internal.Html5.Uint8Array.BYTES_PER_ELEMENT">
            <summary>
            Returns a number value of the element size. 1 in the case of an Uint8Array.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.Uint8Array.length">
            <summary>
            Length property whose value is 3.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.Uint8Array.name">
            <summary>
            Returns the string value of the constructor name. In the case of the Uint8Array type: "Uint8Array".
            </summary>
        </member>
        <member name="T:Bridge.Internal.Html5.Uint8ClampedArray">
            <summary>
            Represents an array of twos-complement 8-bit unsigned integers clamped to 0-255. The contents are
            initialized to 0. Once established, you can reference elements in the array using the object's
            methods, or using standard array index syntax (that is, using bracket notation).
            </summary>
        </member>
        <member name="M:Bridge.Internal.Html5.Uint8ClampedArray.#ctor(Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Creates a new Uint8ClampedArray of the specified length.
            </summary>
            <param name="length">Length of array to create</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Uint8ClampedArray.#ctor(Bridge.Internal.Html5.Uint8ClampedArray)">
            <summary>
            Creates a new Uint8ClampedArray out of the specified Uint8ClampedArray.
            </summary>
            <param name="typedArray">Uint8ClampedArray to use as initial contents to the new array.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Uint8ClampedArray.#ctor(System.Object)">
            <summary>
            Creates a new Uint8ClampedArray out of the specified object.
            </summary>
            <param name="objectInstance">Object to be converted into the new array.</param>
        </member>
        <member name="M:Bridge.Internal.Html5.Uint8ClampedArray.#ctor(Bridge.Internal.Html5.ArrayBuffer,System.UInt32,System.UInt32)">
            <summary>
            Creates a new Uint8ClampedArray out of the specified buffer and byteOffset with the specified length.
            </summary>
            <param name="buffer">Arraybuffer to use as base for contents.</param>
            <param name="byteOffset">Optional. Position in the buffer to start reading data from.</param>
            <param name="length">Optional. Number of elements to consider while creating the array.</param>
        </member>
        <member name="P:Bridge.Internal.Html5.Uint8ClampedArray.Item(Bridge.Union{System.Int32,System.UInt32})">
            <summary>
            Allows index operations on the array.
            </summary>
            <param name="i">Index position in the array.</param>
            <returns>The element in the specified position.</returns>
        </member>
        <member name="F:Bridge.Internal.Html5.Uint8ClampedArray.BYTES_PER_ELEMENT">
            <summary>
            Returns a number value of the element size. 1 in the case of an Uint8ClampedArray.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.Uint8ClampedArray.length">
            <summary>
            Length property whose value is 3.
            </summary>
        </member>
        <member name="F:Bridge.Internal.Html5.Uint8ClampedArray.name">
            <summary>
            Returns the string value of the constructor name. In the case of the Uint8ClampedArray type: "Uint8ClampedArray".
            </summary>
        </member>
        <member name="T:Bridge.ConventionAttribute">
            <summary>
            Controls a type or type members case notation in the script output.
            </summary>
        </member>
        <member name="M:Bridge.ConventionAttribute.#ctor">
            <summary>
            Initializes a new instance of the ConventionAttribute class
            with default Notation = None (as written in code), Target = All, Member = All, Accessibility = All
            </summary>
        </member>
        <member name="M:Bridge.ConventionAttribute.#ctor(Bridge.Notation)">
            <summary>
            Initializes a new instance of the ConventionAttribute class with specified Notation.
            </summary>
            <param name="notation">Specifies notation to be applied.</param>
        </member>
        <member name="M:Bridge.ConventionAttribute.#ctor(Bridge.Notation,Bridge.ConventionTarget)">
             <summary>
            Initializes a new instance of the ConventionAttribute class with specified Notation and Target.
             </summary>
             <param name="notation"></param>
             <param name="target">Specifies target(s) to be filtered by [Convention] attribute.</param>
        </member>
        <member name="P:Bridge.ConventionAttribute.Notation">
            <summary>
            Specifies notation to be applied by [Convention] attribute.
            </summary>
        </member>
        <member name="P:Bridge.ConventionAttribute.Target">
            <summary>
            Specifies target(s) to be filtered by [Convention] attribute.
            </summary>
        </member>
        <member name="P:Bridge.ConventionAttribute.Member">
            <summary>
            Specifies type member(s) to be filtered by [Convention] attribute.
            </summary>
        </member>
        <member name="P:Bridge.ConventionAttribute.Accessibility">
            <summary>
            Specifies access modifiers to be filtered by [Convention] attribute.
            </summary>
        </member>
        <member name="P:Bridge.ConventionAttribute.Filter">
            <summary>
            Semicolon separated list of type paths (a type member's full name, for example)
            to be applied by [Convention] attribute.
            It can contain a simple path like "YourNamespace.*"
            or a regex form with "regex:" prefix like "regex:YourNamespace\.([A-Za-z0-9\-]*)YourEntity"
            </summary>
        </member>
        <member name="P:Bridge.ConventionAttribute.Priority">
            <summary>
            Applied to assembly attributes only
            </summary>
        </member>
        <member name="T:Bridge.ConventionTarget">
            <summary>
            Specifies target(s) to be filtered by [Convention] attribute.
            </summary>
        </member>
        <member name="T:Bridge.ConventionMember">
            <summary>
            Specifies type member(s) to be filtered by [Convention] attribute.
            </summary>
        </member>
        <member name="T:Bridge.ConventionAccessibility">
            <summary>
            Specifies access modifiers to be filtered by [Convention] attribute.
            </summary>
        </member>
        <member name="T:Bridge.Notation">
            <summary>
            Specifies case notation to be applied by [Convention] attribute for a type or type members.
            </summary>
        </member>
        <member name="F:Bridge.Notation.None">
            <summary>
            Does not change notation, i.e. as written.
            </summary>
        </member>
        <member name="T:Bridge.RulesAttribute">
            <summary>
            Allow to control some aspects of generated code
            </summary>
        </member>
        <member name="T:Bridge.UnboxAttribute">
            <summary>
            For classes marked with [External], controls unboxing for method parameters of type object.
            By default, Bridge applies unboxing. Add this attributes with allow = false to override this behaviour.
            </summary>
        </member>
        <member name="M:Bridge.UnboxAttribute.#ctor(System.Boolean)">
            <summary>
            Controls unboxing for [External] classes or methods.
            </summary>
            <param name="allow">False skips generating unboxing.</param>
        </member>
        <member name="T:Bridge.GlobalMethodsAttribute">
            <summary>
            This attribute turns methods on a static class as global methods in the generated
            script. Note that the class must be static, and must contain only methods.
            </summary>
        </member>
        <member name="T:Bridge.FieldPropertyAttribute">
            <summary>
            The [FieldProperty] attribute will be deprecated in Bridge 16.0 and removed in 17.0, see Issue #2234
            Complies a C# Property into a simple JavaScript field with no setter or getter, and also includes indexer access.
            </summary>
        </member>
        <member name="T:Bridge.ReflectableAttribute">
            <summary>
            Can be applied to a member to indicate that metadata for the member should (or should not) be included in the compiled script. By default members are reflectable if they have at least one scriptable attribute. The default reflectability can be changed with the DefaultMemberReflectabilityAttribute.
            </summary>
        </member>
        <member name="T:Bridge.MemberAccessibility">
            <summary>
            This enum defines the possibilities for default member reflectability.
            </summary>
        </member>
        <member name="T:Bridge.ExpandParamsAttribute">
            <summary>
            This attribute can be applied to a method with a "params" parameter to make the param array be expanded in script (eg. given 'void F(int a, params int[] b)', the invocation 'F(1, 2, 3)' will be translated to 'F(1, [2, 3])' without this attribute, but 'F(1, 2, 3)' with this attribute.
            Methods with this attribute can only be invoked in the expanded form.
            </summary>
        </member>
        <member name="T:Bridge.TemplateAttribute">
            <summary>
            TemplateAttribute is instruction to replace method calling (in expression) by required code
            </summary>
        </member>
        <member name="F:Bridge.InitPosition.After">
            <summary>
            Emit this Method body immediately after this class defintion (default)
            </summary>
        </member>
        <member name="F:Bridge.InitPosition.Before">
            <summary>
            Emit this Method body Immediately before this class definition
            </summary>
        </member>
        <member name="F:Bridge.InitPosition.Top">
            <summary>
            Emit the contents of this Method body directly to the Top of the file.
            </summary>
        </member>
        <member name="F:Bridge.InitPosition.Bottom">
            <summary>
            Emit the contents of this Method body directly to the Bottom of the file.
            </summary>
        </member>
        <member name="T:Bridge.ModuleDependencyAttribute">
             <summary>
            
             </summary>
        </member>
        <member name="T:Bridge.ModuleAttribute">
             <summary>
            
             </summary>
        </member>
        <member name="F:Bridge.ObjectInitializationMode.DefaultValue">
            <summary>
            Emit default values for all
            </summary>
        </member>
        <member name="F:Bridge.ObjectInitializationMode.Initializer">
            <summary>
            Emit only values that have been explicitly initialized
            </summary>
        </member>
        <member name="F:Bridge.ObjectInitializationMode.Ignore">
            <summary>
            Ignore default value. Emits an empty object literal
            </summary>
        </member>
        <member name="F:Bridge.ObjectCreateMode.Constructor">
            <summary>
            Create instance using constructor
            </summary>
        </member>
        <member name="F:Bridge.ObjectCreateMode.Plain">
            <summary>
            Create instance using plain object ({ } syntax)
            </summary>
        </member>
        <member name="T:Bridge.InlineConstAttribute">
             <summary>
            
             </summary>
        </member>
        <member name="T:Bridge.NamespaceAttribute">
            <summary>
            Specifies a custom namespace for the built entity.
            Use 'false' (without quotes) to suppress namespace binding (usually with [External] attribute).
            </summary>
        </member>
        <member name="T:Bridge.NameAttribute">
            <summary>
            Specifies full path name of the entity (namespace+entity), when emitting JavaScript-equivalent
            code. This overrides the inferred namespace.class.method name, for example.
            </summary>
            <remarks>
            Use "Object" (with quotes) to hide its type in JavaScript-level (useful when you create
            a hidden class to fill several public classes' methods).
            </remarks>
        </member>
        <member name="T:Bridge.ExternalAttribute">
            <summary>
            Makes it so the code with this attribute is not built into the assembly files.
            Useful for stubbed out code to match JavaScript.
            </summary>
        </member>
        <member name="T:Bridge.ExternalInterfaceAttribute">
            <summary>
            Applies to interface if it's implementation is done outside Bridge type system (class implementation doesn't provide aliases for interface members implementations)
            </summary>
        </member>
        <member name="T:Bridge.NonScriptableAttribute">
            <summary>
            This attribute can be placed on types in system script assemblies that should not
            be imported. It is only meant to be used within Bridge.dll.
            </summary>
        </member>
        <member name="T:Bridge.FileNameAttribute">
            <summary>
            The file name where JavaScript is generated to.
            </summary>
        </member>
        <member name="T:Bridge.OutputAttribute">
            <summary>
            The output folder path for generated JavaScript. A non-absolute path is concatenated with a project's root.
            Examples: "Bridge/output/", "../Bridge/output/", "c:\\output\\"
            </summary>
        </member>
        <member name="T:Bridge.OutputByAttribute">
            <summary>
            The option to manage JavaScript output folders and files.
            See TypesSplit enum for more details.
            </summary>
        </member>
        <member name="T:Bridge.OutputBy">
            <summary>
            The options to manage JavaScript output folders and files.
            </summary>
        </member>
        <member name="F:Bridge.OutputBy.Class">
            <summary>
            The class name will be the file name. If there are classes with same names in different namespaces, the generated JavaScript will be combined into one file. For example, if the class name is "Helpers", the file name will be "Helpers.js".
            </summary>
        </member>
        <member name="F:Bridge.OutputBy.ClassPath">
            <summary>
            A folder hierarchy is created using the class name, and a folder is created for each unique word (split by '.') in the class namespace. For example, if the class "Helpers" is within the "Demo" namespace, the file path and name will be "Demo/Helpers.js".
            </summary>
        </member>
        <member name="F:Bridge.OutputBy.Module">
            <summary>
            The ModuleAttribute value is used as the file name if set on a class. For example, if [Module("MyModuleName")] is set, the file name will be "MyModuleName.js".
            </summary>
        </member>
        <member name="F:Bridge.OutputBy.Namespace">
            <summary>
            The full namespace is used as the file name. For example, if "Demo.Utilities" is the namespace, the file name will be "Demo.Utilities.js".
            </summary>
        </member>
        <member name="F:Bridge.OutputBy.NamespacePath">
            <summary>
            The class namespace is split (by '.') and a folder is created for each individual value, except the last value which becomes the file name. For example, if "Demo.Utilities" is the namespace, the file path and name will be "/Demo/Utilities.js".
            </summary>
        </member>
        <member name="F:Bridge.OutputBy.Project">
            <summary>
            All generated JavaScript for the project is added to one [ProjectName].js file. For example, if the project name is "MyUtilities", the file name will be "MyUtilities.js".
            This can be overridden by setting the fileName option within bridge.json, or by using the [FileName] Attribute on the assembly or class levels.
            </summary>
        </member>
        <member name="T:Bridge.ScriptAttribute">
            <summary>
            ScriptAttribute specifies the method implementation that will be output to javascript
            instead of its actual C# implementation. C# implementation is completely discarded if
            this attribute is used.
            </summary>
        </member>
        <member name="T:Bridge.Utils.Console">
            <summary>
            Outputs log messages into a formatted div element on the page
            </summary>
        </member>
        <member name="M:Bridge.Utils.Console.ShowTooltip">
            <summary>
            Show tooltip
            </summary>
        </member>
        <member name="M:Bridge.Utils.Console.HideTooltip">
            <summary>
             Hide tooltip
            </summary>
        </member>
        <member name="M:Bridge.Utils.Console.Close">
            <summary>
            Close Bridge Console
            </summary>
        </member>
        <member name="M:Bridge.Utils.Console.WrapBodyContent">
            <summary>
            Wraps all existing child elements inside body into a div
            </summary>
        </member>
        <member name="M:Bridge.Utils.Console.UnwrapBodyContent">
            <summary>
            Unwraps content off the bridge body wrapper div back into the body tag as they used to be
            </summary>
        </member>
        <member name="M:Bridge.Utils.Console.BuildConsoleMessage(System.String,Bridge.Utils.Console.MessageType)">
            <summary>
            Constructs each message list item
            </summary>
            <param name="message"></param>
            <param name="messageType"></param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Utils.Console.SetAttributes(Bridge.Utils.Console.Element,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets multiple attributes
            </summary>
        </member>
        <member name="M:Bridge.Utils.Console.Obj2Css(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Converts Object to CSS styles format
            </summary>
        </member>
        <member name="T:Bridge.Utils.AssemblyVersionMarker">
            <summary>
            The class is to get version string representation either of the current assembly or Compiler
            </summary>
        </member>
        <member name="M:Bridge.Utils.AssemblyVersionMarker.GetVersion(Bridge.Utils.AssemblyVersionMarker.VersionType)">
            <summary>
            Compiler will replace the method call with an version required by method parameter
            </summary>
            <param name="type">Specifies either CurrentAssembly or Compiler version, default is CurrentAssembly</param>
            <returns>Current assembly or Compiler version in string representation</returns>
        </member>
        <member name="T:Bridge.ObjectLiteral">
            <summary>
            A simple JavaScript object where a comma separated list of name-value pairs are wrapped in curly braces.
            </summary>
        </member>
        <member name="M:Bridge.ObjectLiteral.#ctor(System.Object)">
            <summary>
            Creates a new JavaScript object literal based on the properties and fields of the source object.
            </summary>
            <param name="obj">The object returned as a simple object literal in JavaScript</param>
        </member>
        <member name="M:Bridge.ObjectLiteral.Create``1">
            <summary>
            Creates an empty JavaScript object literal with the return type of T.
            </summary>
            <typeparam name="T">The Type of object literal to create.</typeparam>
            <returns>An empty object literal of type T.</returns>
        </member>
        <member name="M:Bridge.Script.Delete(System.Object)">
            <summary>
            The delete operator removes a property from an object.
            </summary>
            <param name="obj">The name of an object, or an expression evaluating to an object.</param>
            <returns>true for all cases except when the property is an own non-configurable property, in which case, false is returned in non-strict mode.</returns>
        </member>
        <member name="M:Bridge.Script.Delete(System.Object,System.String)">
            <summary>
            The delete operator removes a property from an object.
            </summary>
            <param name="obj">The name of an object, or an expression evaluating to an object.</param>
            <param name="prop">The property to delete.</param>
            <returns>true for all cases except when the property is an own non-configurable property, in which case, false is returned in non-strict mode.</returns>
        </member>
        <member name="M:Bridge.Script.IsUndefined(System.Object)">
            <summary>
            Checks if the specified object is undefined. The object passed in should be a local variable, and not a member of a class (to avoid potential script warnings).
            </summary>
            <param name="obj">The object to test against undefined.</param>
            <returns>true if the object is undefined; false otherwise.</returns>
        </member>
        <member name="M:Bridge.Script.HasValue(System.Object)">
            <summary>
            Checks if the object has a value.
            </summary>
            <param name="obj">The object to test if there is a value.</param>
            <returns>true if the object has a value; false otherwise.</returns>
        </member>
        <member name="M:Bridge.Script.IsNull(System.Object)">
            <summary>
            Checks if the specified object is null.
            </summary>
            <param name="obj">The object to test against null.</param>
            <returns>true if the object is null; false otherwise.</returns>
        </member>
        <member name="M:Bridge.Script.Boolean(System.Object)">
            <summary>
            Converts an object into a boolean.
            </summary>
            <param name="obj">The object to convert.</param>
            <returns>true if the object is not null, zero, empty string or undefined.</returns>
        </member>
        <member name="M:Bridge.Script.In(System.Object,System.String)">
            <summary>
            Generate <c>member in obj</c>.
            </summary>
            <param name="obj">The object to test against.</param>
            <param name="member">The member to check if in the object.</param>
            <returns>true if member in object; false otherwise.</returns>
        </member>
        <member name="M:Bridge.Script.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invoke a method on an object
            </summary>
            <param name="obj">The object to invoke the method against.</param>
            <param name="name">The method to invoke.</param>
            <param name="args">The arguments passed into the method.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.Write``1(System.String,System.Object[])">
            <summary>
            Inject javascript code
            </summary>
            <typeparam name="T"></typeparam>
            <param name="code"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.Write(System.String,System.Object[])">
            <summary>
            Inject javascript code
            </summary>
            <param name="code"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="F:Bridge.Script.Undefined">
            <summary>
            The global undefined property represents the value undefined.
            </summary>
        </member>
        <member name="F:Bridge.Script.NaN">
            <summary>
            The global NaN property is a value representing Not-A-Number.
            </summary>
        </member>
        <member name="F:Bridge.Script.Infinity">
            <summary>
            The global Infinity property is a numeric value representing infinity.
            </summary>
        </member>
        <member name="M:Bridge.Script.Eval``1(System.String)">
            <summary>
            The eval() method evaluates JavaScript code represented as a string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">A string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.Eval(System.String)">
            <summary>
            The eval() method evaluates JavaScript code represented as a string.
            </summary>
            <param name="expression">A string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.IsFinite(System.Object)">
            <summary>
            The global isFinite() function determines whether the passed value is a finite number. If needed, the parameter is first converted to a number.
            </summary>
            <param name="testValue">The value to be tested for finiteness.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.ParseFloat(System.String)">
            <summary>
            Parses a string argument and returns a floating point number corresponding to double .Net type.
            </summary>
            <param name="value">A string that represents the value you want to parse.</param>
            <returns>Parsed floating point number with type corresponding to double .Net type</returns>
        </member>
        <member name="M:Bridge.Script.ParseInt(System.String)">
            <summary>
            The parseInt() function parses a string argument and returns an integer of the specified radix or base.
            </summary>
            <param name="value">The value to parse. If string is not a string, then it is converted to one. Leading whitespace in the string is ignored.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.ParseInt(System.String,System.Int32)">
            <summary>
            The parseInt() function parses a string argument and returns an integer of the specified radix or base.
            </summary>
            <param name="value">The value to parse. If string is not a string, then it is converted to one. Leading whitespace in the string is ignored.</param>
            <param name="radix">An integer that represents the radix of the above mentioned string. Always specify this parameter to eliminate reader confusion and to guarantee predictable behavior. Different implementations produce different results when a radix is not specified.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.IsNaN(System.Object)">
            <summary>
            The isNaN() function determines whether a value is NaN or not. Be careful, this function is broken. You may be interested in Number.isNaN() as defined in ECMAScript 6 or you can use typeof to determine if the value is Not-A-Number.
            </summary>
            <param name="testValue">The value to be tested.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.DecodeURI(System.String)">
            <summary>
            The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine.
            </summary>
            <param name="encodedURI">A complete, encoded Uniform Resource Identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.DecodeURIComponent(System.String)">
            <summary>
            The decodeURIComponent() method decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.
            </summary>
            <param name="encodedURI">An encoded component of a Uniform Resource Identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.EncodeURI(System.String)">
            <summary>
            The encodeURI() method encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two "surrogate" characters).
            </summary>
            <param name="uri">A complete Uniform Resource Identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.EncodeURIComponent(System.String)">
            <summary>
            The encodeURIComponent() method encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two "surrogate" characters).
            </summary>
            <param name="component">A component of a URI.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.SafeFunc(System.Func{System.Boolean})">
            <summary>
            Runs the function in a try/catch statement
            </summary>
            <param name="fn">Function to run</param>
            <returns>Return either function result or false in case of catch</returns>
        </member>
        <member name="T:Bridge.Arguments">
            <summary>
            Provides access to the arguments of the current function.
            </summary>
        </member>
        <member name="P:Bridge.Arguments.Length">
            <summary>
            Retrieves the number of actual arguments passed to the function.
            </summary>
            <returns>The count of arguments.</returns>
        </member>
        <member name="M:Bridge.Arguments.GetArgument(System.Int32)">
            <summary>
            Retrieves the specified actual argument value passed to the
            function by index.
            </summary>
            <param name="index">The index of the argument to retrieve.</param>
            <returns>The value of the specified argument.</returns>
        </member>
        <member name="T:Bridge.Error">
            <summary>
            The Error constructor creates an error object. Instances of Error objects are thrown when runtime errors occur. The Error object can also be used as a base objects for user-defined exceptions. See below for standard built-in error types.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodCodeType.OPTIL">
            <internalonly/>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsVolatile">
            <summary>
            Should compile, but be ignored as volatile is not relevant in the JavaScript world.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.FriendAccessAllowedAttribute">
            <summary>
                If AllInternalsVisible is not true for a friend assembly, the FriendAccessAllowed attribute
                indicates which internals are shared with that friend assembly.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.DummyTypeUsedToAddAttributeToDefaultValueTypeConstructor">
            <summary>
            If a constructor for a value type takes an instance of this type as a parameter, any attribute applied to that constructor will instead be applied to the default (undeclarable) constructor.
            </summary>
        </member>
        <member name="T:System.Diagnostics.DebuggerVisualizerAttribute">
            <summary>
            Signifies that the attributed type has a visualizer which is pointed
            to by the parameter type name strings.
            </summary>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
            <summary>
            Instructs code analysis tools to assume the expression <paramref name="condition"/> is true even if it can not be statically proven to always be true.
            </summary>
            <param name="condition">Expression to assume will always be true.</param>
            <remarks>
            At runtime this is equivalent to an <seealso cref="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
            <summary>
            Instructs code analysis tools to assume the expression <paramref name="condition"/> is true even if it can not be statically proven to always be true.
            </summary>
            <param name="condition">Expression to assume will always be true.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            At runtime this is equivalent to an <seealso cref="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
            <summary>
            In debug builds, perform a runtime check that <paramref name="condition"/> is true.
            </summary>
            <param name="condition">Expression to check to always be true.</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
            <summary>
            In debug builds, perform a runtime check that <paramref name="condition"/> is true.
            </summary>
            <param name="condition">Expression to check to always be true.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> must be true before the enclosing method or property is invoked.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            Use this form when backward compatibility does not force you to throw a particular exception.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> must be true before the enclosing method or property is invoked.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            Use this form when backward compatibility does not force you to throw a particular exception.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> must be true before the enclosing method or property is invoked.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            Use this form when you want to throw a particular exception.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> must be true before the enclosing method or property is invoked.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            Use this form when you want to throw a particular exception.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
            <summary>
            Specifies a public contract such that the expression <paramref name="condition"/> will be true when the enclosing method or property returns normally.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this postcondition.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
            <summary>
            Specifies a public contract such that the expression <paramref name="condition"/> will be true when the enclosing method or property returns normally.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference members at least as visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this postcondition.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
            <summary>
            Specifies a contract such that if an exception of type <typeparamref name="TException"/> is thrown then the expression <paramref name="condition"/> will be true when the enclosing method or property terminates abnormally.
            </summary>
            <typeparam name="TException">Type of exception related to this postcondition.</typeparam>
            <param name="condition">Boolean expression representing the contract.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference types and members at least as visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this postcondition.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
            <summary>
            Specifies a contract such that if an exception of type <typeparamref name="TException"/> is thrown then the expression <paramref name="condition"/> will be true when the enclosing method or property terminates abnormally.
            </summary>
            <typeparam name="TException">Type of exception related to this postcondition.</typeparam>
            <param name="condition">Boolean expression representing the contract.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            This call must happen at the beginning of a method or property before any other code.
            This contract is exposed to clients so must only reference types and members at least as visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this postcondition.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
            <summary>
            Represents the result (a.k.a. return value) of a method or property.
            </summary>
            <typeparam name="T">Type of return value of the enclosing method or property.</typeparam>
            <returns>Return value of the enclosing method or property.</returns>
            <remarks>
            This method can only be used within the argument to the <seealso cref="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)"/> contract.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
            <summary>
            Represents the final (output) value of an out parameter when returning from a method.
            </summary>
            <typeparam name="T">Type of the out parameter.</typeparam>
            <param name="value">The out parameter.</param>
            <returns>The output value of the out parameter.</returns>
            <remarks>
            This method can only be used within the argument to the <seealso cref="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)"/> contract.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
            <summary>
            Represents the value of <paramref name="value"/> as it was at the start of the method or property.
            </summary>
            <typeparam name="T">Type of <paramref name="value"/>.  This can be inferred.</typeparam>
            <param name="value">Value to represent.  This must be a field or parameter.</param>
            <returns>Value of <paramref name="value"/> at the start of the method or property.</returns>
            <remarks>
            This method can only be used within the argument to the <seealso cref="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)"/> contract.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> will be true after every method or property on the enclosing class.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <remarks>
            This contact can only be specified in a dedicated invariant method declared on a class.
            This contract is not exposed to clients so may reference members less visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this invariant.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
            <summary>
            Specifies a contract such that the expression <paramref name="condition"/> will be true after every method or property on the enclosing class.
            </summary>
            <param name="condition">Boolean expression representing the contract.</param>
            <param name="userMessage">If it is not a constant string literal, then the contract may not be understood by tools.</param>
            <remarks>
            This contact can only be specified in a dedicated invariant method declared on a class.
            This contract is not exposed to clients so may reference members less visible as the enclosing method.
            The contract rewriter must be used for runtime enforcement of this invariant.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
            <summary>
            Returns whether the <paramref name="predicate"/> returns <c>true</c>
            for all integers starting from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.
            </summary>
            <param name="fromInclusive">First integer to pass to <paramref name="predicate"/>.</param>
            <param name="toExclusive">One greater than the last integer to pass to <paramref name="predicate"/>.</param>
            <param name="predicate">Function that is evaluated from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.</param>
            <returns><c>true</c> if <paramref name="predicate"/> returns <c>true</c> for all integers
            starting from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.</returns>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returns whether the <paramref name="predicate"/> returns <c>true</c>
            for all elements in the <paramref name="collection"/>.
            </summary>
            <param name="collection">The collection from which elements will be drawn from to pass to <paramref name="predicate"/>.</param>
            <param name="predicate">Function that is evaluated on elements from <paramref name="collection"/>.</param>
            <returns><c>true</c> if and only if <paramref name="predicate"/> returns <c>true</c> for all elements in
            <paramref name="collection"/>.</returns>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
            <summary>
            Returns whether the <paramref name="predicate"/> returns <c>true</c>
            for any integer starting from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.
            </summary>
            <param name="fromInclusive">First integer to pass to <paramref name="predicate"/>.</param>
            <param name="toExclusive">One greater than the last integer to pass to <paramref name="predicate"/>.</param>
            <param name="predicate">Function that is evaluated from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.</param>
            <returns><c>true</c> if <paramref name="predicate"/> returns <c>true</c> for any integer
            starting from <paramref name="fromInclusive"/> to <paramref name="toExclusive"/> - 1.</returns>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returns whether the <paramref name="predicate"/> returns <c>true</c>
            for any element in the <paramref name="collection"/>.
            </summary>
            <param name="collection">The collection from which elements will be drawn from to pass to <paramref name="predicate"/>.</param>
            <param name="predicate">Function that is evaluated on elements from <paramref name="collection"/>.</param>
            <returns><c>true</c> if and only if <paramref name="predicate"/> returns <c>true</c> for an element in
            <paramref name="collection"/>.</returns>
        </member>
        <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
            <summary>
            Marker to indicate the end of the contract section of a method.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute">
            <summary>
            Enables writing abbreviations for contracts that get copied to other methods
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
            <summary>
            Enables factoring legacy if-then-throw into separate methods for reuse and full control over
            thrown exception and arguments
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
            <summary>
            Types marked with this attribute specify that a separate type contains the contracts for this type.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
            <summary>
            Types marked with this attribute specify that they are a contract for the type that is the argument of the constructor.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
            <summary>
            This attribute is used to mark a method as being the invariant
            method for a class. The method can have any name, but it must
            return "void" and take no parameters. The body of the method
            must consist solely of one or more calls to the method
            Contract.Invariant. A suggested name for the method is
            "ObjectInvariant".
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractOptionAttribute">
            <summary>
            Allows setting contract and tool options at assembly, type, or method granularity.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
            <summary>
            Allows a field f to be used in the method contracts for a method m when f has less visibility than m.
            For instance, if the method is public, but the field is private.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
            <summary>
            Attribute that specifies that an assembly is a reference assembly with contracts.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
            <summary>
            Methods (and properties) marked with this attribute can be used within calls to Contract methods, but have no runtime behavior associated with them.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
            <summary>
            Instructs downstream tools whether to assume the correctness of this assembly, type or member without performing any verification or not.
            Can use [ContractVerification(false)] to explicitly mark assembly, type or member as one to *not* have verification performed on it.
            Most specific element found (member, type, then assembly) takes precedence.
            (That is useful if downstream tools allow a user to decide which polarity is the default, unmarked case.)
            </summary>
            <remarks>
            Apply this attribute to a type to apply to all members of the type, including nested types.
            Apply this attribute to an assembly to apply to all types and members of the assembly.
            Apply this attribute to a property to apply to both the getter and setter.
            </remarks>
        </member>
        <member name="T:System.Diagnostics.Contracts.PureAttribute">
            <summary>
            Methods and classes marked with this attribute can be used within calls to Contract methods. Such methods not make any visible state changes.
            </summary>
        </member>
        <member name="T:System.BitConverter">
            <summary>
            Converts base data types to an array of bytes, and an array of bytes to base data types.
            </summary>
        </member>
        <member name="F:System.BitConverter.IsLittleEndian">
            <summary>
            This field indicates the "endianess" of the architecture.
            The value is set to true if the architecture is
            little endian; false if it is big endian.
            </summary>
        </member>
        <member name="M:System.BitConverter.GetBytes(System.Boolean)">
            <summary>
            Returns the specified Boolean value as a byte array.
            </summary>
            <param name="value">A Boolean value.</param>
            <returns>A byte array with length 1.</returns>
        </member>
        <member name="M:System.BitConverter.GetBytes(System.Char)">
            <summary>
            Returns the specified character value as an array of bytes.
            </summary>
            <param name="value">A character to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:System.BitConverter.GetBytes(System.Int16)">
            <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:System.BitConverter.GetBytes(System.Int32)">
            <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:System.BitConverter.GetBytes(System.Int64)">
            <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:System.BitConverter.GetBytes(System.UInt16)">
            <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:System.BitConverter.GetBytes(System.UInt32)">
            <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:System.BitConverter.GetBytes(System.UInt64)">
            <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:System.BitConverter.GetBytes(System.Single)">
            <summary>
            Returns the specified single-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:System.BitConverter.GetBytes(System.Double)">
            <summary>
            Returns the specified double-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
            <summary>
            Returns a character converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A character formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">The array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit unsigned integer formed by the eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A single-precision floating point number formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A double precision floating point number formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <param name="length">The number of array elements in value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:System.BitConverter.ToString(System.Byte[])">
            <summary>
            Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.
            </summary>
            <param name="value">An array of bytes.</param>
            <returns>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in value; for example, "7F-2C-4A-00".</returns>
        </member>
        <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
            <summary>
            Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of value; for example, "7F-2C-4A-00".</returns>
        </member>
        <member name="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            Returns a Boolean value converted from the byte at a specified position in a byte array.
            </summary>
            <param name="value">A byte array.</param>
            <param name="startIndex">The index of the byte within value.</param>
            <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
        </member>
        <member name="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
            <summary>
            Converts the specified double-precision floating point number to a 64-bit signed integer.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>A 64-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
            <summary>
            Converts the specified 64-bit signed integer to a double-precision floating point number.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>A double-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire List to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:System.Collections.BitArray.Count">
            <summary>
            Gets the number of elements contained in the ICollection.
            </summary>
        </member>
        <member name="M:System.Collections.BitArray.GetArrayLength(System.Int32,System.Int32)">
             <summary>
             Used for conversion between different representations of bit array.
             Returns (n+(div-1))/div, rearranged to avoid arithmetic overflow.
             For example, in the bit to int case, the straightforward calc would
             be (n+31)/32, but that would cause overflow. So instead it's
             rearranged to ((n-1)/32) + 1, with special casing for 0.
            
             Usage:
             GetArrayLength(77, BitsPerInt32): returns how many ints must be
             allocated to store 77 bits.
             </summary>
             <param name="n"></param>
             <param name="div">use a conversion constant, e.g. BytesPerInt32 to get
             how many ints are required to store n bytes</param>
             <returns></returns>
        </member>
        <member name="T:System.Collections.Generic.EnumerableHelpers">
            <summary>Internal helper functions for working with enumerables.</summary>
        </member>
        <member name="M:System.Collections.Generic.EnumerableHelpers.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Converts an enumerable to an array using the same logic as does List{T}.</summary>
            <param name="source">The enumerable to convert.</param>
            <returns>The resulting array.</returns>
        </member>
        <member name="M:System.Collections.Generic.EnumerableHelpers.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
            <summary>Converts an enumerable to an array using the same logic as does List{T}.</summary>
            <param name="source">The enumerable to convert.</param>
            <param name="length">The number of items stored in the resulting array, 0-indexed.</param>
            <returns>
            The resulting array.  The length of the array may be greater than <paramref name="length"/>,
            which is the actual number of elements in the array.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.Queue`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the <see cref="T:System.Collections.Generic.Queue`1"/> elements to an existing one-dimensional Array, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from <see cref="T:System.Collections.Generic.Queue`1"/>. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="T:System.Collections.Generic.ISet`1">
            <summary>
            Generic collection that guarantees the uniqueness of its elements, as defined
            by some comparer. It also supports basic set operations such as Union, Intersection,
            Complement and Exclusive Complement.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ICollection`1.Count">
            <summary>
            Gets the number of elements contained in the ICollection.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ICollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the ICollection is read-only.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ICollection`1.Add(`0)">
            <summary>
            Adds an item to the ICollection.
            </summary>
            <param name="item">The object to add to the ICollection</param>
        </member>
        <member name="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:System.Collections.Generic.ICollection`1.Clear">
            <summary>
            Removes all items from the ICollection.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ICollection`1.Contains(`0)">
            <summary>
            Determines whether the ICollection contains a specific value.
            </summary>
            <param name="item">The object to locate in the ICollection.</param>
            <returns>true if item is found in the ICollection; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Generic.ICollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the ICollection.
            </summary>
            <param name="item">The object to remove from the ICollection.</param>
            <returns>true if item was successfully removed from the ICollection; otherwise, false. This method also returns false if item is not found in the original ICollection.</returns>
        </member>
        <member name="T:System.Collections.Generic.List`1">
            <summary>
            Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.List`1.#ctor">
            <summary>
            Initializes a new instance of the List&lt;T&gt; class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the List&lt;T&gt; class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the List&lt;T&gt; class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="P:System.Collections.Generic.List`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.List`1.Count">
            <summary>
            Gets the number of elements contained in the List&lt;T&gt;.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the ICollection&lt;T&gt; is read-only.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.List`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.Add(`0)">
            <summary>
            Adds an object to the end of the List&lt;T&gt;.
            </summary>
            <param name="item">The object to be added to the end of the List&lt;T&gt;. The value can be null for reference types.</param>
        </member>
        <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the IList.
            </summary>
            <param name="item">The Object to add to the IList.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the List&lt;T&gt;.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the List&lt;T&gt;. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:System.Collections.Generic.List`1.AsReadOnly">
            <summary>
            Returns a read-only ReadOnlyCollection&lt;T&gt; wrapper for the current collection.
            </summary>
            <returns>An object that acts as a read-only wrapper around the current List&lt;T&gt;.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches a range of elements in the sorted List&lt;T&gt; for an element using the specified comparer and returns the zero-based index of the element.
            </summary>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The IComparer&lt;T&gt; implementation to use when comparing elements, or null to use the default comparer Comparer&lt;T&gt;.Default.</param>
            <returns>The zero-based index of item in the sorted List&lt;T&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of Count.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.BinarySearch(`0)">
            <summary>
            Searches the entire sorted List&lt;T&gt; for an element using the default comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <returns>The zero-based index of item in the sorted List&lt;T&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of Count.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted List&lt;T&gt; for an element using the specified comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The IComparer&lt;T&gt; implementation to use when comparing elements. -or- null to use the default comparer Comparer&lt;T&gt;.Default.</param>
            <returns>The zero-based index of item in the sorted List&lt;T&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of Count.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.Clear">
            <summary>
            Removes all elements from the List&lt;T&gt;.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.List`1.Contains(`0)">
            <summary>
            Determines whether an element is in the List&lt;T&gt;. It does a linear, O(n) search.
            Equality is determined by calling item.Equals().
            </summary>
            <param name="item">The object to locate in the List&lt;T&gt;. The value can be null for reference types.</param>
            <returns>true if item is found in the List&lt;T&gt;; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the IList contains a specific value.
            </summary>
            <param name="item">The Object to locate in the IList.</param>
            <returns>true if item is found in the IList; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Converts the elements in the current List&lt;T&gt; to another type, and returns a list containing the converted elements.
            </summary>
            <typeparam name="TOutput">The type of the elements of the target array.</typeparam>
            <param name="converter">A Converter&lt;TInput,?TOutput&gt; delegate that converts each element from one type to another type.</param>
            <returns>A List&lt;T&gt; of the target type containing the converted elements from the current List&lt;T&gt;.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.CopyTo(`0[])">
            <summary>
            Copies the entire List&lt;T&gt; to a compatible one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List&lt;T&gt;. The Array must have zero-based indexing.</param>
        </member>
        <member name="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the List&lt;T&gt; to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="index">The zero-based index in the source List&lt;T&gt; at which copying begins.</param>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List&lt;T&gt;. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire List&lt;T&gt; to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List&lt;T&gt;. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the List&lt;T&gt; contains elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate&lt;T&gt; delegate that defines the conditions of the elements to search for.</param>
            <returns>true if the List&lt;T&gt; contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire List&lt;T&gt;.
            </summary>
            <param name="match">The Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate&lt;T&gt; delegate that defines the conditions of the elements to search for.</param>
            <returns>A List&lt;T&gt; containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty List&lt;T&gt;.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire List&lt;T&gt;.
            </summary>
            <param name="match">The Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the List&lt;T&gt; that extends from the specified index to the last element.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the List&lt;T&gt; that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire List&lt;T&gt;.
            </summary>
            <param name="match">The Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire List&lt;T&gt;.
            </summary>
            <param name="match">The Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the List&lt;T&gt; that extends from the first element to the specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="match">The Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the List&lt;T&gt; that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The Predicate&lt;T&gt; delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the List&lt;T&gt;.
            </summary>
            <param name="action">The Action&lt;T&gt; delegate to perform on each element of the List&lt;T&gt;.</param>
        </member>
        <member name="M:System.Collections.Generic.List`1.GetEnumerator">
            <summary>
            Returns an enumerator for this list with the given
            permission for removal of elements. If modifications made to the list
            while an enumeration is in progress, the MoveNext and
            GetObject methods of the enumerator will throw an exception.
            </summary>
            <returns>A List&lt;T&gt;.Enumerator for the List&lt;T&gt;.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator&lt;T&gt; that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source List&lt;T&gt;.
            </summary>
            <param name="index">The zero-based List&lt;T&gt; index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the source List&lt;T&gt;.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire List&lt;T&gt;.
            </summary>
            <param name="item">The object to locate in the List&lt;T&gt;. The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire List&lt;T&gt;, if found; otherwise, –1.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the IList.
            </summary>
            <param name="item">The object to locate in the IList.</param>
            <returns>The index of item if found in the list; otherwise, –1.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the List&lt;T&gt; that extends from the specified index to the last element.
            </summary>
            <param name="item">The object to locate in the List&lt;T&gt;. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <returns>The zero-based index of the first occurrence of item within the range of elements in the List&lt;T&gt; that extends from index to the last element, if found; otherwise, –1.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the List&lt;T&gt; that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="item">The object to locate in the List&lt;T&gt;. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the first occurrence of item within the range of elements in the List&lt;T&gt; that starts at index and contains count number of elements, if found; otherwise, –1.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the List&lt;T&gt; at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the IList at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the IList.</param>
        </member>
        <member name="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the List&lt;T&gt; at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the List&lt;T&gt;. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the entire List&lt;T&gt;.
            </summary>
            <param name="item">The object to locate in the List&lt;T&gt;. The value can be null for reference types.</param>
            <returns>The zero-based index of the last occurrence of item within the entire the List&lt;T&gt;, if found; otherwise, –1.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the List&lt;T&gt; that extends from the first element to the specified index.
            </summary>
            <param name="item">The object to locate in the List&lt;T&gt;. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <returns>The zero-based index of the last occurrence of item within the range of elements in the List&lt;T&gt; that extends from the first element to index, if found; otherwise, –1.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the List&lt;T&gt; that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="item">Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the List&lt;T&gt; that contains the specified number of elements and ends at the specified index.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search</param>
            <returns>The zero-based index of the last occurrence of item within the range of elements in the List&lt;T&gt; that contains count number of elements and ends at index, if found; otherwise, –1.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the List&lt;T&gt;.
            </summary>
            <param name="item">The object to remove from the List&lt;T&gt;. The value can be null for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the List&lt;T&gt;.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the IList.
            </summary>
            <param name="item">The object to remove from the IList.</param>
        </member>
        <member name="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate&lt;T&gt; delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the List&lt;T&gt;.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the List&lt;T&gt;.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the List&lt;T&gt;.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:System.Collections.Generic.List`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire List&lt;T&gt;.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
        </member>
        <member name="M:System.Collections.Generic.List`1.Sort">
            <summary>
            Sorts the elements in the entire List&lt;T&gt; using the default comparer.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire List&lt;T&gt; using the specified comparer.
            </summary>
            <param name="comparer">The IComparer&lt;T&gt; implementation to use when comparing elements, or null to use the default comparer Comparer&lt;T&gt;.Default.</param>
        </member>
        <member name="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in List&lt;T&gt; using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The IComparer&lt;T&gt; implementation to use when comparing elements, or null to use the default comparer Comparer&lt;T&gt;.Default.</param>
        </member>
        <member name="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire List&lt;T&gt; using the specified System.Comparison&lt;T&gt;.
            </summary>
            <param name="comparison">The System.Comparison&lt;T&gt; to use when comparing elements.</param>
        </member>
        <member name="M:System.Collections.Generic.List`1.ToArray">
            <summary>
            Copies the elements of the List&lt;T&gt; to a new array.
            </summary>
            <returns>An array containing copies of the elements of the List&lt;T&gt;.</returns>
        </member>
        <member name="M:System.Collections.Generic.List`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the List&lt;T&gt;, if that number is less than a threshold value.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines whether every element in the List&lt;T&gt; matches the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate&lt;T&gt; delegate that defines the conditions to check against the elements.</param>
            <returns>true if every element in the List&lt;T&gt; matches the conditions defined by the specified predicate; otherwise, false. If the list has no elements, the return value is true.</returns>
        </member>
        <member name="T:System.Collections.Generic.List`1.Enumerator">
            <summary>
            Enumerates the elements of a List&lt;T&gt;.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.List`1.Enumerator.Dispose">
            <summary>
            Releases all resources used by the List&lt;T&gt;.Enumerator.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.List`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the List&lt;T&gt;.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="P:System.Collections.Generic.List`1.Enumerator.Current">
            <summary>
            Gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:System.Collections.IList.IsReadOnly">
            <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
        </member>
        <member name="P:System.Collections.ICollection.Count">
            <summary>
            Gets the number of elements contained in the ICollection.
            </summary>
        </member>
        <member name="T:System.ComponentModel.BrowsableAttribute">
            <summary>
            Specifies whether a property or event should be displayed in a Properties window.
            </summary>
        </member>
        <member name="F:System.ComponentModel.BrowsableAttribute.Yes">
            <summary>
            Specifies that a property or event can be modified at design time. This static field is read-only.
            </summary>
        </member>
        <member name="F:System.ComponentModel.BrowsableAttribute.No">
            <summary>
            Specifies that a property or event cannot be modified at design time. This static field is read-only.
            </summary>
        </member>
        <member name="F:System.ComponentModel.BrowsableAttribute.Default">
            <summary>
            Specifies the default value for the BrowsableAttribute, which is Yes. This static field is read-only.
            </summary>
        </member>
        <member name="M:System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BrowsableAttribute class.
            </summary>
            <param name="browsable">true if a property or event can be modified at design time; otherwise, false. The default is true.</param>
        </member>
        <member name="P:System.ComponentModel.BrowsableAttribute.Browsable">
            <summary>
            Gets a value indicating whether an object is browsable.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.AssociationAttribute">
            <summary>
            Used to mark an Entity member as an association
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.AssociationAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Full form of constructor
            </summary>
            <param name="name">The name of the association. For bi-directional associations,
            the name must be the same on both sides of the association</param>
            <param name="thisKey">Comma separated list of the property names of the key values
            on this side of the association</param>
            <param name="otherKey">Comma separated list of the property names of the key values
            on the other side of the association</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.Name">
            <summary>
            Gets the name of the association. For bi-directional associations, the name must
            be the same on both sides of the association
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKey">
            <summary>
            Gets a comma separated list of the property names of the key values
            on this side of the association
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKey">
            <summary>
            Gets a comma separated list of the property names of the key values
            on the other side of the association
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.IsForeignKey">
            <summary>
            Gets or sets a value indicating whether this association member represents
            the foreign key side of an association
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.ThisKeyMembers">
            <summary>
            Gets the collection of individual key members specified in the ThisKey string.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.AssociationAttribute.OtherKeyMembers">
            <summary>
            Gets the collection of individual key members specified in the OtherKey string.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute">
            <summary>
            This attribute is used to mark the members of a Type that participate in optimistic concurrency checks.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.CustomValidationAttribute">
            <summary>
            Validation attribute that executes a user-supplied method at runtime, using one of these signatures:
            <para>
                public static <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> Method(object value) { ... }
            </para>
            <para>
                public static <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> Method(object value, <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> context) {
                ... }
            </para>
            <para>
                The value can be strongly typed as type conversion will be attempted.
            </para>
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.CustomValidationAttribute.#ctor(System.Type,System.String)">
            <summary>
            Instantiates a custom validation attribute that will invoke a method in the
            specified type.
            </summary>
            <param name="validatorType">
            The type that will contain the method to invoke. It cannot be null. See <see cref="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.Method" />.
            </param>
            <param name="method">The name of the method to invoke in <paramref name="validatorType" />.</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.ValidatorType">
            <summary>
            Gets the type that contains the validation method identified by <see cref="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.Method" />.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.Method">
            <summary>
            Gets the name of the method in <see cref="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.ValidatorType" /> to invoke to perform validation.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.CustomValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Override of validation method.  See <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">
            A <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> instance that provides
            context about the validation operation, such as the object and member being validated.
            </param>
            <returns>Whatever the <see cref="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.Method" /> in <see cref="P:System.ComponentModel.DataAnnotations.CustomValidationAttribute.ValidatorType" /> returns.</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is malformed.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.CustomValidationAttribute.FormatErrorMessage(System.String)">
            <summary>
            Override of <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)" />
            </summary>
            <param name="name">The name to include in the formatted string</param>
            <returns>A localized string to describe the problem.</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is malformed.</exception>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.DataType">
            <summary>
            Enumeration of logical data types that may appear in <see cref="T:System.ComponentModel.DataAnnotations.DataTypeAttribute" />
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.DataType.Custom">
            <summary>
            Custom data type, not one of the static data types we know
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.DataType.DateTime">
            <summary>
            DateTime data type
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.DataType.Date">
            <summary>
            Date data type
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.DataType.Time">
            <summary>
            Time data type
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.DataType.Duration">
            <summary>
            Duration data type
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.DataType.PhoneNumber">
            <summary>
            Phone number data type
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.DataType.Currency">
            <summary>
            Currency data type
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.DataType.Text">
            <summary>
            Plain text data type
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.DataType.Html">
            <summary>
            Html data type
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.DataType.MultilineText">
            <summary>
            Multiline text data type
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.DataType.EmailAddress">
            <summary>
            Email address data type
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.DataType.Password">
            <summary>
            Password data type -- do not echo in UI
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.DataType.Url">
            <summary>
            URL data type
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.DataType.ImageUrl">
            <summary>
            URL to an Image -- to be displayed as an image instead of text
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.DataType.CreditCard">
            <summary>
            Credit card data type
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.DataType.PostalCode">
            <summary>
            Postal code data type
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.DataType.Upload">
            <summary>
            File upload data type
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.DataTypeAttribute">
            <summary>
            Allows for clarification of the <see cref="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType" /> represented by a given
            property (such as <see cref="F:System.ComponentModel.DataAnnotations.DataType.PhoneNumber" />
            or <see cref="F:System.ComponentModel.DataAnnotations.DataType.Url" />)
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.ComponentModel.DataAnnotations.DataType)">
            <summary>
            Constructor that accepts a data type enumeration
            </summary>
            <param name="dataType">The <see cref="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType" /> enum value indicating the type to apply.</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts the string name of a custom data type
            </summary>
            <param name="customDataType">The string name of the custom data type.</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType">
            <summary>
            Gets the DataType. If it equals DataType.Custom, <see cref="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.CustomDataType" /> should also be retrieved.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.CustomDataType">
            <summary>
            Gets the string representing a custom data type. Returns a non-null value only if <see cref="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType" /> is
            DataType.Custom.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DisplayFormat">
            <summary>
            Gets the default display format that gets used along with this DataType.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.GetDataTypeName">
            <summary>
            Return the name of the data type, either using the <see cref="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType" /> enum or <see cref="P:System.ComponentModel.DataAnnotations.DataTypeAttribute.CustomDataType" />
            string
            </summary>
            <returns>The name of the data type enum</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DataTypeAttribute.IsValid(System.Object)">
            <summary>
            Override of <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)" />
            </summary>
            <remarks>This override always returns <c>true</c>.  Subclasses should override this to provide the correct result.</remarks>
            <param name="value">The value to validate</param>
            <returns>Unconditionally returns <c>true</c></returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.DisplayAttribute">
            <summary>
            DisplayAttribute is a general-purpose attribute to specify user-visible globalizable strings for types and members.
            The string properties of this class can be used either as literals or as resource identifiers into a specified
            <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName">
            <summary>
            Gets or sets the ShortName attribute property, which may be a resource key string.
            <para>
                Consumers must use the <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetShortName" /> method to retrieve the UI display string.
            </para>
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name">
            <summary>
            Gets or sets the Name attribute property, which may be a resource key string.
            <para>
                Consumers must use the <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetName" /> method to retrieve the UI display string.
            </para>
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description">
            <summary>
            Gets or sets the Description attribute property, which may be a resource key string.
            <para>
                Consumers must use the <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetDescription" /> method to retrieve the UI display string.
            </para>
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt">
            <summary>
            Gets or sets the Prompt attribute property, which may be a resource key string.
            <para>
                Consumers must use the <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetPrompt" /> method to retrieve the UI display string.
            </para>
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName">
            <summary>
            Gets or sets the GroupName attribute property, which may be a resource key string.
            <para>
                Consumers must use the <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetGroupName" /> method to retrieve the UI display string.
            </para>
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType">
            <summary>
            Gets or sets the <see cref="T:System.Type" /> that contains the resources for <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" />,
            <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />, <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" />, <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" />, and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" />.
            Using <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> along with these Key properties, allows the <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetShortName" />,
            <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetName" />, <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetDescription" />, <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetPrompt" />, and <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetGroupName" />
            methods to return localized values.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField">
            <summary>
            Gets or sets whether UI should be generated automatically to display this field. If this property is not
            set then the presentation layer will automatically determine whether UI should be generated. Setting this
            property allows an override of the default behavior of the presentation layer.
            <para>
                Consumers must use the <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetAutoGenerateField" /> method to retrieve the value, as this property
                getter will throw
                an exception if the value has not been set.
            </para>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the getter of this property is invoked when the value has not been explicitly set using the setter.
            </exception>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateFilter">
            <summary>
            Gets or sets whether UI should be generated automatically to display filtering for this field. If this property is
            not
            set then the presentation layer will automatically determine whether filtering UI should be generated. Setting this
            property allows an override of the default behavior of the presentation layer.
            <para>
                Consumers must use the <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetAutoGenerateFilter" /> method to retrieve the value, as this property
                getter will throw
                an exception if the value has not been set.
            </para>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the getter of this property is invoked when the value has not been explicitly set using the setter.
            </exception>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order">
            <summary>
            Gets or sets the order in which this field should be displayed.  If this property is not set then
            the presentation layer will automatically determine the order.  Setting this property explicitly
            allows an override of the default behavior of the presentation layer.
            <para>
                Consumers must use the <see cref="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetOrder" /> method to retrieve the value, as this property getter will throw
                an exception if the value has not been set.
            </para>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the getter of this property is invoked when the value has not been explicitly set using the setter.
            </exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetShortName">
            <summary>
            Gets the UI display string for ShortName.
            <para>
                This can be either a literal, non-localized string provided to <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> or the
                localized string found when <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> has been specified and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" />
                represents a resource key within that resource type.
            </para>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> property,
            but a public static property with a name matching the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ShortName" /> value couldn't be found
            on the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />.
            </exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetName">
            <summary>
            Gets the UI display string for Name.
            <para>
                This can be either a literal, non-localized string provided to <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> or the
                localized string found when <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> has been specified and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" />
                represents a resource key within that resource type.
            </para>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> property,
            but a public static property with a name matching the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name" /> value couldn't be found
            on the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />.
            </exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetDescription">
            <summary>
            Gets the UI display string for Description.
            <para>
                This can be either a literal, non-localized string provided to <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> or the
                localized string found when <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> has been specified and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" />
                represents a resource key within that resource type.
            </para>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> property,
            but a public static property with a name matching the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description" /> value couldn't be found
            on the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />.
            </exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetPrompt">
            <summary>
            Gets the UI display string for Prompt.
            <para>
                This can be either a literal, non-localized string provided to <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> or the
                localized string found when <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> has been specified and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" />
                represents a resource key within that resource type.
            </para>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> property,
            but a public static property with a name matching the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt" /> value couldn't be found
            on the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />.
            </exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetGroupName">
            <summary>
            Gets the UI display string for GroupName.
            <para>
                This can be either a literal, non-localized string provided to <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" /> or the
                localized string found when <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> has been specified and <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" />
                represents a resource key within that resource type.
            </para>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" /> property and the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" /> property,
            but a public static property with a name matching the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.GroupName" /> value couldn't be found
            on the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.ResourceType" />.
            </exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetAutoGenerateField">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateField" /> if it has been set, or <c>null</c>.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetAutoGenerateFilter">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.AutoGenerateFilter" /> if it has been set, or <c>null</c>.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DisplayAttribute.GetOrder">
            <summary>
            Gets the value of <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Order" /> if it has been set, or <c>null</c>.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.DisplayColumnAttribute">
            <summary>
            Sets the display column, the sort column, and the sort order for when a table is used as a parent table in FK
            relationships.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute">
            <summary>
            Allows overriding various display-related options for a given field. The options have the same meaning as in
            BoundField.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString">
            <summary>
            Gets or sets the format string
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.NullDisplayText">
            <summary>
            Gets or sets the string to display when the value is null
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.ConvertEmptyStringToNull">
            <summary>
            Gets or sets a value indicating whether empty strings should be set to null
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.ApplyFormatInEditMode">
            <summary>
            Gets or sets a value indicating whether the format string should be used in edit mode
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.HtmlEncode">
            <summary>
            Gets or sets a value indicating whether the field should be html encoded
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.EditableAttribute">
            <summary>
            Indicates whether the consumer of a field or property, such as a client application,
            should allow editing of the value.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.EditableAttribute.#ctor(System.Boolean)">
            <summary>
            Indicate whether or not a field/property is editable.
            </summary>
            <param name="allowEdit">
            Indicates whether the field/property is editable. The value provided will apply to both
            <see cref="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowEdit" /> and <see cref="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowInitialValue" /> unless the
            <see cref="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowInitialValue" /> property is explicitly specified.
            </param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowEdit">
            <summary>
            Indicates whether or not the field/property allows editing of the
            value.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowInitialValue">
            <summary>
            Indicates whether or not the field/property allows an initial value
            to be specified.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.FilterUIHintAttribute">
            <summary>
            An attribute used to specify the filtering behavior for a column.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.FilterUIHint">
            <summary>
            Gets the name of the control that is most appropriate for this associated
            property or field
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.PresentationLayer">
            <summary>
            Gets the name of the presentation layer that supports the control type
            in <see cref="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.FilterUIHint"/>
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.ControlParameters">
            <summary>
            Gets the name-value pairs used as parameters to the control's constructor
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute
            is ill-formed.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts the name of the control, without specifying
            which presentation layer to use
            </summary>
            <param name="filterUIHint">The name of the UI control.</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor that accepts both the name of the control as well as the
            presentation layer
            </summary>
            <param name="filterUIHint">The name of the control to use</param>
            <param name="presentationLayer">The name of the presentation layer that
            supports this control</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.FilterUIHintAttribute.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Full constructor that accepts the name of the control, presentation layer,
            and optional parameters to use when constructing the control
            </summary>
            <param name="filterUIHint">The name of the control</param>
            <param name="presentationLayer">The presentation layer</param>
            <param name="controlParameters">The list of parameters for the control</param>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.KeyAttribute">
            <summary>
            Used to mark one or more entity properties that provide the entity's unique identity
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute">
            <summary>
            Specifies the maximum length of collection/string data allowed in a property.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" /> class.
            </summary>
            <param name="length">
            The maximum allowable length of collection/string data.
            Value must be greater than zero.
            </param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" /> class.
            The maximum allowable length supported by the database will be used.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.MaxLengthAttribute.Length">
            <summary>
            Gets the maximum allowable length of the collection/string data.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.IsValid(System.Object)">
            <summary>
            Determines whether a specified object is valid. (Overrides <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)" />)
            </summary>
            <param name="value">The object to validate.</param>
            <exception cref="T:System.InvalidOperationException">Length is zero or less than negative one.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MaxLengthAttribute.FormatErrorMessage(System.String)">
            <summary>
            Applies formatting to a specified error message. (Overrides <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)" />)
            </summary>
            <param name="name">The name to include in the formatted string.</param>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.MinLengthAttribute">
            <summary>
            Specifies the minimum length of collection/string data allowed in a property.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MinLengthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.MinLengthAttribute" /> class.
            </summary>
            <param name="length">
            The minimum allowable length of collection/string data.
            Value must be greater than or equal to zero.
            </param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.MinLengthAttribute.Length">
            <summary>
            Gets the minimum allowable length of the collection/string data.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MinLengthAttribute.IsValid(System.Object)">
            <summary>
            Determines whether a specified object is valid. (Overrides <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)" />)
            </summary>
            <param name="value">The object to validate.</param>
            <exception cref="T:System.InvalidOperationException">Length is less than zero.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MinLengthAttribute.FormatErrorMessage(System.String)">
            <summary>
            Applies formatting to a specified error message. (Overrides <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)" />)
            </summary>
            <param name="name">The name to include in the formatted string.</param>
            <returns>A localized string to describe the minimum acceptable length.</returns>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.RangeAttribute">
            <summary>
            Used for specifying a range constraint
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor that takes integer minimum and maximum values
            </summary>
            <param name="minimum">The minimum value, inclusive</param>
            <param name="maximum">The maximum value, inclusive</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Double,System.Double)">
            <summary>
            Constructor that takes double minimum and maximum values
            </summary>
            <param name="minimum">The minimum value, inclusive</param>
            <param name="maximum">The maximum value, inclusive</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Allows for specifying range for arbitrary types. The minimum and maximum strings
            will be converted to the target type.
            </summary>
            <param name="type">The type of the range parameters. Must implement IComparable.</param>
            <param name="minimum">The minimum allowable value.</param>
            <param name="maximum">The maximum allowable value.</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.Minimum">
            <summary>
            Gets the minimum value for the range
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.Maximum">
            <summary>
            Gets the maximum value for the range
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.RangeAttribute.OperandType">
            <summary>
            Gets the type of the <see cref="P:System.ComponentModel.DataAnnotations.RangeAttribute.Minimum" /> and <see cref="P:System.ComponentModel.DataAnnotations.RangeAttribute.Maximum" /> values (e.g. Int32, Double, or some custom
            type)
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.IsValid(System.Object)">
            <summary>
            Returns true if the value falls between min and max, inclusive.
            </summary>
            <param name="value">The value to test for validity.</param>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RangeAttribute.FormatErrorMessage(System.String)">
            <summary>
            Override of <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)" />
            </summary>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute">
            <summary>
            Regular expression validation attribute
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts the regular expression pattern
            </summary>
            <param name="pattern">The regular expression to use.  It cannot be null.</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.MatchTimeoutInMilliseconds">
            <summary>
            Gets or sets the timeout to use when matching the regular expression pattern (in milliseconds)
            (-1 means never timeout).
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.Pattern">
            <summary>
            Gets the regular expression pattern to use
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.IsValid(System.Object)">
            <summary>
            Override of <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)" />
            </summary>
            <param name="value">The value to test for validity.</param>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
            <exception cref="T:System.ArgumentException"> is thrown if the <see cref="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.Pattern" /> is not a valid regular expression.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.FormatErrorMessage(System.String)">
            <summary>
            Override of <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)" />
            </summary>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
            <exception cref="T:System.ArgumentException"> is thrown if the <see cref="P:System.ComponentModel.DataAnnotations.RegularExpressionAttribute.Pattern" /> is not a valid regular expression.</exception>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.RequiredAttribute">
            <summary>
            Validation attribute to indicate that a property field or parameter is required.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            This constructor selects a reasonable default error message for
            <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)" />
            </remarks>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.RequiredAttribute.AllowEmptyStrings">
            <summary>
            Gets or sets a flag indicating whether the attribute should allow empty strings.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.RequiredAttribute.IsValid(System.Object)">
            <summary>
            Override of <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)" />
            </summary>
            <param name="value">The value to test</param>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute">
            <summary>
            Specifies the database column that a property is mapped to.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute" /> class.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute" /> class.
            </summary>
            <param name="name">The name of the column the property is mapped to.</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.Name">
            <summary>
            The name of the column the property is mapped to.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.Order">
            <summary>
            The zero-based order of the column the property is mapped to.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute.TypeName">
            <summary>
            The database provider specific data type of the column the property is mapped to.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute">
            <summary>
            Denotes that the class is a complex type.
            Complex types are non-scalar properties of entity types that enable scalar properties to be organized within
            entities.
            Complex types do not have keys and cannot be managed by the Entity Framework apart from the parent object.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute">
            <summary>
            Specifies how the database generates values for a property.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute.#ctor(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute" /> class.
            </summary>
            <param name="databaseGeneratedOption">The pattern used to generate values for the property in the database.</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute.DatabaseGeneratedOption">
            <summary>
            The pattern used to generate values for the property in the database.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption">
            <summary>
            The pattern used to generate values for a property in the database.
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None">
            <summary>
            The database does not generate values.
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity">
            <summary>
            The database generates a value when a row is inserted.
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed">
            <summary>
            The database generates a value when a row is inserted or updated.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute">
            <summary>
            Denotes a property used as a foreign key in a relationship.
            The annotation may be placed on the foreign key property and specify the associated navigation property name,
            or placed on a navigation property and specify the associated foreign key name.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" /> class.
            </summary>
            <param name="name">
            If placed on a foreign key property, the name of the associated navigation property.
            If placed on a navigation property, the name of the associated foreign key(s).
            If a navigation property has multiple foreign keys, a comma separated list should be supplied.
            </param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute.Name">
            <summary>
            If placed on a foreign key property, the name of the associated navigation property.
            If placed on a navigation property, the name of the associated foreign key(s).
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute">
            <summary>
            Specifies the inverse of a navigation property that represents the other end of the same relationship.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute" /> class.
            </summary>
            <param name="property">The navigation property representing the other end of the same relationship.</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute.Property">
            <summary>
            The navigation property representing the other end of the same relationship.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute">
            <summary>
            Denotes that a property or class should be excluded from database mapping.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute">
            <summary>
            Specifies the database table that a class is mapped to.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Schema.TableAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute" /> class.
            </summary>
            <param name="name">The name of the table the class is mapped to.</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.TableAttribute.Name">
            <summary>
            The name of the table the class is mapped to.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.Schema.TableAttribute.Schema">
            <summary>
            The schema of the table the class is mapped to.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.StringLengthAttribute">
            <summary>
            Validation attribute to assert a string property, field or parameter does not exceed a maximum length
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.#ctor(System.Int32)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
            <param name="maximumLength">The maximum length, inclusive.  It may not be negative.</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MaximumLength">
            <summary>
            Gets the maximum acceptable length of the string
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.StringLengthAttribute.MinimumLength">
            <summary>
            Gets or sets the minimum acceptable length of the string
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.IsValid(System.Object)">
            <summary>
            Override of <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)" />
            </summary>
            <param name="value">The value to test.</param>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.StringLengthAttribute.FormatErrorMessage(System.String)">
            <summary>
            Override of <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)" />
            </summary>
            <param name="name">The name to include in the formatted string</param>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.TimestampAttribute">
            <summary>
            This attribute is used to mark a Timestamp member of a Type.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.UIHintAttribute">
            <summary>
            Attribute to provide a hint to the presentation layer about what control it should use
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts the name of the control, without specifying which presentation layer to use
            </summary>
            <param name="uiHint">The name of the UI control.</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor that accepts both the name of the control as well as the presentation layer
            </summary>
            <param name="uiHint">The name of the control to use</param>
            <param name="presentationLayer">The name of the presentation layer that supports this control</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Full constructor that accepts the name of the control, presentation layer, and optional parameters
            to use when constructing the control
            </summary>
            <param name="uiHint">The name of the control</param>
            <param name="presentationLayer">The presentation layer</param>
            <param name="controlParameters">The list of parameters for the control</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint">
            <summary>
            Gets the name of the control that is most appropriate for this associated property or field
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.PresentationLayer">
            <summary>
            Gets the name of the presentation layer that supports the control type in <see cref="P:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint" />
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters">
            <summary>
            Gets the name-value pairs used as parameters to the control's constructor
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is ill-formed.</exception>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ValidationAttribute">
            <summary>
            Base class for all validation attributes.
            <para>Override <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" /> to implement validation logic.</para>
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor">
            <summary>
            Default constructor for any validation attribute.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts a fixed validation error message.
            </summary>
            <param name="errorMessage">A non-localized error message to use in <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageString" />.</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.#ctor(System.Func{System.String})">
            <summary>
            Allows for providing a resource accessor function that will be used by the <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageString" />
            property to retrieve the error message.  An example would be to have something like
            CustomAttribute() : base( () =&gt; MyResources.MyErrorMessage ) { }.
            </summary>
            <param name="errorMessageAccessor">The <see cref="T:System.Func`1" /> that will return an error message.</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageString">
            <summary>
            Gets the localized error message string, coming either from <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage" />, or from evaluating the
            <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType" /> and <see cref="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName" /> pair.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.RequiresValidationContext">
            <summary>
            A flag indicating that the attribute requires a non-null
            <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> to perform validation.
            Base class returns false. Override in child classes as appropriate.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage">
            <summary>
            Gets or sets the explicit error message string.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName">
            <summary>
            Gets or sets the resource name (property name) to use as the key for lookups on the resource type.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType">
            <summary>
            Gets or sets the resource type to use for error message lookups.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)">
            <summary>
            Formats the error message to present to the user.
            </summary>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is malformed.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)">
            <summary>
            Gets the value indicating whether or not the specified <paramref name="value" /> is valid
            with respect to the current validation attribute.
            <para>
                Derived classes should not override this method as it is only available for backwards compatibility.
                Instead, implement <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" />.
            </para>
            </summary>
            <param name="value">The value to validate</param>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is malformed.</exception>
            <exception cref="T:System.NotImplementedException">
            is thrown when neither overload of IsValid has been implemented by a derived class.
            </exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Protected virtual method to override and implement validation logic.
            <para>
                Derived classes should override this method instead of <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)" />, which is deprecated.
            </para>
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">
            A <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> instance that provides
            context about the validation operation, such as the object and member being validated.
            </param>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is malformed.</exception>
            <exception cref="T:System.NotImplementedException">
            is thrown when <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" />
            has not been implemented by a derived class.
            </exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Tests whether the given <paramref name="value" /> is valid with respect to the current
            validation attribute without throwing a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" />
            </summary>
            <param name="value">The value to validate</param>
            <param name="validationContext">
            A <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> instance that provides
            context about the validation operation, such as the object and member being validated.
            </param>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is malformed.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext" /> is null.</exception>
            <exception cref="T:System.NotImplementedException">
            is thrown when <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" />
            has not been implemented by a derived class.
            </exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.String)">
            <summary>
            Validates the specified <paramref name="value" /> and throws <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> if it is not.
            <para>
                The overloaded <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" /> is the recommended entry point as it
                can provide additional context to the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> being validated.
            </para>
            </summary>
            <param name="value">The value to validate</param>
            <param name="name">The string to be included in the validation error message if <paramref name="value" /> is not valid</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
            is thrown if <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)" /> returns <c>false</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is malformed.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified <paramref name="value" /> and throws <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> if it is not.
            </summary>
            <param name="value">The value to validate</param>
            <param name="validationContext">Additional context that may be used for validation.  It cannot be null.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">
            is thrown if <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" />
            doesn't return <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success" />.
            </exception>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is malformed.</exception>
            <exception cref="T:System.NotImplementedException">
            is thrown when <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" />
            has not been implemented by a derived class.
            </exception>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ValidationContext">
            <summary>
            Describes the context in which a validation is being performed.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.#ctor(System.Object)">
            <summary>
            Construct a <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> for a given object instance being validated.
            </summary>
            <param name="instance">The object instance being validated.  It cannot be <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance" /> is <c>null</c></exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.#ctor(System.Object,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Construct a <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> for a given object instance and an optional
            property bag of <paramref name="items" />.
            </summary>
            <param name="instance">The object instance being validated.  It cannot be null.</param>
            <param name="items">
            Optional set of key/value pairs to make available to consumers via <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items" />.
            If null, an empty dictionary will be created.  If not null, the set of key/value pairs will be copied into a
            new dictionary, preventing consumers from modifying the original dictionary.
            </param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance" /> is <c>null</c></exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.#ctor(System.Object,System.IServiceProvider,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Construct a <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> for a given object instance, an optional
            <paramref name="serviceProvider" />, and an optional
            property bag of <paramref name="items" />.
            </summary>
            <param name="instance">The object instance being validated.  It cannot be null.</param>
            <param name="serviceProvider">
            Optional <see cref="T:System.IServiceProvider" /> to use when <see cref="M:System.ComponentModel.DataAnnotations.ValidationContext.GetService(System.Type)" /> is called.
            If it is null, <see cref="M:System.ComponentModel.DataAnnotations.ValidationContext.GetService(System.Type)" /> will always return null.
            </param>
            <param name="items">
            Optional set of key/value pairs to make available to consumers via <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items" />.
            If null, an empty dictionary will be created.  If not null, the set of key/value pairs will be copied into a
            new dictionary, preventing consumers from modifying the original dictionary.
            </param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance" /> is <c>null</c></exception>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance">
            <summary>
            Gets the object instance being validated.  While it will not be null, the state of the instance is indeterminate
            as it might only be partially initialized during validation.
            <para>Consume this instance with caution!</para>
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectType">
            <summary>
            Gets the type of the object being validated.  It will not be null.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.DisplayName">
            <summary>
            Gets or sets the user-visible name of the type or property being validated.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName">
            <summary>
            Gets or sets the name of the type or property being validated.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationContext.Items">
            <summary>
            Gets the dictionary of key/value pairs associated with this context.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.GetDisplayName">
            <summary>
            Looks up the display name using the DisplayAttribute attached to the respective type or property.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.InitializeServiceProvider(System.Func{System.Type,System.Object})">
            <summary>
            Initializes the <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> with a service provider that can return
            service instances by <see cref="T:System.Type" /> when <see cref="M:System.ComponentModel.DataAnnotations.ValidationContext.GetService(System.Type)" /> is called.
            </summary>
            <param name="serviceProvider">
            A <see cref="T:System.Func`2" /> that can return service instances given the
            desired <see cref="T:System.Type" /> when <see cref="M:System.ComponentModel.DataAnnotations.ValidationContext.GetService(System.Type)" /> is called.
            If it is <c>null</c>, <see cref="M:System.ComponentModel.DataAnnotations.ValidationContext.GetService(System.Type)" /> will always return <c>null</c>.
            </param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationContext.GetService(System.Type)">
            <summary>
            See <see cref="M:System.IServiceProvider.GetService(System.Type)" />.
            </summary>
            <param name="serviceType">The type of the service needed.</param>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ValidationException">
            <summary>
            Exception used for validation using <see cref="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationAttribute" />.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.ComponentModel.DataAnnotations.ValidationResult,System.ComponentModel.DataAnnotations.ValidationAttribute,System.Object)">
            <summary>
            Constructor that accepts a structured <see cref="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult" /> describing the problem.
            </summary>
            <param name="validationResult">The value describing the validation error</param>
            <param name="validatingAttribute">The attribute that triggered this exception</param>
            <param name="value">The value that caused the validating attribute to trigger the exception</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String,System.ComponentModel.DataAnnotations.ValidationAttribute,System.Object)">
            <summary>
            Constructor that accepts an error message, the failing attribute, and the invalid value.
            </summary>
            <param name="errorMessage">The localized error message</param>
            <param name="validatingAttribute">The attribute that triggered this exception</param>
            <param name="value">The value that caused the validating attribute to trigger the exception</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String)">
            <summary>
            Constructor that accepts only a localized message
            </summary>
            <param name="message">The localized message</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor that accepts a localized message and an inner exception
            </summary>
            <param name="message">The localized error message</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationAttribute">
            <summary>
            Gets the <see>ValidationAttribute</see> instance that triggered this exception.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult">
            <summary>
            Gets the <see cref="P:System.ComponentModel.DataAnnotations.ValidationException.ValidationResult" /> instance that describes the validation error.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationException.Value">
            <summary>
            Gets the value that caused the validating attribute to trigger the exception
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ValidationResult">
            <summary>
            Container class for the results of a validation request.
            <para>
                Use the static <see cref="F:System.ComponentModel.DataAnnotations.ValidationResult.Success" /> to represent successful validation.
            </para>
            </summary>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.ValidationResult.Success">
            <summary>
            Gets a <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> that indicates Success.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.String)">
            <summary>
            Constructor that accepts an error message.  This error message would override any error message
            provided on the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />.
            </summary>
            <param name="errorMessage">
            The user-visible error message.  If null, <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" />
            will use <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)" /> for its error message.
            </param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor that accepts an error message as well as a list of member names involved in the validation.
            This error message would override any error message provided on the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />.
            </summary>
            <param name="errorMessage">
            The user-visible error message.  If null, <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" />
            will use <see cref="M:System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)" /> for its error message.
            </param>
            <param name="memberNames">
            The list of member names affected by this result.
            This list of member names is meant to be used by presentation layers to indicate which fields are in error.
            </param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            Constructor that creates a copy of an existing ValidationResult.
            </summary>
            <param name="validationResult">The validation result.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="validationResult" /> is null.</exception>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationResult.MemberNames">
            <summary>
            Gets the collection of member names affected by this result.  The collection may be empty but will never be null.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.ValidationResult.ErrorMessage">
            <summary>
            Gets the error message for this result.  It may be null.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.Validator">
            <summary>
            Helper class to validate objects, properties and other values using their associated
            <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> custom attributes.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateProperty(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Tests whether the given property value is valid.
            </summary>
            <param name="value">The value to test.</param>
            <param name="validationContext">
            Describes the property member to validate and provides services and context for the
            validators.
            </param>
            <param name="validationResults">Optional collection to receive <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />s for the failures.</param>
            <exception cref="T:System.ArgumentException">
            When the <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.MemberName" /> of <paramref name="validationContext" /> is not a valid
            property.
            </exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Tests whether the given object instance is valid.
            </summary>
            <param name="instance">The object instance to test.  It cannot be <c>null</c>.</param>
            <param name="validationContext">Describes the object to validate and provides services and context for the validators.</param>
            <param name="validationResults">Optional collection to receive <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />s for the failures.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="instance" /> doesn't match the
            <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance" />on <paramref name="validationContext" />.
            </exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Boolean)">
            <summary>
            Tests whether the given object instance is valid.
            </summary>
            <param name="instance">The object instance to test.  It cannot be null.</param>
            <param name="validationContext">Describes the object to validate and provides services and context for the validators.</param>
            <param name="validationResults">Optional collection to receive <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />s for the failures.</param>
            <param name="validateAllProperties">
            If <c>true</c>, also evaluates all properties of the object (this process is not
            recursive over properties of the properties).
            </param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="instance" /> doesn't match the
            <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance" />on <paramref name="validationContext" />.
            </exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.TryValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.ICollection{System.ComponentModel.DataAnnotations.ValidationResult},System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})">
            <summary>
            Tests whether the given value is valid against a specified list of <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />s.
            </summary>
            <param name="value">The value to test.  It cannot be null.</param>
            <param name="validationContext">
            Describes the object being validated and provides services and context for the
            validators.
            </param>
            <param name="validationResults">Optional collection to receive <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />s for the failures.</param>
            <param name="validationAttributes">
            The list of <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />s to validate this
            <paramref name="value" /> against.
            </param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateProperty(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Throws a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> if the given property <paramref name="value" /> is not valid.
            </summary>
            <param name="value">The value to test.</param>
            <param name="validationContext">
            Describes the object being validated and provides services and context for the
            validators.  It cannot be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext" /> is null.</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">When <paramref name="value" /> is invalid for this property.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Throws a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> if the given <paramref name="instance" /> is not valid.
            </summary>
            <param name="instance">The object instance to test.  It cannot be null.</param>
            <param name="validationContext">
            Describes the object being validated and provides services and context for the
            validators.  It cannot be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="instance" /> doesn't match the
            <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance" /> on <paramref name="validationContext" />.
            </exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">When <paramref name="instance" /> is found to be invalid.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Boolean)">
            <summary>
            Throws a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> if the given object instance is not valid.
            </summary>
            <param name="instance">The object instance to test.  It cannot be null.</param>
            <param name="validationContext">
            Describes the object being validated and provides services and context for the
            validators.  It cannot be <c>null</c>.
            </param>
            <param name="validateAllProperties">If <c>true</c>, also validates all the <paramref name="instance" />'s properties.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="instance" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
            When <paramref name="instance" /> doesn't match the
            <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.ObjectInstance" /> on <paramref name="validationContext" />.
            </exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">When <paramref name="instance" /> is found to be invalid.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.Validator.ValidateValue(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})">
            <summary>
            Throw a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> if the given value is not valid for the
            <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />s.
            </summary>
            <param name="value">The value to test.  It cannot be null.</param>
            <param name="validationContext">Describes the object being tested.</param>
            <param name="validationAttributes">The list of <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />s to validate against this instance.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="validationContext" /> is null.</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">When <paramref name="value" /> is found to be invalid.</exception>
        </member>
        <member name="F:System.DateTimeKind.Unspecified">
            <summary>
            The time represented is not specified as either local time or Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="F:System.DateTimeKind.Utc">
            <summary>
            The time represented is UTC.
            </summary>
        </member>
        <member name="F:System.DateTimeKind.Local">
            <summary>
            The time represented is local time.
            </summary>
        </member>
        <member name="T:System.Globalization.TextInfo">
            <summary>
            Defines text properties and behaviors, such as casing, that are specific to a writing system.
            </summary>
        </member>
        <member name="P:System.Globalization.TextInfo.ANSICodePage">
            <summary>
            Gets the American National Standards Institute (ANSI) code page used by the writing system represented by the current TextInfo.
            </summary>
        </member>
        <member name="P:System.Globalization.TextInfo.CultureName">
            <summary>
            Gets the name of the culture associated with the current TextInfo object.
            </summary>
        </member>
        <member name="P:System.Globalization.TextInfo.EBCDICCodePage">
            <summary>
            Gets the Extended Binary Coded Decimal Interchange Code (EBCDIC) code page used by the writing system represented by the current TextInfo.
            </summary>
        </member>
        <member name="P:System.Globalization.TextInfo.IsReadOnly">
            <summary>
            Gets a value indicating whether the current TextInfo object is read-only.
            </summary>
        </member>
        <member name="P:System.Globalization.TextInfo.IsRightToLeft">
            <summary>
            Gets a value indicating whether the current TextInfo object represents a writing system where text flows from right to left.
            </summary>
        </member>
        <member name="P:System.Globalization.TextInfo.LCID">
            <summary>
            Gets the culture identifier for the culture associated with the current TextInfo object.
            </summary>
        </member>
        <member name="P:System.Globalization.TextInfo.ListSeparator">
            <summary>
            Gets or sets the string that separates items in a list.
            </summary>
        </member>
        <member name="P:System.Globalization.TextInfo.MacCodePage">
            <summary>
            Gets the Macintosh code page used by the writing system represented by the current TextInfo.
            </summary>
        </member>
        <member name="P:System.Globalization.TextInfo.OEMCodePage">
            <summary>
            Gets the original equipment manufacturer (OEM) code page used by the writing system represented by the current TextInfo.
            </summary>
        </member>
        <member name="M:System.Globalization.TextInfo.Clone">
            <summary>
            Creates a new object that is a copy of the current TextInfo object.
            </summary>
            <returns>A new instance of System.Object that is the memberwise clone of the current TextInfo object.</returns>
        </member>
        <member name="T:System.Globalization.CultureInfo">
            <summary>
            Provides information about a specific culture (called a locale for unmanaged code development). The information includes the names for the culture, the writing system, the calendar used, the sort order of strings, and formatting for dates and numbers.
            </summary>
        </member>
        <member name="M:System.Globalization.CultureInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CultureInfo class based on the culture specified by name.
            </summary>
            <param name="name">A predefined CultureInfo name, Name of an existing CultureInfo, or Windows-only culture name. name is not case-sensitive.</param>
        </member>
        <member name="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)">
            <summary>
            Retrieves a cached, read-only instance of a culture using the specified culture name.
            </summary>
            <param name="name">The name of a culture. name is not case-sensitive.</param>
            <returns>A read-only CultureInfo object.</returns>
        </member>
        <member name="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)">
            <summary>
            Creates a CultureInfo that represents the specific culture that is associated with the specified name.
            </summary>
            <param name="name">A predefined CultureInfo name or the name of an existing CultureInfo object. name is not case-sensitive.</param>
            <returns>A CultureInfo object</returns>
        </member>
        <member name="P:System.Globalization.CultureInfo.CurrentCulture">
            <summary>
            Gets or sets the CultureInfo object that represents the culture used by the current thread.
            </summary>
        </member>
        <member name="P:System.Globalization.CultureInfo.DateTimeFormat">
            <summary>
            Gets or sets a DateTimeFormatInfo that defines the culturally appropriate format of displaying dates and times.
            </summary>
        </member>
        <member name="P:System.Globalization.CultureInfo.InvariantCulture">
            <summary>
            Gets the CultureInfo object that is culture-independent (invariant).
            </summary>
        </member>
        <member name="P:System.Globalization.CultureInfo.Name">
            <summary>
            Gets the culture name in the format languagecode2-country/regioncode2.
            </summary>
        </member>
        <member name="P:System.Globalization.CultureInfo.EnglishName">
            <summary>
            Gets the culture name in the format languagefull [country/regionfull] in English.
            </summary>
        </member>
        <member name="P:System.Globalization.CultureInfo.NativeName">
            <summary>
            Gets the culture name, consisting of the language, the country/region, and the optional script, that the culture is set to display.
            </summary>
        </member>
        <member name="P:System.Globalization.CultureInfo.NumberFormat">
            <summary>
            Gets or sets a NumberFormatInfo that defines the culturally appropriate format of displaying numbers, currency, and percentage.
            </summary>
        </member>
        <member name="M:System.Globalization.CultureInfo.Clone">
            <summary>
            Creates a copy of the current CultureInfo.
            </summary>
            <returns>A copy of the current CultureInfo.</returns>
        </member>
        <member name="P:System.Globalization.CultureInfo.TextInfo">
            <summary>
            Gets the TextInfo that defines the writing system associated with the culture.
            </summary>
        </member>
        <member name="T:System.Globalization.DateTimeFormatInfo">
            <summary>
            Provides culture-specific information about the format of date and time values.
            </summary>
        </member>
        <member name="M:System.Globalization.DateTimeFormatInfo.#ctor">
            <summary>
            Initializes a new writable instance of the DateTimeFormatInfo class that is culture-independent (invariant).
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.InvariantInfo">
            <summary>
            Gets the default read-only DateTimeFormatInfo object that is culture-independent (invariant).
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.AMDesignator">
            <summary>
            Gets or sets the string designator for hours that are "ante meridiem" (before noon).
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.PMDesignator">
            <summary>
            Gets or sets the string designator for hours that are "post meridiem" (after noon).
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.DateSeparator">
            <summary>
            Gets or sets the string that separates the components of a date, that is, the year, month, and day.
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.TimeSeparator">
            <summary>
            Gets or sets the string that separates the components of time, that is, the hour, minutes, and seconds.
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern">
            <summary>
            Gets the custom format string for a universal, sortable date and time string.
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern">
            <summary>
            Gets the custom format string for a sortable date and time value.
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern">
            <summary>
            Gets or sets the custom format string for a long date and long time value.
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.LongDatePattern">
            <summary>
            Gets or sets the custom format string for a long date value.
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern">
            <summary>
            Gets or sets the custom format string for a short date value.
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.LongTimePattern">
            <summary>
            Gets or sets the custom format string for a long time value.
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern">
            <summary>
            Gets or sets the custom format string for a short time value.
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.DayNames">
            <summary>
            Gets or sets a one-dimensional string array that contains the culture-specific full names of the days of the week.
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames">
            <summary>
            Gets or sets a one-dimensional array of type String containing the culture-specific abbreviated names of the days of the week.
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.ShortestDayNames">
            <summary>
            Gets or sets a string array of the shortest unique abbreviated day names associated with the current DateTimeFormatInfo object.
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.MonthNames">
            <summary>
            Gets or sets a one-dimensional array of type String containing the culture-specific full names of the months.
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames">
            <summary>
            Gets or sets a one-dimensional string array that contains the culture-specific abbreviated names of the months.
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames">
            <summary>
            Gets or sets a string array of abbreviated month names associated with the current DateTimeFormatInfo object.
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern">
            <summary>
            Gets or sets the custom format string for a month and day value.
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern">
            <summary>
            Gets the custom format string for a time value that is based on the Internet Engineering Task Force (IETF) Request for Comments (RFC) 1123 specification.
            </summary>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern">
            <summary>
            Gets or sets the custom format string for a year and month value.
            </summary>
        </member>
        <member name="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)">
            <summary>
            Returns an object of the specified type that provides a date and time formatting service.
            </summary>
            <param name="formatType">The type of the required formatting service.</param>
            <returns>The current object, if formatType is the same as the type of the current DateTimeFormatInfo; otherwise, null.</returns>
        </member>
        <member name="M:System.Globalization.DateTimeFormatInfo.Clone">
            <summary>
            Creates a shallow copy of the DateTimeFormatInfo.
            </summary>
            <returns>A new DateTimeFormatInfo object copied from the original DateTimeFormatInfo.</returns>
        </member>
        <member name="P:System.Globalization.DateTimeFormatInfo.CurrentInfo">
            <summary>
            Gets a read-only DateTimeFormatInfo object that formats values based on the current culture.
            </summary>
        </member>
        <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)">
            <summary>
            Returns the culture-specific abbreviated name of the specified day of the week based on the culture associated with the current DateTimeFormatInfo object.
            </summary>
            <param name="dayofweek">A System.DayOfWeek value.</param>
            <returns>The culture-specific abbreviated name of the day of the week represented by dayofweek.</returns>
        </member>
        <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)">
            <summary>
            Returns the culture-specific abbreviated name of the specified month based on the culture associated with the current DateTimeFormatInfo object.
            </summary>
            <param name="month">An integer from 1 through 13 representing the name of the month to retrieve.</param>
            <returns>The culture-specific abbreviated name of the month represented by month.</returns>
        </member>
        <member name="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns">
            <summary>
            Returns all the standard patterns in which date and time values can be formatted.
            </summary>
            <returns>An array that contains the standard patterns in which date and time values can be formatted.</returns>
        </member>
        <member name="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.String)">
            <summary>
            Returns all the patterns in which date and time values can be formatted using the specified standard format string.
            </summary>
            <param name="format">A standard format string.</param>
            <returns>An array containing the standard patterns in which date and time values can be formatted using the specified format string.</returns>
        </member>
        <member name="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)">
            <summary>
            Returns the culture-specific full name of the specified day of the week based on the culture associated with the current DateTimeFormatInfo object.
            </summary>
            <param name="dayofweek">A System.DayOfWeek value.</param>
            <returns>The culture-specific full name of the day of the week represented by dayofweek.</returns>
        </member>
        <member name="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)">
            <summary>
            Returns the culture-specific full name of the specified month based on the culture associated with the current DateTimeFormatInfo object.
            </summary>
            <param name="month">An integer from 1 through 13 representing the name of the month to retrieve.</param>
            <returns>The culture-specific full name of the month represented by month.</returns>
        </member>
        <member name="M:System.Globalization.DateTimeFormatInfo.GetShortestDayName(System.DayOfWeek)">
            <summary>
            Obtains the shortest abbreviated day name for a specified day of the week associated with the current DateTimeFormatInfo object.
            </summary>
            <param name="dayOfWeek">One of the DayOfWeek values.</param>
            <returns>The abbreviated name of the week that corresponds to the dayOfWeek parameter.</returns>
        </member>
        <member name="T:System.IO.BufferedStream">
             <summary>
             One of the design goals here is to prevent the buffer from getting in the way and slowing
             down underlying stream accesses when it is not needed. If you always read and write for sizes
             greater than the internal buffer size, then this class may not even allocate the internal buffer.
             See a large comment in Write for the details of the write buffer heuristic.
            
             This class buffers reads and writes in a shared buffer.
             (If you maintained two buffers separately, one operation would always trash the other buffer
             anyways, so we might as well use one buffer.)
             The assumption here is you will almost always be doing a series of reads or writes, but rarely
             alternate between the two of them on the same stream.
            
             Class Invariants:
             The class has one buffer, shared for reading and writing.
             It can only be used for one or the other at any point in time - not both.
             The following should be true:
             <![CDATA[
               * 0 <= _readPos <= _readLen < _bufferSize
               * 0 <= _writePos < _bufferSize
               * _readPos == _readLen && _readPos > 0 implies the read buffer is valid, but we're at the end of the buffer.
               * _readPos == _readLen == 0 means the read buffer contains garbage.
               * Either _writePos can be greater than 0, or _readLen & _readPos can be greater than zero,
                 but neither can be greater than zero at the same time.
              ]]>
             This class will never cache more bytes than the max specified buffer size.
             However, it may use a temporary buffer of up to twice the size in order to combine several IO operations on
             the underlying stream into a single operation. This is because we assume that memory copies are significantly
             faster than IO operations on the underlying stream (if this was not true, using buffering is never appropriate).
             The max size of this "shadow" buffer is limited as to not allocate it on the LOH.
             Shadowing is always transient. Even when using this technique, this class still guarantees that the number of
             bytes cached (not yet written to the target stream or not yet consumed by the user) is never larger than the
             actual specified buffer size.
             </summary>
        </member>
        <member name="F:System.IO.BufferedStream.MaxShadowBufferSize">
            <summary><code>MaxShadowBufferSize</code> is chosed such that shadow buffers are not allocated on the Large Object Heap.
            Currently, an object is allocated on the LOH if it is larger than 85000 bytes. See LARGE_OBJECT_SIZE in ndp\clr\src\vm\gc.h
            We will go with exactly 80 KBytes, although this is somewhat arbitrary.</summary>
        </member>
        <member name="T:System.IO.SeekOrigin">
            <summary>
            Provides seek reference points.  To seek to the end of a stream, call stream.Seek(0, SeekOrigin.End).
            </summary>
        </member>
        <member name="T:System.IO.Stream.SynchronousAsyncResult">
            <summary>Used as the IAsyncResult object when using asynchronous IO methods on the base Stream class.</summary>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)">
            <summary>
            Retrieves an array of the custom attributes applied to an assembly. A parameter specifies the assembly.
            </summary>
            <param name="element">An object derived from the Assembly class that describes a reusable collection of modules.</param>
            <returns>An Attribute array that contains the custom attributes applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and an ignored search option.
            </summary>
            <param name="element">An object derived from the Assembly class that describes a reusable collection of modules.</param>
            <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
            <returns>An Attribute array that contains the custom attributes applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
            <summary>
            Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and the type of the custom attribute to search for.
            </summary>
            <param name="element">An object derived from the Assembly class that describes a reusable collection of modules.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>An Attribute array that contains the custom attributes of type attributeType applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)">
            <summary>
            Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.
            </summary>
            <param name="element">An object derived from the Assembly class that describes a reusable collection of modules.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
            <returns>An Attribute array that contains the custom attributes of type attributeType applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)">
            <summary>
            Retrieves an array of the custom attributes applied to a member of a type. A parameter specifies the member.
            </summary>
            <param name="element">An object derived from the MemberInfo class that describes a constructor, event, field, method, or property member of a class.</param>
            <returns>An Attribute array that contains the custom attributes applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.
            </summary>
            <param name="element">An object derived from the MemberInfo class that describes a constructor, event, field, method, or property member of a class.</param>
            <param name="inherit">If true, specifies to also search the ancestors of element for custom attributes.</param>
            <returns>An Attribute array that contains the custom attributes applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.
            </summary>
            <param name="element">An object derived from the MemberInfo class that describes a constructor, event, field, method, or property member of a class.</param>
            <param name="type">The type, or a base type, of the custom attribute to search for.</param>
            <returns>An Attribute array that contains the custom attributes of type type applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.
            </summary>
            <param name="element">An object derived from the MemberInfo class that describes a constructor, event, field, method, or property member of a class.</param>
            <param name="type">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">If true, specifies to also search the ancestors of element for custom attributes.</param>
            <returns>An Attribute array that contains the custom attributes of type type applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)">
            <summary>
            Retrieves an array of the custom attributes applied to a method parameter. A parameter specifies the method parameter.
            </summary>
            <param name="element">An object derived from the ParameterInfo class that describes a parameter of a member of a class.</param>
            <returns>An Attribute array that contains the custom attributes applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and whether to search ancestors of the method parameter.
            </summary>
            <param name="element">An object derived from the ParameterInfo class that describes a parameter of a member of a class.</param>
            <param name="inherit">If true, specifies to also search the ancestors of element for custom attributes.</param>
            <returns>An Attribute array that contains the custom attributes applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.
            </summary>
            <param name="element">An object derived from the ParameterInfo class that describes a parameter of a member of a class.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>An Attribute array that contains the custom attributes of type attributeType applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
            <summary>
            Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.
            </summary>
            <param name="element">An object derived from the ParameterInfo class that describes a parameter of a member of a class.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">If true, specifies to also search the ancestors of element for custom attributes.</param>
            <returns>An Attribute array that contains the custom attributes of type attributeType applied to element, or an empty array if no such custom attributes exist.</returns>
        </member>
        <member name="T:System.Guid">
            <summary>
            The Guid data type which is mapped to the string type in Javascript.
            </summary>
        </member>
        <member name="F:System.Guid.Empty">
            <summary>
            A read-only instance of the Guid structure whose value is all zeros.
            </summary>
        </member>
        <member name="M:System.Guid.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Guid structure by using the value represented by the specified string.
            </summary>
            <param name="uuid">A string that contains a GUID</param>
        </member>
        <member name="M:System.Guid.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the Guid structure by using the specified array of bytes.
            </summary>
            <param name="b">A 16-element byte array containing values with which to initialize the GUID.</param>
        </member>
        <member name="M:System.Guid.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the Guid structure by using the specified unsigned integers and bytes.
            </summary>
            <param name="a">The first 4 bytes of the GUID.</param>
            <param name="b">The next 2 bytes of the GUID.</param>
            <param name="c">The next 2 bytes of the GUID.</param>
            <param name="d">The next byte of the GUID.</param>
            <param name="e">The next byte of the GUID.</param>
            <param name="f">The next byte of the GUID.</param>
            <param name="g">The next byte of the GUID.</param>
            <param name="h">The next byte of the GUID.</param>
            <param name="i">The next byte of the GUID.</param>
            <param name="j">The next byte of the GUID.</param>
            <param name="k">The next byte of the GUID.</param>
        </member>
        <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
            <summary>
            Initializes a new instance of the Guid structure by using the specified integers and byte array.
            </summary>
            <param name="a">The first 4 bytes of the GUID.</param>
            <param name="b">The next 2 bytes of the GUID.</param>
            <param name="c">The next 2 bytes of the GUID.</param>
            <param name="d">The remaining 8 bytes of the GUID.</param>
        </member>
        <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the Guid structure by using the specified integers and bytes.
            </summary>
            <param name="a">The first 4 bytes of the GUID.</param>
            <param name="b">The next 2 bytes of the GUID.</param>
            <param name="c">The next 2 bytes of the GUID.</param>
            <param name="d">The next byte of the GUID.</param>
            <param name="e">The next byte of the GUID.</param>
            <param name="f">The next byte of the GUID.</param>
            <param name="g">The next byte of the GUID.</param>
            <param name="h">The next byte of the GUID.</param>
            <param name="i">The next byte of the GUID.</param>
            <param name="j">The next byte of the GUID.</param>
            <param name="k">The next byte of the GUID.</param>
        </member>
        <member name="M:System.Guid.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="M:System.Guid.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance and a specified Guid object represent the same value.
            </summary>
            <param name="o">An object to compare to this instance.</param>
            <returns>true if o is equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:System.Guid.Equals(System.Guid)">
            <summary>
            Returns a value indicating whether this instance and a specified Guid object represent the same value.
            </summary>
            <param name="o">An object to compare to this instance.</param>
            <returns>true if o is equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:System.Guid.CompareTo(System.Guid)">
            <summary>
            Compares this instance to a specified Guid object and returns an indication of their relative values.
            </summary>
            <param name="value">An object to compare to this instance.</param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="M:System.Guid.ToString">
            <summary>
            Returns a string representation of the value of this instance in registry format.
            </summary>
            <returns>The value of this Guid, formatted by using the "D" format specifier.</returns>
        </member>
        <member name="M:System.Guid.ToString(System.String)">
            <summary>
            Returns a string representation of the value of this Guid instance, according to the provided format specifier.
            </summary>
            <param name="format">A single format specifier that indicates how to format the value of this Guid. The format parameter can be "N", "D", "B", "P". If format is null or an empty string (""), "D" is used.</param>
            <returns>The value of this Guid, represented as a series of lowercase hexadecimal digits in the specified format.</returns>
        </member>
        <member name="M:System.Guid.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of the value of this instance of the Guid class, according to the provided format specifier and culture-specific format information.
            </summary>
            <param name="format">A single format specifier that indicates how to format the value of this Guid. The format parameter can be "N", "D", "B", "P". If format is null or an empty string (""), "D" is used.</param>
            <param name="formatProvider">(Reserved) An object that supplies culture-specific formatting information.</param>
            <returns>The value of this Guid, represented as a series of lowercase hexadecimal digits in the specified format.</returns>
        </member>
        <member name="M:System.Guid.ToByteArray">
            <summary>
            Returns a 16-element byte array that contains the value of this instance.
            </summary>
            <returns>A 16-element byte array.</returns>
        </member>
        <member name="M:System.Guid.Parse(System.String)">
            <summary>
            Converts the string representation of a GUID to the equivalent Guid structure.
            </summary>
            <param name="input">The string to convert.</param>
            <returns>A structure that contains the value that was parsed.</returns>
        </member>
        <member name="M:System.Guid.ParseExact(System.String,System.String)">
            <summary>
            Converts the string representation of a GUID to the equivalent Guid structure, provided that the string is in the specified format.
            </summary>
            <param name="input">The GUID to convert.</param>
            <param name="format">One of the following specifiers that indicates the exact format to use when interpreting input: "N", "D", "B", "P".</param>
            <returns></returns>
        </member>
        <member name="M:System.Guid.TryParse(System.String,System.Guid@)">
            <summary>
            Converts the string representation of a GUID to the equivalent Guid structure.
            </summary>
            <param name="input">The GUID to convert.</param>
            <param name="result">The structure that will contain the parsed value. If the method returns true, result contains a valid Guid. If the method returns false, result equals Guid.Empty.</param>
            <returns></returns>
        </member>
        <member name="M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)">
            <summary>
            Converts the string representation of a GUID to the equivalent Guid structure, provided that the string is in the specified format.
            </summary>
            <param name="input">The GUID to convert.</param>
            <param name="format">One of the following specifiers that indicates the exact format to use when interpreting input: "N", "D", "B", "P".</param>
            <param name="result">The structure that will contain the parsed value. If the method returns true, result contains a valid Guid. If the method returns false, result equals Guid.Empty.</param>
            <returns></returns>
        </member>
        <member name="M:System.Guid.NewGuid">
            <summary>
            Initializes a new instance of the Guid structure.
            </summary>
            <returns>A new GUID object.</returns>
        </member>
        <member name="M:System.Guid.op_Equality(System.Guid,System.Guid)">
            <summary>
            Indicates whether the values of two specified Guid objects are equal.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>true if a and b are equal; otherwise, false.</returns>
        </member>
        <member name="M:System.Guid.op_Inequality(System.Guid,System.Guid)">
            <summary>
            Indicates whether the values of two specified Guid objects are not equal.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>true if a and b are not equal; otherwise, false.</returns>
        </member>
        <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            Applies an accumulator function over a sequence.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to aggregate over.
            </param>
            <param name="func">
            An accumulator function to be invoked on each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The final accumulator value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or func is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value
            is used as the initial accumulator value.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to aggregate over.
            </param>
            <param name="seed">
            The initial accumulator value.
            </param>
            <param name="func">
            An accumulator function to be invoked on each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TAccumulate">
            The type of the accumulator value.
            </typeparam>
            <returns>
            The final accumulator value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or func is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value
            is used as the initial accumulator value, and the specified function is used
            to select the result value.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to aggregate over.
            </param>
            <param name="seed">
            The initial accumulator value.
            </param>
            <param name="func">
            An accumulator function to be invoked on each element.
            </param>
            <param name="resultSelector">
            A function to transform the final accumulator value into the result value.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TAccumulate">
            The type of the accumulator value.
            </typeparam>
            <typeparam name="TResult">
            The type of the resulting value.
            </typeparam>
            <returns>
            The transformed final accumulator value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or func or resultSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether all elements of a sequence satisfy a condition.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements to
            apply the predicate to.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            true if every element of the source sequence passes the test in the specified
            predicate, or if the sequence is empty; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to check for emptiness.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            true if the source sequence contains any elements; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether any element of a sequence satisfies a condition.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to apply the
            predicate to.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            true if any elements in the source sequence pass the test in the specified
            predicate; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Linq.EnumerableInstance{``0})">
            <summary>
            Returns the input typed as System.Collections.Generic.IEnumerable&lt;T&gt;.
            </summary>
            <param name="source">
            The sequence to type as System.Collections.Generic.IEnumerable&lt;T&gt;.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The input sequence typed as System.Collections.Generic.IEnumerable&lt;T&gt;.
            </returns>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the input typed as System.Collections.Generic.IEnumerable&lt;T&gt;.
            </summary>
            <param name="source">
            The sequence to type as System.Collections.Generic.IEnumerable&lt;T&gt;.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The input sequence typed as System.Collections.Generic.IEnumerable&lt;T&gt;.
            </returns>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Nullable{System.Decimal}})">
            <summary>
            Computes the average of a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Decimal.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the average of a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Decimal.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Decimal})">
            <summary>
            Computes the average of a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the average of a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Nullable{System.Double}})">
            <summary>
            Computes the average of a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the average of a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Double})">
            <summary>
            Computes the average of a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the average of a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Nullable{System.Single}})">
            <summary>
            Computes the average of a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the average of a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Single})">
            <summary>
            Computes the average of a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the average of a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Nullable{System.Int32}})">
            <summary>
            Computes the average of a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the average of a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Int32})">
            <summary>
            Computes the average of a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the average of a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Nullable{System.Int64}})">
            <summary>
            Computes the average of a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the average of a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Int64})">
            <summary>
            Computes the average of a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the average of a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the average of a sequence of nullable System.Decimal values that
            are obtained by invoking a transform function on each element of the input
            sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Decimal.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Computes the average of a sequence of System.Decimal values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate an average.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Decimal.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the average of a sequence of nullable System.Double values that
            are obtained by invoking a transform function on each element of the input
            sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the average of a sequence of System.Double values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the average of a sequence of nullable System.Single values that
            are obtained by invoking a transform function on each element of the input
            sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Computes the average of a sequence of System.Single values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the average of a sequence of nullable System.Int32 values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Computes the average of a sequence of System.Int32 values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the average of a sequence of nullable System.Int64 values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes the average of a sequence of System.Int64 values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
            <summary>
            Casts the elements of an System.Collections.IEnumerable to the specified
            type.
            </summary>
            <param name="source">
            The System.Collections.IEnumerable that contains the elements to be cast
            to type TResult.
            </param>
            <typeparam name="TResult">
            The type to cast the elements of source to.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains each element of
            the source sequence cast to the specified type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidCastException">
            An element in the sequence cannot be cast to type TResult.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates two sequences.
            </summary>
            <param name="first">
            The first sequence to concatenate.
            </param>
            <param name="second">
            The sequence to concatenate to the first sequence.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the concatenated
            elements of the two input sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Determines whether a sequence contains a specified element by using the default
            equality comparer.
            </summary>
            <param name="source">
            A sequence in which to locate a value.
            </param>
            <param name="value">
            The value to locate in the sequence.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            true if the source sequence contains an element that has the specified value;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether a sequence contains a specified element by using a specified
            System.Collections.Generic.IEqualityComparer&lt;T&gt;.
            </summary>
            <param name="source">
            A sequence in which to locate a value.
            </param>
            <param name="value">
            The value to locate in the sequence.
            </param>
            <param name="comparer">
            An equality comparer to compare values.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            true if the source sequence contains an element that has the specified value;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <param name="source">
            A sequence that contains elements to be counted.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The number of elements in the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in source is larger than System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns a number that represents how many elements in the specified sequence
            satisfy a condition.
            </summary>
            <param name="source">
            A sequence that contains elements to be tested and counted.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            A number that represents how many elements in the sequence satisfy the condition
            in the predicate function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in source is larger than System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the elements of the specified sequence or the type parameter's default
            value in a singleton collection if the sequence is empty.
            </summary>
            <param name="source">
            The sequence to return a default value for if it is empty.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; object that contains the default
            value for the TSource type if source is empty; otherwise, source.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the elements of the specified sequence or the specified value in
            a singleton collection if the sequence is empty.
            </summary>
            <param name="source">
            The sequence to return the specified value for if it is empty.
            </param>
            <param name="defaultValue">
            The value to return if the sequence is empty.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains defaultValue if
            source is empty; otherwise, source.
            </returns>
        </member>
        <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns distinct elements from a sequence by using the default equality comparer
            to compare values.
            </summary>
            <param name="source">
            The sequence to remove duplicate elements from.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains distinct elements
            from the source sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns distinct elements from a sequence by using a specified System.Collections.Generic.IEqualityComparer&lt;T&gt;
            to compare values.
            </summary>
            <param name="source">
            The sequence to remove duplicate elements from.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare values.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains distinct elements
            from the source sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return an element from.
            </param>
            <param name="index">
            The zero-based index of the element to retrieve.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The element at the specified position in the source sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index is less than 0 or greater than or equal to the number of elements in
            source.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence or a default value
            if the index is out of range.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return an element from.
            </param>
            <param name="index">
            The zero-based index of the element to retrieve.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            default(TSource) if the index is outside the bounds of the source sequence;
            otherwise, the element at the specified position in the source sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Empty``1">
            <summary>
            Returns an empty System.Collections.Generic.IEnumerable&lt;T&gt; that has the specified
            type argument.
            </summary>
            <typeparam name="TResult">
            The type to assign to the type parameter of the returned generic System.Collections.Generic.IEnumerable&lt;T&gt;.
            </typeparam>
            <returns>
            An empty System.Collections.Generic.IEnumerable&lt;T&gt; whose type argument is
            TResult.
            </returns>
        </member>
        <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Produces the set difference of two sequences by using the default equality
            comparer to compare values.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements that are not
            also in second will be returned.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements that also occur
            in the first sequence will cause those elements to be removed from the returned
            sequence.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            A sequence that contains the set difference of the elements of two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set difference of two sequences by using the specified System.Collections.Generic.IEqualityComparer&lt;T&gt;
            to compare values.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements that are not
            also in second will be returned.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements that also occur
            in the first sequence will cause those elements to be removed from the returned
            sequence.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare values.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            A sequence that contains the set difference of the elements of two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element of a sequence.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to return the first element
            of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The first element in the specified sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The source sequence is empty.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element in a sequence that satisfies a specified condition.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return an element from.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The first element in the sequence that passes the test in the specified predicate
            function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No element satisfies the condition in predicate.-or-The source sequence is
            empty.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element of a sequence, or a default value if the sequence
            contains no elements.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to return the first element
            of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            default(TSource) if source is empty; otherwise, the first element in source.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element of the sequence that satisfies a condition or a
            default value if no such element is found.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return an element from.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            default(TSource) if source is empty or if no element passes the test specified
            by predicate; otherwise, the first element in source that passes the test
            specified by predicate.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IEnumerable(Of IGrouping(Of
            TKey, TSource)) in Visual Basic where each System.Linq.IGrouping&lt;TKey,TElement&gt;
            object contains a sequence of objects and a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            and creates a result value from each group and its key.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="resultSelector">
            A function to create a result value from each group.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TResult">
            The type of the result value returned by resultSelector.
            </typeparam>
            <returns>
            A collection of elements of type TResult where each element represents a
            projection over a group and its key.
            </returns>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            and projects the elements for each group by using a specified function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="elementSelector">
            A function to map each source element to an element in the System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the elements in the System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </typeparam>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IEnumerable(Of IGrouping(Of
            TKey, TElement)) in Visual Basic where each System.Linq.IGrouping&lt;TKey,TElement&gt;
            object contains a collection of objects of type TElement and a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector or elementSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            and compares the keys by using a specified comparer.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IEnumerable(Of IGrouping(Of
            TKey, TSource)) in Visual Basic where each System.Linq.IGrouping&lt;TKey,TElement&gt;
            object contains a collection of objects and a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            and creates a result value from each group and its key. The keys are compared
            by using a specified comparer.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="resultSelector">
            A function to create a result value from each group.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys with.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TResult">
            The type of the result value returned by resultSelector.
            </typeparam>
            <returns>
            A collection of elements of type TResult where each element represents a
            projection over a group and its key.
            </returns>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            and creates a result value from each group and its key. The elements of each
            group are projected by using a specified function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="elementSelector">
            A function to map each source element to an element in an System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </param>
            <param name="resultSelector">
            A function to create a result value from each group.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the elements in each System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </typeparam>
            <typeparam name="TResult">
            The type of the result value returned by resultSelector.
            </typeparam>
            <returns>
            A collection of elements of type TResult where each element represents a
            projection over a group and its key.
            </returns>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a key selector function. The
            keys are compared by using a comparer and each group's elements are projected
            by using a specified function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="elementSelector">
            A function to map each source element to an element in an System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the elements in the System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </typeparam>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IEnumerable(Of IGrouping(Of
            TKey, TElement)) in Visual Basic where each System.Linq.IGrouping&lt;TKey,TElement&gt;
            object contains a collection of objects of type TElement and a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector or elementSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            and creates a result value from each group and its key. Key values are compared
            by using a specified comparer, and the elements of each group are projected
            by using a specified function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="elementSelector">
            A function to map each source element to an element in an System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </param>
            <param name="resultSelector">
            A function to create a result value from each group.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys with.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the elements in each System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </typeparam>
            <typeparam name="TResult">
            The type of the result value returned by resultSelector.
            </typeparam>
            <returns>
            A collection of elements of type TResult where each element represents a
            projection over a group and its key.
            </returns>
        </member>
        <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
            <summary>
            Correlates the elements of two sequences based on equality of keys and groups
            the results. The default equality comparer is used to compare keys.
            </summary>
            <param name="outer">
            The first sequence to join.
            </param>
            <param name="inner">
            The sequence to join to the first sequence.
            </param>
            <param name="outerKeySelector">
            A function to extract the join key from each element of the first sequence.
            </param>
            <param name="innerKeySelector">
            A function to extract the join key from each element of the second sequence.
            </param>
            <param name="resultSelector">
            A function to create a result element from an element from the first sequence
            and a collection of matching elements from the second sequence.
            </param>
            <typeparam name="TOuter">
            The type of the elements of the first sequence.
            </typeparam>
            <typeparam name="TInner">
            The type of the elements of the second sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys returned by the key selector functions.
            </typeparam>
            <typeparam name="TResult">
            The type of the result elements.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains elements of type
            TResult that are obtained by performing a grouped join on two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            outer or inner or outerKeySelector or innerKeySelector or resultSelector
            is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Correlates the elements of two sequences based on key equality and groups
            the results. A specified System.Collections.Generic.IEqualityComparer&lt;T&gt;
            is used to compare keys.
            </summary>
            <param name="outer">
            The first sequence to join.
            </param>
            <param name="inner">
            The sequence to join to the first sequence.
            </param>
            <param name="outerKeySelector">
            A function to extract the join key from each element of the first sequence.
            </param>
            <param name="innerKeySelector">
            A function to extract the join key from each element of the second sequence.
            </param>
            <param name="resultSelector">
            A function to create a result element from an element from the first sequence
            and a collection of matching elements from the second sequence.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to hash and compare keys.
            </param>
            <typeparam name="TOuter">
            The type of the elements of the first sequence.
            </typeparam>
            <typeparam name="TInner">
            The type of the elements of the second sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys returned by the key selector functions.
            </typeparam>
            <typeparam name="TResult">
            The type of the result elements.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains elements of type
            TResult that are obtained by performing a grouped join on two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            outer or inner or outerKeySelector or innerKeySelector or resultSelector
            is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Produces the set intersection of two sequences by using the default equality
            comparer to compare values.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements that
            also appear in second will be returned.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements that
            also appear in the first sequence will be returned.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            A sequence that contains the elements that form the set intersection of two
            sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set intersection of two sequences by using the specified System.Collections.Generic.IEqualityComparer&lt;T&gt;
            to compare values.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements that
            also appear in second will be returned.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements that
            also appear in the first sequence will be returned.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare values.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            A sequence that contains the elements that form the set intersection of two
            sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
            <summary>
            Correlates the elements of two sequences based on matching keys. The default
            equality comparer is used to compare keys.
            </summary>
            <param name="outer">
            The first sequence to join.
            </param>
            <param name="inner">
            The sequence to join to the first sequence.
            </param>
            <param name="outerKeySelector">
            A function to extract the join key from each element of the first sequence.
            </param>
            <param name="innerKeySelector">
            A function to extract the join key from each element of the second sequence.
            </param>
            <param name="resultSelector">
            A function to create a result element from two matching elements.
            </param>
            <typeparam name="TOuter">
            The type of the elements of the first sequence.
            </typeparam>
            <typeparam name="TInner">
            The type of the elements of the second sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys returned by the key selector functions.
            </typeparam>
            <typeparam name="TResult">
            The type of the result elements.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that has elements of type TResult
            that are obtained by performing an inner join on two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            outer or inner or outerKeySelector or innerKeySelector or resultSelector
            is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Correlates the elements of two sequences based on matching keys. A specified
            System.Collections.Generic.IEqualityComparer&lt;T&gt; is used to compare keys.
            </summary>
            <param name="outer">
            The first sequence to join.
            </param>
            <param name="inner">
            The sequence to join to the first sequence.
            </param>
            <param name="outerKeySelector">
            A function to extract the join key from each element of the first sequence.
            </param>
            <param name="innerKeySelector">
            A function to extract the join key from each element of the second sequence.
            </param>
            <param name="resultSelector">
            A function to create a result element from two matching elements.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to hash and compare keys.
            </param>
            <typeparam name="TOuter">
            The type of the elements of the first sequence.
            </typeparam>
            <typeparam name="TInner">
            The type of the elements of the second sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys returned by the key selector functions.
            </typeparam>
            <typeparam name="TResult">
            The type of the result elements.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that has elements of type TResult
            that are obtained by performing an inner join on two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            outer or inner or outerKeySelector or innerKeySelector or resultSelector
            is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an System.Int64 that represents the total number of elements in a
            sequence.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements to
            be counted.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The number of elements in the source sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements exceeds System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns an System.Int64 that represents how many elements in a sequence satisfy
            a condition.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements to
            be counted.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            A number that represents how many elements in the sequence satisfy the condition
            in the predicate function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The number of matching elements exceeds System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the last element of a sequence.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return the last element of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value at the last position in the source sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The source sequence is empty.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element of a sequence that satisfies a specified condition.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return an element from.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The last element in the sequence that passes the test in the specified predicate
            function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No element satisfies the condition in predicate.-or-The source sequence is
            empty.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the last element of a sequence, or a default value if the sequence
            contains no elements.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return the last element of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            default(TSource) if the source sequence is empty; otherwise, the last element
            in the System.Collections.Generic.IEnumerable&lt;T&gt;.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element of a sequence that satisfies a condition or a default
            value if no such element is found.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return an element from.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            default(TSource) if the sequence is empty or if no elements pass the test
            in the predicate function; otherwise, the last element that passes the test
            in the predicate function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Nullable{System.Decimal}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual
            Basic that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual
            Basic that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Decimal})">
            <summary>
            Returns the maximum value in a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Returns the maximum value in a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Nullable{System.Double}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Double})">
            <summary>
            Returns the maximum value in a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the maximum value in a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Nullable{System.Single}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Single})">
            <summary>
            Returns the maximum value in a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Returns the maximum value in a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Nullable{System.Int32}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int327gt; in C# or Nullable(Of Int32) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Int32})">
            <summary>
            Returns the maximum value in a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the maximum value in a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Nullable{System.Int64}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Int64})">
            <summary>
            Returns the maximum value in a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Returns the maximum value in a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum nullable System.Decimal value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual
            Basic that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Decimal value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum nullable System.Double value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual
            Basic that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Double value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum nullable System.Single value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual
            Basic that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Single value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum nullable System.Int32 value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Int32 value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum nullable System.Int64 value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Int64 value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Nullable{System.Decimal}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual
            Basic that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual
            Basic that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Int64 value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Int64 value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements in result.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the minimum TSource value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum TResult value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements in result.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Decimal})">
            <summary>
            Returns the minimum value in a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Returns the minimum value in a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Nullable{System.Double}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Double})">
            <summary>
            Returns the minimum value in a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the minimum value in a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Nullable{System.Single}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Single})">
            <summary>
            Returns the minimum value in a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Returns the minimum value in a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Nullable{System.Int32}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Int32})">
            <summary>
            Returns the minimum value in a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the minimum value in a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Nullable{System.Int64}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Int64})">
            <summary>
            Returns the minimum value in a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Returns the minimum value in a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum nullable System.Decimal value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual
            Basic that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum System.Decimal value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum nullable System.Double value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual
            Basic that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum System.Double value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum nullable System.Single value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual
            Basic that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum System.Single value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum nullable System.Int32 value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum System.Int32 value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum nullable System.Int64 value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum System.Int64 value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
            <summary>
            Filters the elements of an System.Collections.IEnumerable based on a specified
            type.
            </summary>
            <param name="source">
            The System.Collections.IEnumerable whose elements to filter.
            </param>
            <typeparam name="TResult">
            The type to filter the elements of the sequence on.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains elements from
            the input sequence of type TResult.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <param name="source">
            A sequence of values to order.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted according
            to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in ascending order by using a specified
            comparer.
            </summary>
            <param name="source">
            A sequence of values to order.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted according
            to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <param name="source">
            A sequence of values to order.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted in
            descending order according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in descending order by using a specified
            comparer.
            </summary>
            <param name="source">
            A sequence of values to order.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted in
            descending order according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
            <summary>
            Generates a sequence of integral numbers within a specified range.
            </summary>
            <param name="start">
            The value of the first integer in the sequence.
            </param>
            <param name="count">
            The number of sequential integers to generate.
            </param>
            <returns>
            An IEnumerable&lt;Int32&gt; in C# or IEnumerable(Of Int32) in Visual Basic that
            contains a range of sequential integral numbers.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            count is less than 0.-or-start + count -1 is larger than System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
            <summary>
            Generates a sequence that contains one repeated value.
            </summary>
            <param name="element">
            The value to be repeated.
            </param>
            <param name="count">
            The number of times to repeat the value in the generated sequence.
            </param>
            <typeparam name="TResult">
            The type of the value to be repeated in the result sequence.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains a repeated value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            count is less than 0.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Inverts the order of the elements in a sequence.
            </summary>
            <param name="source">
            A sequence of values to reverse.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            A sequence whose elements correspond to those of the input sequence in reverse
            order.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            Projects each element of a sequence into a new form by incorporating the
            element's index.
            </summary>
            <param name="source">
            A sequence of values to invoke a transform function on.
            </param>
            <param name="selector">
            A transform function to apply to each source element; the second parameter
            of the function represents the index of the source element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TResult">
            The type of the value returned by selector.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements are the result
            of invoking the transform function on each element of source.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <param name="source">
            A sequence of values to invoke a transform function on.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TResult">
            The type of the value returned by selector.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements are the result
            of invoking the transform function on each element of source.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Projects each element of a sequence to an System.Collections.Generic.IEnumerable&lt;T&gt;
            and flattens the resulting sequences into one sequence.
            </summary>
            <param name="source">
            A sequence of values to project.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements of the sequence returned by selector.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements are the result
            of invoking the one-to-many transform function on each element of the input
            sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Projects each element of a sequence to an System.Collections.Generic.IEnumerable&lt;T&gt;,
            and flattens the resulting sequences into one sequence. The index of each
            source element is used in the projected form of that element.
            </summary>
            <param name="source">
            A sequence of values to project.
            </param>
            <param name="selector">
            A transform function to apply to each source element; the second parameter
            of the function represents the index of the source element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements of the sequence returned by selector.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements are the result
            of invoking the one-to-many transform function on each element of an input
            sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects each element of a sequence to an System.Collections.Generic.IEnumerable&lt;T&gt;,
            flattens the resulting sequences into one sequence, and invokes a result
            selector function on each element therein.
            </summary>
            <param name="source">
            A sequence of values to project.
            </param>
            <param name="collectionSelector">
            A transform function to apply to each element of the input sequence.
            </param>
            <param name="resultSelector">
            A transform function to apply to each element of the intermediate sequence.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TCollection">
            The type of the intermediate elements collected by collectionSelector.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements of the resulting sequence.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements are the result
            of invoking the one-to-many transform function collectionSelector on each
            element of source and then mapping each of those sequence elements and their
            corresponding source element to a result element.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or collectionSelector or resultSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects each element of a sequence to an System.Collections.Generic.IEnumerable&lt;T&gt;,
            flattens the resulting sequences into one sequence, and invokes a result
            selector function on each element therein. The index of each source element
            is used in the intermediate projected form of that element.
            </summary>
            <param name="source">
            A sequence of values to project.
            </param>
            <param name="collectionSelector">
            A transform function to apply to each source element; the second parameter
            of the function represents the index of the source element.
            </param>
            <param name="resultSelector">
            A transform function to apply to each element of the intermediate sequence.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TCollection">
            The type of the intermediate elements collected by collectionSelector.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements of the resulting sequence.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements are the result
            of invoking the one-to-many transform function collectionSelector on each
            element of source and then mapping each of those sequence elements and their
            corresponding source element to a result element.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or collectionSelector or resultSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether two sequences are equal by comparing the elements by using
            the default equality comparer for their type.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to compare to second.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to compare to the first sequence.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            true if the two source sequences are of equal length and their corresponding
            elements are equal according to the default equality comparer for their type;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether two sequences are equal by comparing their elements by
            using a specified System.Collections.Generic.IEqualityComparer&lt;T&gt;.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to compare to second.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to compare to the first sequence.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to use to compare elements.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            true if the two source sequences are of equal length and their corresponding
            elements compare equal according to comparer; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the only element of a sequence, and throws an exception if there
            is not exactly one element in the sequence.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return the single element
            of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The single element of the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The input sequence contains more than one element.-or-The input sequence
            is empty.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition,
            and throws an exception if more than one such element exists.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return a single element from.
            </param>
            <param name="predicate">
            A function to test an element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The single element of the input sequence that satisfies a condition.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No element satisfies the condition in predicate.-or-More than one element
            satisfies the condition in predicate.-or-The source sequence is empty.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the only element of a sequence, or a default value if the sequence
            is empty; this method throws an exception if there is more than one element
            in the sequence.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return the single element
            of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The single element of the input sequence, or default(TSource) if the sequence
            contains no elements.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The input sequence contains more than one element.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition
            or a default value if no such element exists; this method throws an exception
            if more than one element satisfies the condition.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return a single element from.
            </param>
            <param name="predicate">
            A function to test an element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The single element of the input sequence that satisfies the condition, or
            default(TSource) if no such element is found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the
            remaining elements.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return elements from.
            </param>
            <param name="count">
            The number of elements to skip before returning the remaining elements.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements that
            occur after the specified index in the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Bypasses elements in a sequence as long as a specified condition is true
            and then returns the remaining elements.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return elements from.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements from
            the input sequence starting at the first element in the linear series that
            does not pass the test specified by predicate.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Bypasses elements in a sequence as long as a specified condition is true
            and then returns the remaining elements. The element's index is used in the
            logic of the predicate function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return elements from.
            </param>
            <param name="predicate">
            A function to test each source element for a condition; the second parameter
            of the function represents the index of the source element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements from
            the input sequence starting at the first element in the linear series that
            does not pass the test specified by predicate.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Nullable{System.Decimal}})">
            <summary>
            Computes the sum of a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Decimal.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the sum of a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Decimal.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Decimal})">
            <summary>
            Computes the sum of a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Decimal.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the sum of a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Decimal.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Nullable{System.Double}})">
            <summary>
            Computes the sum of a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the sum of a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Double})">
            <summary>
            Computes the sum of a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the sum of a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Nullable{System.Single}})">
            <summary>
            Computes the sum of a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the sum of a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Single})">
            <summary>
            Computes the sum of a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the sum of a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Nullable{System.Int32}})">
            <summary>
            Computes the sum of a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int32.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the sum of a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int32.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Int32})">
            <summary>
            Computes the sum of a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the sum of a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Nullable{System.Int64}})">
            <summary>
            Computes the sum of a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the sum of a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Int64})">
            <summary>
            Computes the sum of a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int64.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the sum of a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int64.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the sum of the sequence of nullable System.Decimal values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Decimal.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Computes the sum of the sequence of System.Decimal values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Decimal.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the sum of the sequence of nullable System.Double values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the sum of the sequence of System.Double values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the sum of the sequence of nullable System.Single values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Computes the sum of the sequence of System.Single values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the sum of the sequence of nullable System.Int32 values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int32.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Computes the sum of the sequence of System.Int32 values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the sum of the sequence of nullable System.Int64 values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes the sum of the sequence of System.Int64 values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int64.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="source">
            The sequence to return elements from.
            </param>
            <param name="count">
            The number of elements to return.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the specified
            number of elements from the start of the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns elements from a sequence as long as a specified condition is true.
            </summary>
            <param name="source">
            A sequence to return elements from.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements from
            the input sequence that occur before the element at which the test no longer
            passes.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Returns elements from a sequence as long as a specified condition is true.
            The element's index is used in the logic of the predicate function.
            </summary>
            <param name="source">
            The sequence to return elements from.
            </param>
            <param name="predicate">
            A function to test each source element for a condition; the second parameter
            of the function represents the index of the source element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains elements from
            the input sequence that occur before the element at which the test no longer
            passes.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending
            order according to a key.
            </summary>
            <param name="source">
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; that contains elements to sort.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted according
            to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending
            order by using a specified comparer.
            </summary>
            <param name="source">
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; that contains elements to sort.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted according
            to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending
            order, according to a key.
            </summary>
            <param name="source">
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; that contains elements to sort.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted in
            descending order according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending
            order by using a specified comparer.
            </summary>
            <param name="source">
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; that contains elements to sort.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted in
            descending order according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates an array from a System.Collections.Generic.IEnumerable&lt;T&gt;.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to create an array from.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An array that contains the elements from the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to a specified key selector function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            A System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; that contains keys and
            values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.-or-keySelector produces a key that is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            keySelector produces duplicate keys for two elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Creates a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to specified key selector and element selector functions.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="elementSelector">
            A transform function to produce a result element value from each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the value returned by elementSelector.
            </typeparam>
            <returns>
            A System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; that contains values
            of type TElement selected from the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector or elementSelector is null.-or-keySelector produces
            a key that is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            keySelector produces duplicate keys for two elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to a specified key selector function and key comparer.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys returned by keySelector.
            </typeparam>
            <returns>
            A System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; that contains keys and
            values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.-or-keySelector produces a key that is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            keySelector produces duplicate keys for two elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to a specified key selector function, a comparer, and an element
            selector function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="elementSelector">
            A transform function to produce a result element value from each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the value returned by elementSelector.
            </typeparam>
            <returns>
            A System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; that contains values
            of type TElement selected from the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector or elementSelector is null.-or-keySelector produces
            a key that is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            keySelector produces duplicate keys for two elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a System.Collections.Generic.List&lt;T&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Collections.Generic.List&lt;T&gt;
            from.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            A System.Collections.Generic.List&lt;T&gt; that contains elements from the input
            sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates a System.Linq.Lookup&lt;TKey,TElement&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to a specified key selector function.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Linq.Lookup&lt;TKey,TElement&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            A System.Linq.Lookup&lt;TKey,TElement&gt; that contains keys and values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Creates a System.Linq.Lookup&lt;TKey,TElement&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to specified key selector and element selector functions.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Linq.Lookup&lt;TKey,TElement&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="elementSelector">
            A transform function to produce a result element value from each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the value returned by elementSelector.
            </typeparam>
            <returns>
            A System.Linq.Lookup&lt;TKey,TElement&gt; that contains values of type TElement
            selected from the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector or elementSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a System.Linq.Lookup&lt;TKey,TElement&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to a specified key selector function and key comparer.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Linq.Lookup&lt;TKey,TElement&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            A System.Linq.Lookup&lt;TKey,TElement&gt; that contains keys and values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a System.Linq.Lookup&lt;TKey,TElement&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to a specified key selector function, a comparer and an element
            selector function.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Linq.Lookup&lt;TKey,TElement&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="elementSelector">
            A transform function to produce a result element value from each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the value returned by elementSelector.
            </typeparam>
            <returns>
            A System.Linq.Lookup&lt;TKey,TElement&gt; that contains values of type TElement
            selected from the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector or elementSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Produces the set union of two sequences by using the default equality comparer.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements form
            the first set for the union.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements form
            the second set for the union.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements from
            both input sequences, excluding duplicates.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set union of two sequences by using a specified System.Collections.Generic.IEqualityComparer&lt;T&gt;.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements form
            the first set for the union.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements form
            the second set for the union.
            </param>
            <param name="comparer">
            The System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare values.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements from
            both input sequences, excluding duplicates.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to filter.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains elements from
            the input sequence that satisfy the condition.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate. Each element's index is
            used in the logic of the predicate function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to filter.
            </param>
            <param name="predicate">
            A function to test each source element for a condition; the second parameter
            of the function represents the index of the source element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains elements from
            the input sequence that satisfy the condition.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Merges two sequences by using the specified predicate function.
            </summary>
            <param name="first">
            The first sequence to merge.
            </param>
            <param name="second">
            The second sequence to merge.
            </param>
            <param name="resultSelector">
            A function that specifies how to merge the elements from the two sequences.
            </param>
            <typeparam name="TFirst">
            The type of the elements of the first input sequence.
            </typeparam>
            <typeparam name="TSecond">
            The type of the elements of the second input sequence.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements of the result sequence.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains merged elements
            of two input sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="T:System.Random">
            <summary>
            A random number generator
            </summary>
        </member>
        <member name="M:System.Random.#ctor">
            <summary>
            Initializes a new instance of the Random class, using a time-dependent default seed value.
            </summary>
        </member>
        <member name="M:System.Random.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Random class, using the specified seed value.
            </summary>
            <param name="seed">A number used to calculate a starting value for the pseudo-random number sequence. If a negative number is specified, the absolute value of the number is used.</param>
        </member>
        <member name="M:System.Random.Sample">
            <summary>
            Returns a random floating-point number between 0.0 and 1.0.
            </summary>
        </member>
        <member name="M:System.Random.Next">
            <summary>
            Returns a non-negative random integer.
            </summary>
            <returns>A 32-bit signed integer that is greater than or equal to 0 and less than Int32.MaxValue.</returns>
        </member>
        <member name="M:System.Random.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random integer that is within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns>A 32-bit signed integer greater than or equal to minValue and less than maxValue; that is, the range of return values includes minValue but not maxValue. If minValue equals maxValue, minValue is returned.</returns>
        </member>
        <member name="M:System.Random.Next(System.Int32)">
            <summary>
            Returns a non-negative random integer that is less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to 0</param>
            <returns>A 32-bit signed integer that is greater than or equal to 0, and less than maxValue; that is, the range of return values ordinarily includes 0 but not maxValue. However, if maxValue equals 0, maxValue is returned.</returns>
        </member>
        <member name="M:System.Random.NextDouble">
            <summary>
            Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0.
            </summary>
            <returns>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:System.Random.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
        </member>
        <member name="P:System.ArgumentException.ParamName">
            <summary>
            Gets the name of the parameter that causes this exception.
            </summary>
        </member>
        <member name="T:System.Console">
            <summary>
            Represents the standard input, output, and error streams for console applications.
            </summary>
        </member>
        <member name="M:System.Console.ReadLine">
            <returns>result is a string containing the text entered by the user, or the value null.</returns>
        </member>
        <member name="M:System.Console.ReadLine(System.String)">
            <summary>
            ReadLine uses the native JavaScript prompt() to display a dialog with an optional message prompting the user to input some text.
            </summary>
            <param name="text">text is a string of text to display to the user. This parameter is optional and can be omitted if there is nothing to show in the prompt window.</param>
            <returns>result is a string containing the text entered by the user, or the value null.</returns>
        </member>
        <member name="M:System.Console.ReadLine(System.String,System.String)">
            <summary>
            ReadLine uses the native JavaScript prompt() to dialog with an optional message prompting the user to input some text.
            </summary>
            <param name="text">text is a string of text to display to the user. This parameter is optional and can be omitted if there is nothing to show in the prompt window.</param>
            <param name="value">value is a string containing the default value displayed in the text input field. It is an optional parameter. Note that in Internet Explorer 7 and 8, if you do not provide this parameter, the string "undefined" is the default value.</param>
            <returns>result is a string containing the text entered by the user, or the value null.</returns>
        </member>
        <member name="M:System.Console.Read">
            <summary>
            Read uses the native JavaScript prompt() to display a dialog with an optional message prompting the user to input some text.
            </summary>
            <returns>result is a string containing the text entered by the user, or the value null.</returns>
        </member>
        <member name="M:System.Console.Write(System.Boolean)">
            <summary>
            Writes the text representation of the specified Boolean value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.Char)">
            <summary>
            Writes the specified Unicode character value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.Decimal)">
            <summary>
            Writes the text representation of the specified Decimal value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.Double)">
            <summary>
            Writes the text representation of the specified double-precision floating-point value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.Int32)">
            <summary>
            Writes the text representation of the specified 32-bit signed integer value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.Int64)">
            <summary>
            Writes the text representation of the specified 64-bit signed integer value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.Object)">
            <summary>
            Writes the text representation of the specified object to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.Single)">
            <summary>
            Writes the text representation of the specified single-precision floating-point value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.String)">
            <summary>
            Writes the specified string value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.String,System.Object)">
            <summary>
            Writes the text representation of the specified object to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to write using format.</param>
        </member>
        <member name="M:System.Console.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified objects to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to write using format.</param>
            <param name="arg1">The second object to write using format.</param>
        </member>
        <member name="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified objects to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to write using format.</param>
            <param name="arg1">The second object to write using format.</param>
            <param name="arg2">The third object to write using format.</param>
        </member>
        <member name="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified objects and variable-length parameter list to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to write using format.</param>
            <param name="arg1">The second object to write using format.</param>
            <param name="arg2">The third object to write using format.</param>
            <param name="arg3">The fourth object to write using format.</param>
        </member>
        <member name="M:System.Console.Write(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg">An array of objects to write using format.</param>
        </member>
        <member name="M:System.Console.Write(System.UInt32)">
            <summary>
            Writes the text representation of the specified 32-bit unsigned integer value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.UInt64)">
            <summary>
            Writes the text representation of the specified 64-bit unsigned integer value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Write(System.Char[])">
            <summary>
            Writes the specified array of Unicode characters to the standard output stream.
            </summary>
            <param name="buffer">An array of Unicode characters.</param>
        </member>
        <member name="M:System.Console.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes the specified subarray of Unicode characters to the standard output stream.
            </summary>
            <param name="buffer">An array of Unicode characters.</param>
            <param name="index">The starting position in buffer.</param>
            <param name="count">The number of characters to write. </param>
        </member>
        <member name="M:System.Console.WriteLine">
            <summary>
            Writes the current line terminator to the standard output stream.
            </summary>
        </member>
        <member name="M:System.Console.WriteLine(System.Boolean)">
            <summary>
            Writes the text representation of the specified Boolean value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Char)">
            <summary>
            Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Decimal)">
            <summary>
            Writes the text representation of the specified Decimal value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Double)">
            <summary>
            Writes the text representation of the specified double-precision floating-point value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Int32)">
            <summary>
            Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Int64)">
            <summary>
            Writes the text representation of the specified 64-bit signed integer value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Object)">
            <summary>
            Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Type)">
            <summary>
            Writes the text representation of the specified Type, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Single)">
            <summary>
            Writes the text representation of the specified single-precision floating-point value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.String)">
            <summary>
            Writes the specified string value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.String,System.Object)">
            <summary>
            Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to write using format.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to write using format.</param>
            <param name="arg1">The second object to write using format.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to write using format.</param>
            <param name="arg1">The second object to write using format.</param>
            <param name="arg2">The third object to write using format.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified objects and variable-length parameter list, followed by the current line terminator, to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to write using format.</param>
            <param name="arg1">The second object to write using format.</param>
            <param name="arg2">The third object to write using format.</param>
            <param name="arg3">The fourth object to write using format.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg">An array of objects to write using format.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.UInt32)">
            <summary>
            Writes the text representation of the specified 32-bit unsigned integer value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.UInt64)">
            <summary>
            Writes the text representation of the specified 64-bit unsigned integer value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Char[])">
            <summary>
            Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="buffer">An array of Unicode characters.</param>
        </member>
        <member name="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes the specified subarray of Unicode characters to the standard output stream.
            </summary>
            <param name="buffer">An array of Unicode characters.</param>
            <param name="index">The starting position in buffer.</param>
            <param name="count">The number of characters to write. </param>
        </member>
        <member name="M:System.Console.WriteLine(System.Nullable{System.Decimal})">
            <summary>
            Writes the text representation of the specified nullable decimal, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:System.Console.Clear">
            <summary>
            Clears the console buffer and corresponding console window of display information.
            </summary>
        </member>
        <member name="T:System.ArraySegment`1">
            <summary>
            Delimits a section of a one-dimensional array.
            </summary>
        </member>
        <member name="P:System.ArraySegment`1.Array">
            <summary>
            Gets the original array containing the range of elements that the array segment delimits.
            </summary>
        </member>
        <member name="P:System.ArraySegment`1.Count">
            <summary>
            Gets the number of elements in the range delimited by the array segment.
            </summary>
        </member>
        <member name="P:System.ArraySegment`1.Offset">
            <summary>
            Gets the position of the first element in the range delimited by the array segment,
            relative to the start of the original array.
            </summary>
        </member>
        <member name="T:System.Base64FormattingOptions">
            <summary>
            Specifies whether relevant "Convert.ToBase64CharArray" and "Convert.ToBase64String" methods insert line breaks in their output.
            </summary>
        </member>
        <member name="T:System.Converter`2">
            <summary>
            Represents a method that converts an object from one type to another type.
            </summary>
            <typeparam name="TInput">The type of object that is to be converted.</typeparam>
            <typeparam name="TOutput">The type the input object is to be converted to.</typeparam>
            <param name="input">The object to convert.</param>
            <returns>The TOutput that represents the converted TInput.</returns>
        </member>
        <member name="M:System.Convert.ToBoolean(System.Object)">
            <summary>
            Converts the value of a specified object to an equivalent Boolean value.
            Note: Calling this method for <see cref="T:System.Char"/> and <see cref="T:System.DateTime"/> values always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to an equivalent Boolean value, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.Char"/> and <see cref="T:System.DateTime"/> values always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Object)">
            <summary>
            Converts the value of the specified object to a Unicode character.
            Note: Calling this method for <see cref="T:System.Boolean"/>, <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/> and <see cref="T:System.DateTime"/> values always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to its equivalent Unicode character, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.Boolean"/>, <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/> and <see cref="T:System.DateTime"/> values always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Boolean)">
            <summary>
            Calling this method always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Char)">
            <summary>
            Returns the specified Unicode character value; no actual conversion is performed.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.String)">
            <summary>
            Converts the value of the specified object to a Unicode character.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to its equivalent Unicode character, using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Single)">
            <summary>
            Calling this method always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Double)">
            <summary>
            Calling this method always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.Decimal)">
            <summary>
            Calling this method always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToChar(System.DateTime)">
            <summary>
            Calling this method always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToSByte(System.Object)">
            <summary>
            Converts the value of the specified object to an 8-bit signed integer.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to an 8-bit signed integer, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToSByte(System.String)">
            <summary>
            Converts the value of the specified object to an 8-bit signed integer.
            </summary>
        </member>
        <member name="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to an 8-bit signed integer, using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:System.Convert.ToByte(System.Object)">
            <summary>
            Converts the value of the specified object to an 8-bit unsigned integer.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to an 8-bit unsigned integer, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToInt16(System.Object)">
            <summary>
            Converts the value of the specified object to a 16-bit signed integer.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to a 16-bit signed integer, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToUInt16(System.Object)">
            <summary>
            Converts the value of the specified object to a 16-bit unsigned integer.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to a 16-bit unsigned integer, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToInt32(System.Object)">
            <summary>
            Converts the value of the specified object to a 32-bit signed integer.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to a 32-bit signed integer, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToUInt32(System.Object)">
            <summary>
            Converts the value of the specified object to a 32-bit unsigned integer.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to a 32-bit unsigned integer, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToInt64(System.Object)">
            <summary>
            Converts the value of the specified object to a 64-bit signed integer.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to a 64-bit signed integer, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToUInt64(System.Object)">
            <summary>
            Converts the value of the specified object to a 64-bit unsigned integer.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to a 64-bit unsigned integer, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToSingle(System.Object)">
            <summary>
            Converts the value of the specified object to a single-precision floating-point number.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to an single-precision floating-point number, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToDouble(System.Object)">
            <summary>
            Converts the value of the specified object to a double-precision floating-point number.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to an double-precision floating-point number, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToDecimal(System.Object)">
            <summary>
            Converts the value of the specified object to an equivalent decimal number.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to an equivalent decimal number, using the specified culture-specific formatting information.
            Note: Calling this method for <see cref="T:System.DateTime"/> value always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToDateTime(System.Object)">
            <summary>
            Converts the value of the specified object to a <see cref="T:System.DateTime"/> object.
            Note: Calling this method for built-in types (except <see cref="T:System.DateTime"/>, <see cref="T:System.String"/>) always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to a <see cref="T:System.DateTime"/> object, using the specified culture-specific formatting information.
            Note: Calling this method for built-in types (except <see cref="T:System.DateTime"/>, <see cref="T:System.String"/>) always throws <see cref="T:System.InvalidCastException"/>.
            </summary>
        </member>
        <member name="M:System.Convert.ToString(System.Object)">
            <summary>
            Converts the value of the specified object to its equivalent string representation.
            </summary>
        </member>
        <member name="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to its equivalent string representation using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:System.Convert.ToString(System.Char)">
            <summary>
            Converts the value of the specified object to its equivalent string representation.
            </summary>
        </member>
        <member name="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
            <summary>
            Converts the value of the specified object to its equivalent string representation using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:System.Convert.ToByte(System.String,System.Int32)">
            <summary>
            Converts the string representation of a number in a specified base to an equivalent 8-bit unsigned integer.
            </summary>
        </member>
        <member name="M:System.Convert.ToSByte(System.String,System.Int32)">
            <summary>
            Converts the string representation of a number in a specified base to an equivalent 8-bit signed integer.
            </summary>
        </member>
        <member name="M:System.Convert.ToInt16(System.String,System.Int32)">
            <summary>
            Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.
            </summary>
        </member>
        <member name="M:System.Convert.ToUInt16(System.String,System.Int32)">
            <summary>
            Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.
            </summary>
        </member>
        <member name="M:System.Convert.ToInt32(System.String,System.Int32)">
            <summary>
            Converts the string representation of a number in a specified base to an equivalent 32-bit signed integer.
            </summary>
        </member>
        <member name="M:System.Convert.ToUInt32(System.String,System.Int32)">
            <summary>
            Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.
            </summary>
        </member>
        <member name="M:System.Convert.ToInt64(System.String,System.Int32)">
            <summary>
            Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.
            </summary>
        </member>
        <member name="M:System.Convert.ToUInt64(System.String,System.Int32)">
            <summary>
            Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.
            </summary>
        </member>
        <member name="M:System.Convert.ToString(System.Byte,System.Int32)">
            <summary>
            Converts the value of an 8-bit unsigned integer to its equivalent string representation in a specified base.
            </summary>
        </member>
        <member name="M:System.Convert.ToString(System.Int16,System.Int32)">
            <summary>
            Converts the value of a 16-bit signed integer to its equivalent string representation in a specified base.
            </summary>
        </member>
        <member name="M:System.Convert.ToString(System.Int32,System.Int32)">
            <summary>
            Converts the value of a 32-bit signed integer to its equivalent string representation in a specified base.
            </summary>
        </member>
        <member name="M:System.Convert.ToString(System.Int64,System.Int32)">
            <summary>
            Converts the value of a 64-bit signed integer to its equivalent string representation in a specified base.
            </summary>
        </member>
        <member name="M:System.Convert.ToBase64String(System.Byte[])">
            <summary>
            Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.
            </summary>
        </member>
        <member name="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
            <summary>
            Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. A parameter specifies whether to insert line breaks in the return value.
            </summary>
            <param name="inArray">An array of 8-bit unsigned integers. </param><param name="options"><see cref="F:System.Base64FormattingOptions.InsertLineBreaks"/> to insert a line break every 76 characters, or <see cref="F:System.Base64FormattingOptions.None"/> to not insert line breaks.</param><exception cref="T:System.ArgumentNullException"><paramref name="inArray"/> is null. </exception><exception cref="T:System.ArgumentException"><paramref name="options"/> is not a valid <see cref="T:System.Base64FormattingOptions"/> value. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.
            </summary>
        </member>
        <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
            <summary>
            Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value.
            </summary>
        </member>
        <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
             <summary>
             Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.
             </summary>
            
             <returns>
             A 32-bit signed integer containing the number of bytes in <paramref name="outArray"/>.
             </returns>
        </member>
        <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
             <summary>
             Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, the number of elements in the input array to convert, and whether line breaks are inserted in the output array.
             </summary>
            
             <returns>
             A 32-bit signed integer containing the number of bytes in <paramref name="outArray"/>.
             </returns>
        </member>
        <member name="M:System.Convert.FromBase64String(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.
            </summary>
        </member>
        <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
            <summary>
            Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Parameters specify the subset in the input array and the number of elements to convert.
            </summary>
        </member>
        <member name="T:System.EnvironmentVariableTarget">
            <summary>
            Specifies the location where an environment variable is stored or retrieved in a set or get operation.
            </summary>
        </member>
        <member name="T:System.Environment">
            <summary>
            Provides information about, and means to manipulate, the current environment and platform. This class cannot be inherited.
            Some methods have Bridge implementation that differ from .Net.
            </summary>
        </member>
        <member name="T:System.Environment.SpecialFolder">
            <summary>
            Specifies enumerated constants used to retrieve directory paths to system special folders.
            </summary>
        </member>
        <member name="T:System.Environment.SpecialFolderOption">
            <summary>
            Specifies options to use for getting the path to a special folder.
            </summary>
        </member>
        <member name="P:System.Environment.Global">
            <summary>
            A helper property to get global scope
            </summary>
        </member>
        <member name="P:System.Environment.CommandLine">
            <summary>
            Gets the command line for this process.
            The Bridge implementation returns location.pathname + " " + location.search
            </summary>
        </member>
        <member name="P:System.Environment.CurrentDirectory">
            <summary>
            Gets or sets the fully qualified path of the current working directory.
            The Bridge implementation controls window.location.pathname.
            </summary>
        </member>
        <member name="P:System.Environment.CurrentManagedThreadId">
            <summary>
            Gets a unique identifier for the current managed thread.
            The Bridge implementation returns zero.
            </summary>
        </member>
        <member name="P:System.Environment.ExitCode">
            <summary>
            Gets or sets the exit code of the process.
            </summary>
        </member>
        <member name="P:System.Environment.HasShutdownStarted">
            <summary>
            Gets a value that indicates whether the current application domain is being unloaded or the common language runtime (CLR) is shutting down.
            The Bridge implementation returns false.
            </summary>
        </member>
        <member name="P:System.Environment.Is64BitOperatingSystem">
            <summary>
            Determines whether the current operating system is a 64-bit operating system.
            </summary>
        </member>
        <member name="P:System.Environment.Is64BitProcess">
            <summary>
            Determines whether the current process is a 64-bit process.
            The Bridge implementation returns false.
            </summary>
        </member>
        <member name="P:System.Environment.MachineName">
            <summary>
            Gets the NetBIOS name of this local computer.
            The Bridge implementation returns an empty string.
            </summary>
        </member>
        <member name="P:System.Environment.NewLine">
            <summary>
            Gets the newline string defined for this environment.
            The Bridge implementation returns "\n".
            </summary>
        </member>
        <member name="P:System.Environment.OSVersion">
            <summary>
            The Bridge implementation returns null.
            </summary>
        </member>
        <member name="P:System.Environment.ProcessorCount">
            <summary>
            Gets the number of processors on the current machine.
            The Bridge implementation returns navigator.hardwareConcurrency if exists, otherwise 1.
            </summary>
        </member>
        <member name="P:System.Environment.StackTrace">
            <summary>
            Gets current stack trace information.
            </summary>
        </member>
        <member name="P:System.Environment.SystemDirectory">
            <summary>
            Gets the fully qualified path of the system directory.
            The Bridge implementation returns an empty string;
            </summary>
        </member>
        <member name="P:System.Environment.SystemPageSize">
            <summary>
            Gets the number of bytes in the operating system's memory page.
            The Bridge implementation returns 1.
            </summary>
        </member>
        <member name="P:System.Environment.TickCount">
            <summary>
            Gets the number of milliseconds elapsed since the system started.
            The Bridge implementation returns the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.
            </summary>
        </member>
        <member name="P:System.Environment.UserDomainName">
            <summary>
            Gets the network domain name associated with the current user.
            The Bridge implementation returns an empty string;
            </summary>
        </member>
        <member name="P:System.Environment.UserInteractive">
            <summary>
            Gets a value indicating whether the current process is running in user interactive mode.
            The Bridge implementation returns true;
            </summary>
        </member>
        <member name="P:System.Environment.UserName">
            <summary>
            Gets the user name of the person who is currently logged on to the Windows operating system.
            The Bridge implementation returns an empty string;
            </summary>
        </member>
        <member name="P:System.Environment.Version">
            <summary>
            Gets a Version object that describes the major, minor, build, and revision numbers of the common language runtime.
            The Bridge implementation returns Bridge Compiler version.
            </summary>
        </member>
        <member name="P:System.Environment.WorkingSet">
            <summary>
            Gets the amount of physical memory mapped to the process context.
            The Bridge implementation returns zero.
            </summary>
        </member>
        <member name="M:System.Environment.Exit(System.Int32)">
            <summary>
            Terminates this process and returns an exit code to the operating system.
            The Bridge implementation just sets ExitCode.
            </summary>
            <param name="exitCode">The exit code to return to the operating system. Use 0 (zero) to indicate that the process completed successfully.</param>
        </member>
        <member name="M:System.Environment.ExpandEnvironmentVariables(System.String)">
            <summary>
            Replaces the name of each environment variable embedded in the specified string with the string equivalent of the value of the variable, then returns the resulting string.
            </summary>
            <param name="name">A string containing the names of zero or more environment variables. Each environment variable is quoted with the percent sign character (%).</param>
            <returns>A string with each environment variable replaced by its value.</returns>
        </member>
        <member name="M:System.Environment.FailFast(System.String)">
            <summary>
            Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message in error reporting to Microsoft.
            The Bridge implementation throws an exception with the message specified. Note it will run finally block if any.
            </summary>
            <param name="message">A message that explains why the process was terminated, or null if no explanation is provided.</param>
        </member>
        <member name="M:System.Environment.FailFast(System.String,System.Exception)">
            <summary>
            Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message and exception information in error reporting to Microsoft.
            The Bridge implementation throws an exception with the message specified. Note it will run finally block if any.
            </summary>
            <param name="message">A message that explains why the process was terminated, or null if no explanation is provided.</param>
            <param name="exception">An exception that represents the error that caused the termination. This is typically the exception in a catch block.</param>
        </member>
        <member name="M:System.Environment.GetCommandLineArgs">
            <summary>
            Returns a string array containing the command-line arguments for the current process.
            </summary>
            <returns>The Bridge implementation returns location.pathname and query parameters.</returns>
        </member>
        <member name="M:System.Environment.GetEnvironmentVariable(System.String)">
            <summary>
            Retrieves the value of an environment variable from the current process.
            </summary>
            <param name="variable">The name of the environment variable.</param>
            <returns>The value of the environment variable specified by variable, or null if the environment variable is not found.</returns>
        </member>
        <member name="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
            <summary>
            Retrieves the value of an environment variable from the current process or from the Windows operating system registry key for the current user or local machine.
            </summary>
            <param name="variable">The name of an environment variable.</param>
            <param name="target">Ignored by Bridge. One of the EnvironmentVariableTarget values.</param>
            <returns>The Bridge implementation ignores target. The value of the environment variable specified by variable, or null if the environment variable is not found.</returns>
        </member>
        <member name="M:System.Environment.GetEnvironmentVariables">
            <summary>
            Retrieves all environment variable names and their values from the current process.
            </summary>
            <returns>A dictionary that contains all environment variable names and their values; otherwise, an empty dictionary if no environment variables are found.</returns>
        </member>
        <member name="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
            <summary>
            Retrieves all environment variable names and their values from the current process, or from the Windows operating system registry key for the current user or local machine.
            </summary>
            <param name="target">One of the EnvironmentVariableTarget values.</param>
            <returns>The Bridge implementation ignores target. A dictionary that contains all environment variable names and their values; otherwise, an empty dictionary if no environment variables are found.</returns>
        </member>
        <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
            <summary>
            Gets the path to the system special folder that is identified by the specified enumeration.
            </summary>
            <param name="folder">An enumerated constant that identifies a system special folder.</param>
            <returns>The Bridge implementation returns an empty string.</returns>
        </member>
        <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
            <summary>
            Gets the path to the system special folder that is identified by the specified enumeration, and uses a specified option for accessing special folders.
            </summary>
            <param name="folder">An enumerated constant that identifies a system special folder.</param>
            <param name="option">Specifies options to use for accessing a special folder.</param>
            <returns>The Bridge implementation returns an empty string.</returns>
        </member>
        <member name="M:System.Environment.GetLogicalDrives">
            <summary>
            Returns an array of string containing the names of the logical drives on the current computer.
            </summary>
            <returns>The Bridge implementation returns an empty string[].</returns>
        </member>
        <member name="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
            <summary>
            Creates, modifies, or deletes an environment variable stored in the current process.
            </summary>
            <param name="variable">The name of an environment variable.</param>
            <param name="value">A value to assign to variable.</param>
        </member>
        <member name="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
            <summary>
            Creates, modifies, or deletes an environment variable stored in the current process or in the Windows operating system registry key reserved for the current user or local machine.
            </summary>
            <param name="variable">The name of an environment variable.</param>
            <param name="value">A value to assign to variable.</param>
            <param name="target">Ignored by Bridge. One of the enumeration values that specifies the location of the environment variable.</param>
        </member>
        <member name="T:System.EventArgs">
            <summary>
            System.EventArgs is the base class for classes containing event data.
            </summary>
        </member>
        <member name="F:System.EventArgs.Empty">
            <summary>
            Represents an event with no event data.
            </summary>
        </member>
        <member name="M:System.EventArgs.#ctor">
            <summary>
            Initializes a new instance of the System.EventArgs class.
            </summary>
        </member>
        <member name="T:System.EventHandler">
            <summary>
            Represents the method that will handle an event that has no event data.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An System.EventArgs that contains no event data.</param>
        </member>
        <member name="T:System.EventHandler`1">
            <summary>
            Represents the method that will handle an event.
            </summary>
            <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
            <param name="sender">The source of the event.</param>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="T:System.Net.WebSockets.ClientWebSocket">
            <summary>
            Provides a client for connecting to WebSocket services.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.ClientWebSocket.State">
            <summary>
            Get the WebSocket state of the <see cref="T:System.Net.WebSockets.ClientWebSocket"/> instance.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.ClientWebSocket.Options">
            <summary>
            Gets the WebSocket options for the ClientWebSocket instance.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.ClientWebSocket.CloseStatus">
            <summary>
            Gets the reason why the close handshake was initiated on ClientWebSocket instance.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.ClientWebSocket.CloseStatusDescription">
            <summary>
            Returns the optional description that describes why the close handshake
            has been initiated by the remote endpoint.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.ClientWebSocket.SubProtocol">
            <summary>
            Gets the supported WebSocket sub-protocol for the ClientWebSocket instance.
            </summary>
        </member>
        <member name="M:System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Connect to a WebSocket server as an asynchronous operation.
            </summary>
            <param name="uri">The URI of the WebSocket server to connect to.</param>
            <param name="cancellationToken">IGNORED: Connection can't be interrupted in Javascript.</param>
        </member>
        <member name="M:System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Send data on ClientWebSocket. Though this method has Async suffix, returned Task will
            always be completed(i.e. you can't track sending progress), due to Javascript limitations.
            </summary>
            <param name="buffer">The buffer containing the message to be sent.</param>
            <param name="messageType">Specifies whether the buffer is clear text or in a binary format.</param>
            <param name="endOfMessage">IGNORED: You can't define end of WebSocket message in Javascript.</param>
            <param name="cancellationToken">IGNORED: Send can't be interrupted in Javascript.</param>
        </member>
        <member name="M:System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
            <summary>
            Close the ClientWebSocket instance as an asynchronous operation.
            </summary>
            <param name="closeStatus">The WebSocket close status.</param>
            <param name="statusDescription">A description of the close status.</param>
            <param name="cancellationToken">
            A cancellation token used to propagate notification that this operation should be canceled.
            Only useful if you don't want to wait for closing response, as closing can't be interrupted once initiated.
            </param>
        </member>
        <member name="M:System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
            <summary>
            Close the ClientWebSocket instance. Though this method has Async suffix, returned Task will
            always be completed(i.e. you can't track sending progress), due to Javascript limitations.
            </summary>
            <param name="closeStatus">The WebSocket close status.</param>
            <param name="statusDescription">A description of the close status.</param>
            <param name="cancellationToken">IGNORED: Close can't be interrupted in Javascript. </param>
        </member>
        <member name="M:System.Net.WebSockets.ClientWebSocket.Abort">
            <summary>
            Aborts the connection and cancels any pending IO operations.
            </summary>
        </member>
        <member name="T:System.Net.WebSockets.ClientWebSocketOptions">
            <summary>
            Options to use with a <see cref="T:System.Net.WebSockets.ClientWebSocket"/> object.
            </summary>
        </member>
        <member name="M:System.Net.WebSockets.ClientWebSocketOptions.AddSubProtocol(System.String)">
            <summary>
            Adds a sub-protocol to be negotiated during the WebSocket connection handshake.
            </summary>
        </member>
        <member name="T:System.Net.WebSockets.WebSocketCloseStatus">
            <summary>
            Represents well known WebSocket close codes as defined in section 11.7 of the WebSocket protocol spec.
            </summary>
        </member>
        <member name="T:System.Net.WebSockets.WebSocketReceiveResult">
            <summary>
            An instance of this class represents the result of performing a single ReceiveAsync operation on a WebSocket.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.WebSocketReceiveResult.Count">
            <summary>
            Indicates the number of bytes that the WebSocket received.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.WebSocketReceiveResult.EndOfMessage">
            <summary>
            Indicates whether the message has been received completely.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.WebSocketReceiveResult.MessageType">
            <summary>
            Indicates whether the current message is a UTF-8 message or a binary message.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.WebSocketReceiveResult.CloseStatus">
            <summary>
            Indicates the reason why the remote endpoint initiated the close handshake.
            </summary>
        </member>
        <member name="P:System.Net.WebSockets.WebSocketReceiveResult.CloseStatusDescription">
            <summary>
            Returns the optional description that describes why the close handshake has been initiated by the remote endpoint.
            </summary>
        </member>
        <member name="T:System.Predicate`1">
            <summary>
            Represents the method that defines a set of criteria and determines whether the specified object meets those criteria.
            </summary>
            <returns>
            true if <paramref name="obj"/> meets the criteria defined within the method represented by this delegate; otherwise, false.
            </returns>
            <param name="obj">The object to compare against the criteria defined within the method represented by this delegate.</param><typeparam name="T">The type of the object to compare.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam><filterpriority>2</filterpriority>
        </member>
        <member name="T:System.MidpointRounding">
            <summary>
            Specifies how mathematical rounding methods should process a number that is midway between two numbers.
            </summary>
        </member>
        <member name="F:System.MidpointRounding.Up">
            <summary>
            Rounds away from zero
            </summary>
        </member>
        <member name="F:System.MidpointRounding.Down">
            <summary>
            Rounds towards zero
            </summary>
        </member>
        <member name="F:System.MidpointRounding.InfinityPos">
            <summary>
            Rounds towards Infinity
            </summary>
        </member>
        <member name="F:System.MidpointRounding.InfinityNeg">
            <summary>
            Rounds towards -Infinity
            </summary>
        </member>
        <member name="F:System.MidpointRounding.AwayFromZero">
            <summary>
            Rounds towards nearest neighbour. If equidistant, rounds away from zero
            </summary>
        </member>
        <member name="F:System.MidpointRounding.TowardsZero">
            <summary>
            Rounds towards nearest neighbour. If equidistant, rounds towards zero
            </summary>
        </member>
        <member name="F:System.MidpointRounding.ToEven">
            <summary>
            Rounds towards nearest neighbour. If equidistant, rounds towards even neighbour
            </summary>
        </member>
        <member name="F:System.MidpointRounding.Ceil">
            <summary>
            Rounds towards nearest neighbour. If equidistant, rounds towards Infinity
            </summary>
        </member>
        <member name="F:System.MidpointRounding.Floor">
            <summary>
            Rounds towards nearest neighbour. If equidistant, rounds towards -Infinity
            </summary>
        </member>
        <member name="P:System.Reflection.Assembly.FullName">
            <summary>
            Gets the display name of the assembly.
            </summary>
        </member>
        <member name="M:System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)">
            <summary>
            Creates the name of a type qualified by the display name of its assembly.
            </summary>
            <param name="assemblyName">The display name of an assembly.</param>
            <param name="typeName">The full name of a type.</param>
            <returns>The full name of the type qualified by the display name of the assembly.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetAssembly(System.Type)">
            <summary>
            Gets the currently loaded assembly in which the specified type is defined.
            </summary>
            <param name="type">An object representing a type in the assembly that will be returned.</param>
            <returns>The assembly in which the specified type is defined.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.Load(System.String)">
            <summary>
            Loads an assembly given the long form of its name.
            </summary>
            <param name="assemblyString">The long form of the assembly name.</param>
            <returns>The loaded assembly.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetType(System.String)">
            <summary>
            Gets the Type object with the specified name in the assembly instance.
            </summary>
            <param name="name">The full name of the type.</param>
            <returns>An object that represents the specified class, or null if the class is not found.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetTypes">
            <summary>
            Gets the types defined in this assembly.
            </summary>
            <returns>An array that contains all the types that are defined in this assembly.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.CreateInstance(System.String)">
            <summary>
            Locates the specified type from this assembly and creates an instance of it using the system activator, using case-sensitive search.
            </summary>
            <param name="typeName">The Type.FullName of the type to locate.</param>
            <returns>An instance of the specified type created with the default constructor; or null if typeName is not found. The type is resolved using the default binder, without specifying culture or activation attributes, and with BindingFlags set to Public or Instance.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetExecutingAssembly">
            <summary>
            Gets the assembly that contains the code that is currently executing.
            </summary>
            <returns>The assembly that contains the code that is currently executing.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetCustomAttributes">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified assembly.
            </summary>
            <returns>A collection of the custom attributes that are applied to element, or an empty collection if no such attributes exist.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Type)">
            <summary>
            Retrieves a collection of custom attributes of a specified type that are applied to a specified assembly.
            </summary>
            <param name="attributeType">The type of attribute to search for.</param>
            <returns>A collection of the custom attributes that are applied to element and that match attributeType, or an empty collection if no such attributes exist.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)">
            <summary>
            Gets all the custom attributes for this assembly.
            </summary>
            <param name="inherit">This argument is ignored for objects of type Assembly.</param>
            <returns>An array that contains the custom attributes for this assembly.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes for this assembly as specified by type.
            </summary>
            <param name="attributeType">The type for which the custom attributes are to be returned.</param>
            <param name="inherit">This argument is ignored for objects of type Assembly.</param>
            <returns>An array that contains the custom attributes for this assembly as specified by attributeType.</returns>
        </member>
        <member name="M:System.Reflection.Assembly.GetManifestResourceNames">
            <summary>
            Returns the names of all the resources in this assembly.
            </summary>
            <returns>An array that contains the names of all the resources.</returns>
        </member>
        <member name="T:System.Reflection.BindingFlags">
            <summary>
            Specifies flags that control binding and the way in which the search for members and types is conducted by reflection.
            </summary>
        </member>
        <member name="P:System.Reflection.ConstructorInfo.ScriptName">
            <summary>
            Script name of the constructor. Null for the unnamed constructor and for constructors with special implementations
            </summary>
        </member>
        <member name="P:System.Reflection.ConstructorInfo.IsStaticMethod">
            <summary>
            True if the constructor is a normal method that returns the created instance and should be invoked without the 'new' operator
            </summary>
        </member>
        <member name="P:System.Reflection.ConstructorInfo.SpecialImplementation">
            <summary>
            For constructors with a special implementation (eg. [Template]), contains a delegate that can be invoked to create an instance.
            </summary>
        </member>
        <member name="P:System.Reflection.ConstructorInfo.IsExpandParams">
            <summary>
            Whether the [ExpandParams] attribute was specified on the constructor.
            </summary>
        </member>
        <member name="P:System.Reflection.FieldInfo.ScriptName">
            <summary>
            Script name of the field
            </summary>
        </member>
        <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            Returns an array of all custom attributes applied to this member.
            </summary>
            <param name="inherit">Ignored for members. Base members will never be considered.</param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. </returns>
        </member>
        <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type"/>.
            </summary>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
            <param name="inherit">Ignored for members. Base members will never be considered.</param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</returns>
        </member>
        <member name="M:System.Reflection.MemberInfo.GetCustomAttributes">
            <summary>
            Returns an array of all custom attributes applied to this member.
            </summary>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. </returns>
        </member>
        <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type)">
            <summary>
            Returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type"/>.
            </summary>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</returns>
        </member>
        <member name="T:System.Reflection.MemberTypes">
            <summary>
            Marks each type of member that is defined as a derived class of MemberInfo.
            </summary>
        </member>
        <member name="M:System.Reflection.MethodInfo.GetReturnTypeCustomAttributes(System.Boolean)">
            <summary>
            Returns an array of all custom attributes applied to this member.
            </summary>
            <param name="inherit">Ignored for members. Base members will never be considered.</param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. </returns>
        </member>
        <member name="M:System.Reflection.MethodInfo.GetReturnTypeCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type"/>.
            </summary>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
            <param name="inherit">Ignored for members. Base members will never be considered.</param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</returns>
        </member>
        <member name="M:System.Reflection.MethodInfo.GetReturnTypeCustomAttributes">
            <summary>
            Returns an array of all custom attributes applied to this member.
            </summary>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. </returns>
        </member>
        <member name="M:System.Reflection.MethodInfo.GetReturnTypeCustomAttributes(System.Type)">
            <summary>
            Returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type"/>.
            </summary>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</returns>
        </member>
        <member name="P:System.Reflection.MethodInfo.ScriptName">
            <summary>
            Script name of the method. Null if the method has a special implementation.
            </summary>
        </member>
        <member name="P:System.Reflection.MethodInfo.SpecialImplementation">
            <summary>
            For methods with a special implementation (eg. [Template]), contains a delegate that represents the method. Null for normal methods.
            </summary>
        </member>
        <member name="P:System.Reflection.MethodInfo.IsExpandParams">
            <summary>
            Whether the [ExpandParams] attribute was specified on the method.
            </summary>
        </member>
        <member name="M:System.Reflection.MethodInfo.GetGenericArguments">
            <summary>
            Returns an array of Type objects that represent the type arguments of a generic method or the type parameters of a generic method definition.
            </summary>
            <returns>An array of Type objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.</returns>
        </member>
        <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            Returns an array of all custom attributes applied to this member.
            </summary>
            <param name="inherit">Ignored for members. Base members will never be considered.</param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. </returns>
        </member>
        <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type"/>.
            </summary>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
            <param name="inherit">Ignored for members. Base members will never be considered.</param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</returns>
        </member>
        <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes">
            <summary>
            Returns an array of all custom attributes applied to this member.
            </summary>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. </returns>
        </member>
        <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type)">
            <summary>
            Returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type"/>.
            </summary>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</returns>
        </member>
        <member name="P:System.Reflection.PropertyInfo.ScriptFieldName">
            <summary>
            For properties implemented as fields, contains the name of the field. Null for properties implemented as get and set methods.
            </summary>
        </member>
        <member name="T:System.StringComparison">
            <summary>
            Specifies the culture, case, and sort rules to be used by certain overloads of the String.Compare and String.Equals methods.
            </summary>
            <remarks>The StringComparison enumeration is used to specify whether a string comparison should use the current culture or the invariant culture, word or ordinal sort rules, and be case-sensitive or case-insensitive.</remarks>
        </member>
        <member name="F:System.StringComparison.CurrentCulture">
            <summary>
            Compare strings using culture-sensitive sort rules and the current culture.
            </summary>
        </member>
        <member name="F:System.StringComparison.CurrentCultureIgnoreCase">
            <summary>
            Compare strings using culture-sensitive sort rules, the current culture, and ignoring the case of the strings being compared.
            </summary>
        </member>
        <member name="F:System.StringComparison.InvariantCulture">
            <summary>
            Compare strings using culture-sensitive sort rules and the invariant culture.
            </summary>
        </member>
        <member name="F:System.StringComparison.InvariantCultureIgnoreCase">
            <summary>
            Compare strings using culture-sensitive sort rules, the invariant culture, and ignoring the case of the strings being compared.
            </summary>
        </member>
        <member name="F:System.StringComparison.Ordinal">
            <summary>
            Compare strings using ordinal (binary) sort rules.
            </summary>
        </member>
        <member name="F:System.StringComparison.OrdinalIgnoreCase">
            <summary>
            Compare strings using ordinal (binary) sort rules and ignoring the case of the strings being compared.
            </summary>
        </member>
        <member name="T:System.Text.EncodingInfo">
            <summary>
            Provides basic information about an encoding.
            </summary>
        </member>
        <member name="P:System.Text.EncodingInfo.CodePage">
            <summary>
            Gets the code page identifier of the encoding.
            </summary>
        </member>
        <member name="P:System.Text.EncodingInfo.Name">
            <summary>
            Gets the name registered with the Internet Assigned Numbers Authority (IANA) for the encoding.
            </summary>
        </member>
        <member name="P:System.Text.EncodingInfo.DisplayName">
            <summary>
            Gets the human-readable description of the encoding.
            </summary>
        </member>
        <member name="M:System.Text.EncodingInfo.GetEncoding">
            <summary>
            Returns a Encoding object that corresponds to the current EncodingInfo object.
            </summary>
            <returns>A Encoding object that corresponds to the current EncodingInfo object.</returns>
        </member>
        <member name="M:System.Text.EncodingInfo.GetHashCode">
            <summary>
            Returns the hash code for the current EncodingInfo object.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.Text.EncodingInfo.Equals(System.Object)">
            <summary>
            Gets a value indicating whether the specified object is equal to the current EncodingInfo object.
            </summary>
            <param name="o">An object to compare to the current EncodingInfo object.</param>
            <returns>true if value is a EncodingInfo object and is equal to the current EncodingInfo object; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.Encoding">
            <summary>
            Represents a character encoding.
            </summary>
        </member>
        <member name="P:System.Text.Encoding.CodePage">
            <summary>
            When overridden in a derived class, gets the code page identifier of the current Encoding.
            </summary>
        </member>
        <member name="P:System.Text.Encoding.EncodingName">
            <summary>
            When overridden in a derived class, gets the human-readable description of the current encoding.
            </summary>
        </member>
        <member name="P:System.Text.Encoding.Default">
            <summary>
            Gets an encoding for the operating system's current ANSI code page.
            </summary>
        </member>
        <member name="P:System.Text.Encoding.Unicode">
            <summary>
            Gets an encoding for the UTF-16 format using the little endian byte order.
            </summary>
        </member>
        <member name="P:System.Text.Encoding.ASCII">
            <summary>
            Gets an encoding for the ASCII (7-bit) character set.
            </summary>
        </member>
        <member name="P:System.Text.Encoding.BigEndianUnicode">
            <summary>
            Gets an encoding for the UTF-16 format that uses the big endian byte order.
            </summary>
        </member>
        <member name="P:System.Text.Encoding.UTF7">
            <summary>
            Gets an encoding for the UTF-7 format.
            </summary>
        </member>
        <member name="P:System.Text.Encoding.UTF8">
            <summary>
            Gets an encoding for the UTF-8 format.
            </summary>
        </member>
        <member name="P:System.Text.Encoding.UTF32">
            <summary>
            Gets an encoding for the UTF-32 format using the little endian byte order.
            </summary>
        </member>
        <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
            <summary>
            Converts an entire byte array from one encoding to another.
            </summary>
            <param name="srcEncoding">The encoding format of bytes.</param>
            <param name="dstEncoding">The target encoding format.</param>
            <param name="bytes">The bytes to convert.</param>
            <returns>An array of type Byte containing the results of converting bytes from srcEncoding to dstEncoding.</returns>
        </member>
        <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a range of bytes in a byte array from one encoding to another.
            </summary>
            <param name="srcEncoding">The encoding format of bytes.</param>
            <param name="dstEncoding">The target encoding format.</param>
            <param name="bytes">The bytes to convert.</param>
            <param name="index">The index of the first element of bytes to convert.</param>
            <param name="count">The number of bytes to convert.</param>
            <returns>An array of type Byte containing the result of converting a range of bytes in bytes from srcEncoding to dstEncoding.</returns>
        </member>
        <member name="M:System.Text.Encoding.GetEncoding(System.Int32)">
            <summary>
            Returns the encoding associated with the specified code page identifier.
            </summary>
            <param name="codepage">The code page identifier of the preferred encoding. Possible values are listed in the Code Page column of the table that appears in the Encoding class topic -or- 0 (zero), to use the default encoding.</param>
            <returns>The encoding that is associated with the specified code page.</returns>
        </member>
        <member name="M:System.Text.Encoding.GetEncoding(System.String)">
            <summary>
            Returns the encoding associated with the specified code page name.
            </summary>
            <param name="codepage">The code page name of the preferred encoding. Any value returned by the WebName property is valid. Possible values are listed in the Name column of the table that appears in the Encoding class topic.</param>
            <returns>The encoding associated with the specified code page.</returns>
        </member>
        <member name="M:System.Text.Encoding.GetEncodings">
            <summary>
            Returns an array that contains all encodings.
            </summary>
            <returns>An array that contains all encodings.</returns>
        </member>
        <member name="M:System.Text.Encoding.GetByteCount(System.Char[])">
            <summary>
            When overridden in a derived class, calculates the number of bytes produced by encoding all the characters in the specified character array.
            </summary>
            <param name="chars">The character array containing the characters to encode.</param>
            <returns>The number of bytes produced by encoding all the characters in the specified character array.</returns>
        </member>
        <member name="M:System.Text.Encoding.GetByteCount(System.String)">
            <summary>
            When overridden in a derived class, calculates the number of bytes produced by encoding the characters in the specified string.
            </summary>
            <param name="s">The string containing the set of characters to encode.</param>
            <returns>The number of bytes produced by encoding the specified characters.</returns>
        </member>
        <member name="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="index">The index of the first character to encode.</param>
            <param name="count">The number of characters to encode.</param>
            <returns>The number of bytes produced by encoding the specified characters.</returns>
        </member>
        <member name="M:System.Text.Encoding.GetBytes(System.Char[])">
            <summary>
            When overridden in a derived class, encodes all the characters in the specified character array into a sequence of bytes.
            </summary>
            <param name="chars">The character array containing the characters to encode.</param>
            <returns>A byte array containing the results of encoding the specified set of characters.</returns>
        </member>
        <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, encodes a set of characters from the specified character array into a sequence of bytes.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="index">The index of the first character to encode.</param>
            <param name="count">The number of characters to encode.</param>
            <returns>A byte array containing the results of encoding the specified set of characters.</returns>
        </member>
        <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="charIndex">The index of the first character to encode.</param>
            <param name="charCount">The number of characters to encode.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
            <returns>The actual number of bytes written into bytes.</returns>
        </member>
        <member name="M:System.Text.Encoding.GetBytes(System.String)">
            <summary>
            When overridden in a derived class, encodes all the characters in the specified string into a sequence of bytes.
            </summary>
            <param name="s">The string containing the characters to encode.</param>
            <returns>A byte array containing the results of encoding the specified set of characters.</returns>
        </member>
        <member name="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            When overridden in a derived class, encodes a set of characters from the specified string into the specified byte array.
            </summary>
            <param name="s">The string containing the set of characters to encode.</param>
            <param name="charIndex">The index of the first character to encode.</param>
            <param name="charCount">The number of characters to encode.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
            <returns>The actual number of bytes written into bytes.</returns>
        </member>
        <member name="M:System.Text.Encoding.GetCharCount(System.Byte[])">
            <summary>
            When overridden in a derived class, calculates the number of characters produced by decoding all the bytes in the specified byte array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
        </member>
        <member name="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="index">The index of the first byte to decode.</param>
            <param name="count">The number of bytes to decode.</param>
            <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
        </member>
        <member name="M:System.Text.Encoding.GetChars(System.Byte[])">
            <summary>
            When overridden in a derived class, decodes all the bytes in the specified byte array into a set of characters.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <returns>A character array containing the results of decoding the specified sequence of bytes.</returns>
        </member>
        <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a set of characters.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="index">The index of the first byte to decode.</param>
            <param name="count">The number of bytes to decode.</param>
            <returns>A character array containing the results of decoding the specified sequence of bytes.</returns>
        </member>
        <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified character array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="byteIndex">The index of the first byte to decode.</param>
            <param name="byteCount">The number of bytes to decode.</param>
            <param name="chars">The character array to contain the resulting set of characters.</param>
            <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
            <returns>The actual number of characters written into chars.</returns>
        </member>
        <member name="M:System.Text.Encoding.GetString(System.Byte[])">
            <summary>
            When overridden in a derived class, decodes all the bytes in the specified byte array into a string.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <returns>A string that contains the results of decoding the specified sequence of bytes.</returns>
        </member>
        <member name="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a string.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="index">The index of the first byte to decode.</param>
            <param name="count">The number of bytes to decode.</param>
            <returns>A string that contains the results of decoding the specified sequence of bytes.</returns>
        </member>
        <member name="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
            <summary>
            When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.
            </summary>
            <param name="charCount">The number of characters to encode.</param>
            <returns>The maximum number of bytes produced by encoding the specified number of characters.</returns>
        </member>
        <member name="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
            <summary>
            When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.
            </summary>
            <param name="byteCount">The number of bytes to decode.</param>
            <returns>The maximum number of characters produced by decoding the specified number of bytes.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Capture">
            <summary>
            Represents the results from a single successful subexpression capture.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Capture.Index">
            <summary>
            The position in the original string where the first character of the captured substring is found.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Capture.Length">
            <summary>
            Gets the length of the captured substring.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Capture.Value">
            <summary>
            Gets the captured substring from the input string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Capture.ToString">
            <summary>
            Retrieves the captured substring from the input string by calling the Value property. (Overrides Object.ToString().)
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.CaptureCollection">
            <summary>
            Represents the set of captures made by a single capturing group.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
            <summary>
            Gets a value that indicates whether access to the collection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
            <summary>
            Gets a value that indicates whether the collection is read only.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
            <summary>
            Gets the number of substrings captured by the group.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
            <summary>
            Gets an individual member of the collection.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of the collection to the given array beginning at the given index.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
            <summary>
            Provides an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Group">
            <summary>
            Represents the results from a single capturing group.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Group.Success">
            <summary>
            Gets a value indicating whether the match is successful.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Group.Captures">
            <summary>
            Gets a collection of all the captures matched by the capturing group, in innermost-leftmost-first order
            (or innermost-rightmost-first order if the regular expression is modified with the RegexOptions.RightToLeft option).
            The collection may have zero or more items.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)">
            <summary>
            Returns a Group object equivalent to the one supplied that is safe to share between multiple threads.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.GroupCollection">
            <summary>
            Returns the set of captured groups in a single match.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the GroupCollection.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
            <summary>
            Gets a value that indicates whether access to the GroupCollection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
            <summary>
            Gets a value that indicates whether the collection is read-only.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
            <summary>
            Returns the number of groups in the collection.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
            <summary>
            Enables access to a member of the collection by integer index.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
            <summary>
            Enables access to a member of the collection by string index.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of the collection to the given array beginning at the given index.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
            <summary>
            Provides an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Match">
            <summary>
            Represents the results from a single regular expression match.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Match.Empty">
            <summary>
            Gets the empty group. All failed matches return this empty match.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Match.Groups">
            <summary>
            Gets a collection of groups matched by the regular expression.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Match.NextMatch">
            <summary>
            Returns a new Match object with the results for the next match, starting at the position at which the last match ended (at the character after the last matched character).
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
            <summary>
            Returns the expansion of the specified replacement pattern.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
            <summary>
            Returns a Match instance equivalent to the one supplied that is suitable to share between multiple threads.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.MatchCollection">
            <summary>
            Represents the set of successful matches found by iteratively applying a regular expression pattern to the input string.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
            <summary>
            Gets the number of matches.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
            <summary>
            Gets a value that indicates whether the collection is read only.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
            <summary>
            Gets an individual member of the collection.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of the collection to the given array starting at the given index.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
            <summary>
            Provides an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Regex.MatchTimeout">
            <summary>
            Gets the time-out interval of the current instance.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Regex.Options">
            <summary>
            Gets the options that were passed into the Regex constructor.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
            <summary>
            Gets a value that indicates whether the regular expression searches from right to left.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
            <summary>
            Returns an array of capturing group names for the regular expression.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
            <summary>
            Returns an array of capturing group numbers that correspond to group names in an array.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
            <summary>
            Gets the group name that corresponds to the specified group number.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
            <summary>
            Returns the group number that corresponds to the specified group name.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
            <summary>
            Indicates whether the regular expression specified in the Regex constructor finds a match in a specified input string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
            <summary>
            Indicates whether the regular expression specified in the Regex constructor finds a match in the specified input string, beginning at the specified starting position in the string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
            <summary>
            Searches the specified input string for the first occurrence of the regular expression specified in the Regex constructor.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
            <summary>
            Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position in the string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
            <summary>
            Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position and searching only the specified number of characters.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
            <summary>
            Searches the specified input string for all occurrences of a regular expression.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
            <summary>
            Searches the specified input string for all occurrences of a regular expression, beginning at the specified starting position in the string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
            <summary>
            In a specified input string, replaces all strings that match a regular expression pattern with a specified replacement string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
            <summary>
            In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> delegate.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
            <summary>
            In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> delegate.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
            <summary>
            In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> delegate.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
            <summary>
            Splits an input string into an array of substrings at the positions defined by a regular expression pattern specified in the Regex constructor.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
            <summary>
            Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the Regex constructor.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
            <summary>
            Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the Regex constructor. The search for the regular expression pattern starts at a specified character position in the input string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
            <summary>
            Determines whether the specified object is equal to the current object.(Inherited from Object.)
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
            <summary>
            Converts any escaped characters in the input string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
            <summary>
            Indicates whether the specified regular expression finds a match in the specified input string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options and time-out interval.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
            <summary>
            Searches the specified input string for the first occurrence of the specified regular expression.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the input string for the first occurrence of the specified regular expression, using the specified matching options.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Searches the input string for the first occurrence of the specified regular expression, using the specified matching options and time-out interval.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
            <summary>
            Searches the specified input string for all occurrences of a specified regular expression.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options and time-out interval.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
            <summary>
            In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Specified options modify the matching operation.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> delegate.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> delegate. Specified options modify the matching operation.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            In a specified input string, replaces all substrings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> delegate. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
            <summary>
            Splits an input string into an array of substrings at the positions defined by a regular expression pattern.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Specified options modify the matching operation.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.MatchEvaluator">
            <summary>
            Represents the method that is called each time a regular expression match is found during a Replace method operation.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="T:System.Text.RegularExpressions.RegexOptions">
            <summary>
            Provides enumerated values to use to set regular expression options.
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexOptions.None">
            <summary>
            Specifies that no options are set. For more information about the default behavior of the regular expression engine, see the "Default Options" section in the Regular Expression Options topic.
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
            <summary>
            Specifies case-insensitive matching. For more information, see the "Case-Insensitive Matching " section in the Regular Expression Options topic.
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
            <summary>
            Multiline mode. Changes the meaning of ^ and $ so they match at the beginning and end, respectively, of any line, and not just the beginning and end of the entire string. For more information, see the "Multiline Mode" section in the Regular Expression Options topic.
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
            <summary>
            Specifies that the only valid captures are explicitly named or numbered groups of the form (?&lt;name&gt;…). This allows unnamed parentheses to act as noncapturing groups without the syntactic clumsiness of the expression (?:…). For more information, see the "Explicit Captures Only" section in the Regular Expression Options topic.
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
            <summary>
            Specifies single-line mode. Changes the meaning of the dot (.) so it matches every character (instead of every character except \n). For more information, see the "Single-line Mode" section in the Regular Expression Options topic.
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
            <summary>
            Eliminates unescaped white space from the pattern and enables comments marked with #. However, this value does not affect or eliminate white space in , numeric , or tokens that mark the beginning of individual . For more information, see the "Ignore White Space" section of the Regular Expression Options topic.
            </summary>
        </member>
        <member name="P:System.Text.StringBuilder.Length">
            <summary>
            Gets or sets the length of the current StringBuilder object.
            </summary>
        </member>
        <member name="P:System.Type.BaseType">
            <summary>
            Gets the type from which the current Type directly inherits.
            </summary>
        </member>
        <member name="P:System.Type.IsGenericType">
            <summary>
            Gets a value indicating whether the current type is a generic type.
            </summary>
        </member>
        <member name="P:System.Type.IsAbstract">
            <summary>
            Gets a value indicating whether the Type is abstract and must be overridden.
            </summary>
        </member>
        <member name="P:System.Type.IsSealed">
            <summary>
            Gets a value indicating whether the Type is declared sealed.
            </summary>
        </member>
        <member name="P:System.Type.DeclaringType">
            <summary>
            Gets the type that declares the current nested type or generic type parameter.
            </summary>
        </member>
        <member name="P:System.Type.IsNested">
            <summary>
            Gets a value indicating whether the current Type object represents a type whose definition is nested inside the definition of another type.
            </summary>
        </member>
        <member name="P:System.Type.Attributes">
            <summary>
            Gets the attributes associated with the Type.
            </summary>
        </member>
        <member name="P:System.Type.ContainsGenericParameters">
            <summary>
            Gets a value indicating whether the current Type object has type parameters that have not been replaced by specific types.
            </summary>
        </member>
        <member name="P:System.Type.IsGenericParameter">
            <summary>
            Gets a value indicating whether the current Type represents a type parameter in the definition of a generic type or method.
            </summary>
        </member>
        <member name="M:System.Type.GetGenericArguments">
            <summary>
            Returns an array of Type objects that represent the type arguments of a closed generic type or the type parameters of a generic type definition.
            </summary>
            <returns>An array of Type objects that represent the type arguments of a generic type. Returns an empty array if the current type is not a generic type.</returns>
        </member>
        <member name="M:System.Type.GetElementType">
            <summary>
            When overridden in a derived class, returns the Type of the object encompassed or referred to by the current array, pointer or reference type.
            </summary>
            <returns>The Type of the object encompassed or referred to by the current array, pointer, or reference type, or null if the current Type is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.</returns>
        </member>
        <member name="P:System.Type.HasElementType">
            <summary>
            Gets a value indicating whether the current Type encompasses or refers to another type; that is, whether the current Type is an array, a pointer, or is passed by reference.
            </summary>
        </member>
        <member name="M:System.Type.MakeArrayType">
            <summary>
            Returns a Type object representing a one-dimensional array of the current type, with a lower bound of zero.
            </summary>
            <returns>A Type object representing a one-dimensional array of the current type, with a lower bound of zero.</returns>
        </member>
        <member name="M:System.Type.MakeArrayType(System.Int32)">
            <summary>
            Returns a Type object representing an array of the current type, with the specified number of dimensions.
            </summary>
            <param name="rank">The number of dimensions for the array. This number must be less than or equal to 32.</param>
            <returns>An object representing an array of the current type, with the specified number of dimensions.</returns>
        </member>
        <member name="M:System.Type.GetEnumNames">
            <summary>
            Returns the names of the members of the current enumeration type.
            </summary>
            <returns>An array that contains the names of the members of the enumeration.</returns>
        </member>
        <member name="M:System.Type.GetEnumName(System.Object)">
            <summary>
            Returns the name of the constant that has the specified value, for the current enumeration type.
            </summary>
            <param name="value">The value whose name is to be retrieved.</param>
            <returns>The name of the member of the current enumeration type that has the specified value, or null if no such constant is found.</returns>
        </member>
        <member name="M:System.Type.GetEnumValues">
            <summary>
            Returns an array of the values of the constants in the current enumeration type.
            </summary>
            <returns>An array that contains the values. The elements of the array are sorted by the binary values (that is, the unsigned values) of the enumeration constants.</returns>
        </member>
        <member name="M:System.Type.GetEnumUnderlyingType">
            <summary>
            Returns the underlying type of the current enumeration type.
            </summary>
            <returns>The underlying type of the current enumeration.</returns>
        </member>
        <member name="P:System.Type.IsPublic">
            <summary>
            Gets a value indicating whether the Type is declared public.
            </summary>
        </member>
        <member name="P:System.Type.IsNotPublic">
            <summary>
            Gets a value indicating whether the Type is not declared public.
            </summary>
        </member>
        <member name="P:System.Type.IsNestedPublic">
            <summary>
            Gets a value indicating whether a class is nested and declared public.
            </summary>
        </member>
        <member name="P:System.Type.IsNestedPrivate">
            <summary>
            Gets a value indicating whether the Type is nested and declared private.
            </summary>
        </member>
        <member name="P:System.Type.IsNestedFamily">
            <summary>
            Gets a value indicating whether the Type is nested and visible only within its own family.
            </summary>
        </member>
        <member name="P:System.Type.IsNestedAssembly">
            <summary>
            Gets a value indicating whether the Type is nested and visible only within its own assembly.
            </summary>
        </member>
        <member name="F:System.Threading.Timeout.Infinite">
            <summary>
            A constant used to specify an infinite waiting period, for threading methods that accept an Int32 parameter.
            </summary>
        </member>
        <member name="T:System.Threading.TimerCallback">
            <summary>
            Represents the method that handles calls from a Timer.
            </summary>
            <param name="state">An object containing application-specific information relevant to the method invoked by this delegate, or null.</param>
            <remarks>
            Use a TimerCallback delegate to specify the method that is called by a Timer.
            This method does not execute in the thread that created the timer;
            it executes in a separate thread pool thread that is provided by the system.
            The TimerCallback delegate invokes the method once after the start time elapses,
            and continues to invoke it once per timer interval until the Dispose method is called,
            or until the Timer.Change method is called with the interval value Infinite.
            The timer delegate is specified when the timer is constructed, and cannot be changed.
            The start time for a Timer is passed in the dueTime parameter of the Timer constructors, and the period is passed in the period parameter.
            For an example that demonstrates creating and using a TimerCallback delegate, see System.Threading.Timer.
            </remarks>
        </member>
        <member name="T:System.Threading.Timer">
            <summary>
            Provides a mechanism for executing a method at specified intervals. This class cannot be inherited.
            </summary>
            <remarks>
            <example>
            <code>
            TimerCallback callback = (o) => { Html5.Window.Alert(o.ToString()); };
            var timer = new Timer(callback, "SomeState", 500, 500);
            await Task.Delay(200); // It allows the timer to work
            timer.Change(-1, 200); // Stops the timer
            timer.Dispose() // Stops the timer "forever"
            </code>
            Timer implemented based on setTimeout() see https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout#Notes.
            It's important to note that the function or code snippet cannot be executed until the thread that called setTimeout() has terminated.
            The delegate specified by the callback parameter is invoked once after dueTime elapses,
            and thereafter each time the period time interval elapses.
            If dueTime is zero (0), callback is invoked immediately. If dueTime is Timeout.Infinite, callback is not invoked;
            the timer is disabled, but can be re-enabled by calling the Change method.
            Successive setTimeout() calls with delay smaller than the "minimum delay" limit are forced to use at least the minimum delay.
            The minimum delay, DOM_MIN_TIMEOUT_VALUE, is 4 ms (stored in a preference in Firefox: dom.min_timeout_value),
            with a DOM_CLAMP_TIMEOUT_NESTING_LEVEL of 5.
            If period is zero (0) or Timeout.Infinite and dueTime is not Timeout.Infinite, callback is invoked once;
            the periodic behavior of the timer is disabled, but can be re-enabled using the Change method.
            </example>
            </remarks>
        </member>
        <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Timer class, using a 32-bit signed integer to specify the time interval.
            The delegate specified by the callback parameter is invoked once after dueTime elapses, and thereafter each time the period time interval elapses.
            If dueTime is zero (0), callback is invoked immediately.If dueTime is Timeout.Infinite, callback is not invoked; the timer is disabled, but can be re-enabled by calling the Change method.
            </summary>
            <param name="callback">A TimerCallback delegate representing a method to be executed.</param>
            <param name="state">An object containing information to be used by the callback method, or null.</param>
            <param name="dueTime">The amount of time to delay before callback is invoked, in milliseconds. Specify Timeout.Infinite to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
            <param name="period">The time interval between invocations of callback, in milliseconds. Specify Timeout.Infinite to disable periodic signaling.</param>
        </member>
        <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the Timer class, using TimeSpan values to measure time intervals.
            The delegate specified by the callback parameter is invoked once after dueTime elapses, and thereafter each time the period time interval elapses.
            If dueTime is zero (0), callback is invoked immediately.If dueTime is negative one (-1) milliseconds, callback is not invoked; the timer is disabled, but can be re-enabled by calling the Change method.
            </summary>
            <param name="callback">A TimerCallback delegate representing a method to be executed.</param>
            <param name="state">An object containing information to be used by the callback method, or null.</param>
            <param name="dueTime">The amount of time to delay before callback is invoked, in milliseconds. Specify Timeout.Infinite to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
            <param name="period">The time interval between invocations of callback, in milliseconds. Specify Timeout.Infinite to disable periodic signaling.</param>
        </member>
        <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the Timer class, using 32-bit unsigned integers to measure time intervals.
            The delegate specified by the callback parameter is invoked once after dueTime elapses, and thereafter each time the period time interval elapses.
            If dueTime is zero (0), callback is invoked immediately.If dueTime is Timeout.Infinite, callback is not invoked; the timer is disabled, but can be re-enabled by calling the Change method.
            </summary>
            <param name="callback">A TimerCallback delegate representing a method to be executed.</param>
            <param name="state">An object containing information to be used by the callback method, or null.</param>
            <param name="dueTime">The amount of time to delay before callback is invoked, in milliseconds. Specify Timeout.Infinite to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
            <param name="period">The time interval between invocations of callback, in milliseconds. Specify Timeout.Infinite to disable periodic signaling.</param>
        </member>
        <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the Timer class, using 64-bit signed integers to measure time intervals.
            The delegate specified by the callback parameter is invoked once after dueTime elapses, and thereafter each time the period time interval elapses.
            If dueTime is zero (0), callback is invoked immediately.If dueTime is Timeout.Infinite, callback is not invoked; the timer is disabled, but can be re-enabled by calling the Change method.
            </summary>
            <param name="callback">A TimerCallback delegate representing a method to be executed.</param>
            <param name="state">An object containing information to be used by the callback method, or null.</param>
            <param name="dueTime">The amount of time to delay before callback is invoked, in milliseconds. Specify Timeout.Infinite to prevent the timer from starting. Specify zero (0) to start the timer immediately.</param>
            <param name="period">The time interval between invocations of callback, in milliseconds. Specify Timeout.Infinite to disable periodic signaling.</param>
        </member>
        <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)">
            <summary>
            Initializes a new instance of the Timer class with an infinite period and an infinite due time, using the newly created Timer object as the state object.
            Call this constructor when you want to use the Timer object itself as the state object. After creating the timer, use the Change method to set the interval and due time.
            This constructor specifies an infinite due time before the first callback and an infinite interval between callbacks, in order to prevent the first callback from occurring before the Timer object is assigned to the state object.
            </summary>
            <param name="callback">A TimerCallback delegate representing a method to be executed.</param>
        </member>
        <member name="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.
            </summary>
            <param name="dueTime">The amount of time to delay before the invoking the callback method specified when the Timer was constructed, in milliseconds. Specify Timeout.Infinite to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</param>
            <param name="period">The time interval between invocations of the callback method specified when the Timer was constructed, in milliseconds. Specify Timeout.Infinite to disable periodic signaling.</param>
            <returns>true if the timer was successfully updated; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using TimeSpan values to measure time intervals.
            </summary>
            <param name="dueTime">A TimeSpan representing the amount of time to delay before invoking the callback method specified when the Timer was constructed. Specify negative one (-1) milliseconds to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</param>
            <param name="period">The time interval between invocations of the callback method specified when the Timer was constructed. Specify negative one (-1) milliseconds to disable periodic signaling.</param>
            <returns>true if the timer was successfully updated; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.
            </summary>
            <param name="dueTime">The amount of time to delay before the invoking the callback method specified when the Timer was constructed, in milliseconds. Specify Timeout.Infinite to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</param>
            <param name="period">The time interval between invocations of the callback method specified when the Timer was constructed, in milliseconds. Specify Timeout.Infinite to disable periodic signaling.</param>
            <returns>true if the timer was successfully updated; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.
            </summary>
            <param name="dueTime">The amount of time to delay before the invoking the callback method specified when the Timer was constructed, in milliseconds. Specify Timeout.Infinite to prevent the timer from restarting. Specify zero (0) to restart the timer immediately.</param>
            <param name="period">The time interval between invocations of the callback method specified when the Timer was constructed, in milliseconds. Specify Timeout.Infinite to disable periodic signaling.</param>
            <returns>true if the timer was successfully updated; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Timer.Dispose">
            <summary>
            Releases all resources used by the current instance of Timer.
            Callbacks will not be called after Timer is disposed
            </summary>
        </member>
        <member name="M:System.Threading.Thread.Sleep(System.Int32)">
            <summary>
            Suspends the current thread for the specified number of milliseconds.
            Implemented as a loop checking timeout each iteration.
            Please note maximum 1e7 iterations
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds for which the thread is suspended. Should be positive or -1. -1 works the same as 0 (not Infinite)</param>
        </member>
        <member name="M:System.Threading.Thread.Sleep(System.TimeSpan)">
            <summary>
            Suspends the current thread for the specified anout of time.
            Implemented as a loop checking timeout each iteration.
            Please note maximum 1e7 iterations
            </summary>
            <param name="timeout">The amount of time for which the thread is suspended. Should be positive or -1. -1 works the same as 0 (not Infinite)</param>
        </member>
        <member name="T:System.Threading.Tasks.IPromise">
            <summary>
            CommonJS Promise/A interface
            http://wiki.commonjs.org/wiki/Promises/A
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.IPromise.Then(System.Delegate,System.Delegate,System.Delegate)">
            <summary>
            Adds a fulfilledHandler, errorHandler to be called for completion of a promise.
            </summary>
            <param name="fulfilledHandler">The fulfilledHandler is called when the promise is fulfilled</param>
            <param name="errorHandler">The errorHandler is called when a promise fails.</param>
            <param name="progressHandler"></param>
        </member>
        <member name="T:System.Threading.Tasks.PromiseExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="M:System.Threading.Tasks.PromiseExtensions.GetAwaiter(System.Threading.Tasks.IPromise)">
             <summary>
            
             </summary>
             <param name="promise"></param>
             <returns></returns>
        </member>
        <member name="T:System.Threading.Tasks.PromiseException">
            <summary>
            This exception is used as the exception for a task created from a promise when the underlying promise fails.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.PromiseException.Arguments">
            <summary>
            Arguments supplied to the promise onError() callback.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Created">
            <summary>
            The task has been initialized but has not yet been scheduled.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.WaitingForActivation">
            <summary>
            The task is waiting to be activated and scheduled internally by the .NET Framework infrastructure.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.WaitingToRun">
            <summary>
            The task has been scheduled for execution but has not yet begun executing.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Running">
            <summary>
            The task is running but has not yet completed.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.WaitingForChildrenToComplete">
            <summary>
            The task has finished executing and is implicitly waiting for
            attached child tasks to complete.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.RanToCompletion">
            <summary>
            The task completed execution successfully.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Canceled">
            <summary>
            The task acknowledged cancellation by throwing an OperationCanceledException with its own CancellationToken
            while the token was in signaled state, or the task's CancellationToken was already signaled before the
            task started executing.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Faulted">
            <summary>
            The task completed due to an unhandled exception.
            </summary>
        </member>
        <member name="T:System.Uri">
            <summary>
            Provides an object representation of a uniform resource identifier (URI) and easy access to the parts of the URI.
            </summary>
        </member>
        <member name="M:System.Array.IndexOf(System.String)">
            <summary>
            The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.
            </summary>
            <param name="searchElement"></param>
            <returns></returns>
        </member>
        <member name="M:System.Array.IndexOf(System.String,System.Int32)">
            <summary>
            The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.
            </summary>
            <param name="searchElement"></param>
            <param name="fromIndex"></param>
            <returns></returns>
        </member>
        <member name="M:System.Array.LastIndexOf(System.String)">
            <summary>
            The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.
            </summary>
            <param name="searchString"></param>
            <returns></returns>
        </member>
        <member name="M:System.Array.LastIndexOf(System.String,System.Int32)">
            <summary>
            The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.
            </summary>
            <param name="searchString"></param>
            <param name="fromIndex"></param>
            <returns></returns>
        </member>
        <member name="M:System.Array.CreateInstance(System.Type,System.Int32)">
            <summary>
            Creates a one-dimensional Array of the specified Type and length, with zero-based indexing.
            </summary>
            <param name="elementType">The Type of the Array to create.</param>
            <param name="length">The size of the Array to create.</param>
            <returns>A new one-dimensional Array of the specified Type with the specified length, using zero-based indexing.</returns>
        </member>
        <member name="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32)">
            <summary>
            Creates a two-dimensional Array of the specified Type and dimension lengths, with zero-based indexing.
            </summary>
            <param name="elementType">The Type of the Array to create.</param>
            <param name="length1">The size of the first dimension of the Array to create.</param>
            <param name="length2">The size of the second dimension of the Array to create.</param>
            <returns>A new two-dimensional Array of the specified Type with the specified length for each dimension, using zero-based indexing.</returns>
        </member>
        <member name="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a three-dimensional Array of the specified Type and dimension lengths, with zero-based indexing.
            </summary>
            <param name="elementType">The Type of the Array to create.</param>
            <param name="length1">The size of the first dimension of the Array to create.</param>
            <param name="length2">The size of the second dimension of the Array to create.</param>
            <param name="length3">The size of the third dimension of the Array to create.</param>
            <returns>A new three-dimensional Array of the specified Type with the specified length for each dimension, using zero-based indexing.</returns>
        </member>
        <member name="M:System.Array.CreateInstance(System.Type,System.Int32[])">
            <summary>
            Creates a multidimensional Array of the specified Type and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 32-bit integers.
            </summary>
            <param name="elementType">The Type of the Array to create.</param>
            <param name="lengths">An array of 32-bit integers that represent the size of each dimension of the Array to create.</param>
            <returns>A new multidimensional Array of the specified Type with the specified length for each dimension, using zero-based indexing.</returns>
        </member>
        <member name="M:System.Char.IsUpper(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specified position in a specified string is categorized as an uppercase letter.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The position of the character to evaluate in s.</param>
            <returns>true if the character at position index in s is an uppercase letter; otherwise, false.</returns>
        </member>
        <member name="T:System.DateTime">
            <summary>
            Represents an instant in time, typically expressed as a date and time of day.
            </summary>
        </member>
        <member name="F:System.DateTime.MaxValue">
            <summary>
            Represents the largest possible value of DateTime. This field is read-only.
            </summary>
        </member>
        <member name="F:System.DateTime.MinValue">
            <summary>
            Represents the smallest possible value of DateTime. This field is read-only.
            </summary>
        </member>
        <member name="M:System.DateTime.#ctor(System.Runtime.CompilerServices.DummyTypeUsedToAddAttributeToDefaultValueTypeConstructor)">
            <summary>
            Initializes a new instance of the DateTime structure.
            </summary>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the DateTime structure to a specified number of ticks.
            </summary>
            <param name="ticks">A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.</param>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the DateTime structure to a specified number of ticks and to Coordinated Universal Time (UTC) or local time.
            </summary>
            <param name="ticks">A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.</param>
            <param name="kind">One of the enumeration values that indicates whether ticks specifies a local time, Coordinated Universal Time (UTC), or neither.</param>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DateTime structure to the specified year, month, and day.
            </summary>
            <param name="year">The year (1 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DateTime structure to the specified year, month, day, hour, minute, and second.
            </summary>
            <param name="year">The year (1 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the DateTime structure to the specified year, month, day, hour, minute, second, and Coordinated Universal Time (UTC) or local time.
            </summary>
            <param name="year">The year (1 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="kind">One of the enumeration values that indicates whether year, month, day, hour, minute, second, and millisecond specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DateTime structure to the specified year, month, day, hour, minute, second, and millisecond.
            </summary>
            <param name="year">The year (1 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="millisecond">The milliseconds (0 through 999).</param>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the DateTime structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time.
            </summary>
            <param name="year">The year (1 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="millisecond">The milliseconds (0 through 999).</param>
            <param name="kind">One of the enumeration values that indicates whether year, month, day, hour, minute, second, and millisecond specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        </member>
        <member name="P:System.DateTime.Today">
            <summary>
            Gets the current date.
            </summary>
        </member>
        <member name="P:System.DateTime.Now">
            <summary>
            Gets a DateTime object that is set to the current date and time on this computer, expressed as the local time.
            </summary>
        </member>
        <member name="P:System.DateTime.UtcNow">
            <summary>
            Gets a DateTime object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="P:System.DateTime.Kind">
            <summary>
            Gets a value that indicates whether the time represented by this instance is based on local time, Coordinated Universal Time (UTC), or neither.
            </summary>
        </member>
        <member name="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)">
            <summary>
            Creates a new DateTime object that has the same number of ticks as the specified DateTime, but is designated as either local time, Coordinated Universal Time (UTC), or neither, as indicated by the specified DateTimeKind value.
            </summary>
            <param name="value">A date and time.</param>
            <param name="kind">One of the enumeration values that indicates whether the new object represents local time, UTC, or neither.</param>
            <returns>A new object that has the same number of ticks as the object represented by the value parameter and the DateTimeKind value specified by the kind parameter.</returns>
        </member>
        <member name="P:System.DateTime.Date">
            <summary>
            Gets the date component of this instance.
            </summary>
        </member>
        <member name="P:System.DateTime.DayOfYear">
            <summary>
            Gets the day of the year represented by this instance.
            </summary>
        </member>
        <member name="P:System.DateTime.DayOfWeek">
            <summary>
            Gets the day of the week represented by this instance.
            </summary>
        </member>
        <member name="P:System.DateTime.Year">
            <summary>
            Gets the year component of the date represented by this instance.
            </summary>
        </member>
        <member name="P:System.DateTime.Month">
            <summary>
            Gets the month component of the date represented by this instance.
            </summary>
        </member>
        <member name="P:System.DateTime.Day">
            <summary>
            Gets the day of the month represented by this instance.
            </summary>
        </member>
        <member name="P:System.DateTime.Hour">
            <summary>
            Gets the hour component of the date represented by this instance.
            </summary>
        </member>
        <member name="P:System.DateTime.Millisecond">
            <summary>
            Gets the milliseconds component of the date represented by this instance.
            </summary>
        </member>
        <member name="P:System.DateTime.Minute">
            <summary>
            Gets the minute component of the date represented by this instance.
            </summary>
        </member>
        <member name="P:System.DateTime.Second">
            <summary>
            Gets the seconds component of the date represented by this instance.
            </summary>
        </member>
        <member name="P:System.DateTime.TimeOfDay">
            <summary>
            Gets the time of day for this instance.
            </summary>
        </member>
        <member name="P:System.DateTime.Ticks">
            <summary>
            Gets the number of ticks that represent the date and time of this instance.
            </summary>
        </member>
        <member name="M:System.DateTime.AddYears(System.Int32)">
            <summary>
            Returns a new DateTime that adds the specified number of years to the value of this instance.
            </summary>
            <param name="value">A number of years. The value parameter can be negative or positive.</param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the number of years represented by value.</returns>
        </member>
        <member name="M:System.DateTime.AddMonths(System.Int32)">
            <summary>
            Returns a new DateTime that adds the specified number of months to the value of this instance.
            </summary>
            <param name="months">A number of months. The months parameter can be negative or positive.</param>
            <returns>An object whose value is the sum of the date and time represented by this instance and months.</returns>
        </member>
        <member name="M:System.DateTime.AddDays(System.Double)">
            <summary>
            Returns a new DateTime that adds the specified number of days to the value of this instance.
            </summary>
            <param name="value">A number of whole and fractional days. The value parameter can be negative or positive.</param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the number of days represented by value.</returns>
        </member>
        <member name="M:System.DateTime.AddHours(System.Double)">
            <summary>
            Returns a new DateTime that adds the specified number of hours to the value of this instance.
            </summary>
            <param name="value">A number of whole and fractional hours. The value parameter can be negative or positive.</param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the number of hours represented by value.</returns>
        </member>
        <member name="M:System.DateTime.AddMinutes(System.Double)">
            <summary>
            Returns a new DateTime that adds the specified number of minutes to the value of this instance.
            </summary>
            <param name="value">A number of whole and fractional minutes. The value parameter can be negative or positive.</param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by value.</returns>
        </member>
        <member name="M:System.DateTime.AddSeconds(System.Double)">
            <summary>
            Returns a new DateTime that adds the specified number of seconds to the value of this instance.
            </summary>
            <param name="value">A number of whole and fractional seconds. The value parameter can be negative or positive.</param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by value.</returns>
        </member>
        <member name="M:System.DateTime.AddMilliseconds(System.Double)">
            <summary>
            Returns a new DateTime that adds the specified number of milliseconds to the value of this instance.
            </summary>
            <param name="value">A number of whole and fractional milliseconds. The value parameter can be negative or positive. Note that this value is rounded to the nearest integer.</param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by value.</returns>
        </member>
        <member name="M:System.DateTime.AddTicks(System.Int64)">
            <summary>
            Returns a new DateTime that adds the specified number of ticks to the value of this instance.
            </summary>
            <param name="value">A number of 100-nanosecond ticks. The value parameter can be positive or negative.</param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the time represented by value.</returns>
        </member>
        <member name="M:System.DateTime.Add(System.TimeSpan)">
            <summary>
            Returns a new DateTime that adds the value of the specified TimeSpan to the value of this instance.
            </summary>
            <param name="value">A positive or negative time interval.</param>
            <returns>An object whose value is the sum of the date and time represented by this instance and the time interval represented by value.</returns>
        </member>
        <member name="M:System.DateTime.Subtract(System.TimeSpan)">
            <summary>
            Subtracts the specified time or duration from this instance.
            </summary>
            <param name="value">The time interval to subtract.</param>
            <returns>An object that is equal to the date and time represented by this instance minus the time interval represented by value.</returns>
        </member>
        <member name="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)">
            <summary>
            Returns the number of days in the specified month and year.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month (a number ranging from 1 to 12).</param>
            <returns>The number of days in month for the specified year.</returns>
        </member>
        <member name="M:System.DateTime.IsLeapYear(System.Int32)">
            <summary>
            Returns an indication whether the specified year is a leap year.
            </summary>
            <param name="year">A 4-digit year.</param>
            <returns>true if year is a leap year; otherwise, false.</returns>
        </member>
        <member name="M:System.DateTime.IsDaylightSavingTime">
            <summary>
            Indicates whether this instance of DateTime is within the daylight saving time range for the current time zone.
            </summary>
            <returns>true if the value of the Kind property is Local or Unspecified and the value of this instance of DateTime is within the daylight saving time range for the local time zone; false if Kind is Utc.</returns>
        </member>
        <member name="M:System.DateTime.ToUniversalTime">
            <summary>
            Converts the value of the current DateTime object to Coordinated Universal Time (UTC).
            </summary>
            <returns>An object whose Kind property is Utc, and whose value is the UTC equivalent to the value of the current DateTime object, or MaxValue if the converted value is too large to be represented by a DateTime object, or MinValue if the converted value is too small to be represented by a DateTime object.</returns>
        </member>
        <member name="M:System.DateTime.ToLocalTime">
            <summary>
            Converts the value of the current DateTime object to local time.
            </summary>
            <returns>An object whose Kind property is Local, and whose value is the local time equivalent to the value of the current DateTime object, or MaxValue if the converted value is too large to be represented by a DateTime object, or MinValue if the converted value is too small to be represented as a DateTime object.</returns>
        </member>
        <member name="M:System.DateTime.ToShortDateString">
            <summary>
            Converts the value of the current DateTime object to its equivalent short date string representation.
            </summary>
            <returns>A string that contains the short date string representation of the current DateTime object.</returns>
        </member>
        <member name="M:System.DateTime.ToShortTimeString">
            <summary>
            Converts the value of the current DateTime object to its equivalent short time string representation.
            </summary>
            <returns>A string that contains the short time string representation of the current DateTime object.</returns>
        </member>
        <member name="T:System.DayOfWeek">
            <summary>
            Specifies the day of the week.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Sunday">
            <summary>
            Indicates Sunday.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Monday">
            <summary>
            Indicates Monday.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Tuesday">
            <summary>
            Indicates Tuesday.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Wednesday">
            <summary>
            Indicates Wednesday.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Thursday">
            <summary>
            Indicates Thursday.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Friday">
            <summary>
            Indicates Friday.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Saturday">
            <summary>
            Indicates Saturday.
            </summary>
        </member>
        <member name="T:System.Decimal">
            <summary>
            The decimal data type.
            http://mikemcl.github.io/decimal.js/
            </summary>
        </member>
        <member name="M:System.Decimal.Random(System.Int32)">
            <summary>
            Returns a new Decimal with a pseudo-random value equal to or greater than 0 and less than 1.
            </summary>
            <param name="dp">The return value will have dp decimal places (or less if trailing zeros are produced). If dp is omitted then the number of decimal places will default to the current precision setting.</param>
            <returns></returns>
        </member>
        <member name="M:System.Decimal.SetConfig(System.DecimalConfig)">
            <summary>
            Configures the 'global' settings for this particular Decimal constructor.
            </summary>
            <param name="config"></param>
        </member>
        <member name="F:System.DecimalConfig.Precision">
            <summary>
            Default value: 20
            The maximum number of significant digits of the result of a calculation or base conversion.
            </summary>
        </member>
        <member name="F:System.DecimalConfig.Rounding">
            <summary>
            The default rounding mode used when rounding the result of a calculation or base conversion to precision significant digits, and when rounding the return value of the round, toDecimalPlaces, toExponential, toFixed, toFormat, toNearest, toPrecision and toSignificantDigits methods.
            </summary>
        </member>
        <member name="F:System.DecimalConfig.ToExpNeg">
            <summary>
            The negative exponent value at and below which toString returns exponential notation. Default value: -7
            </summary>
        </member>
        <member name="F:System.DecimalConfig.ToExpPos">
            <summary>
            The positive exponent value at and above which toString returns exponential notation. Default value: 20
            </summary>
        </member>
        <member name="F:System.DecimalConfig.MinE">
            <summary>
            The negative exponent limit, i.e. the exponent value below which underflow to zero occurs. Default value: -9e15
            </summary>
        </member>
        <member name="F:System.DecimalConfig.MaxE">
            <summary>
            The positive exponent limit, i.e. the exponent value above which overflow to Infinity occurs. Default value: 9e15
            </summary>
        </member>
        <member name="F:System.DecimalConfig.Errors">
            <summary>
            The value that determines whether Decimal Errors are thrown. If errors is false, this library will not throw errors.
            </summary>
        </member>
        <member name="F:System.DecimalConfig.Crypto">
            <summary>
            The value that determines whether cryptographically-secure pseudo-random number generation is used. Default value: false
            </summary>
        </member>
        <member name="F:System.DecimalConfig.Modulo">
            <summary>
            The modulo mode used when calculating the modulus: a mod n.
            </summary>
        </member>
        <member name="F:System.DecimalConfig.Format">
            <summary>
            The format object configures the format of the string returned by the toFormat method.
            </summary>
        </member>
        <member name="F:System.DecimalFormatConfig.DecimalSeparator">
            <summary>
            the decimal separator
            </summary>
        </member>
        <member name="F:System.DecimalFormatConfig.GroupSeparator">
            <summary>
            the grouping separator of the integer part of the number
            </summary>
        </member>
        <member name="F:System.DecimalFormatConfig.GroupSize">
            <summary>
            the primary grouping size of the integer part of the number
            </summary>
        </member>
        <member name="F:System.DecimalFormatConfig.SecondaryGroupSize">
            <summary>
            the secondary grouping size of the integer part of the number
            </summary>
        </member>
        <member name="F:System.DecimalFormatConfig.FractionGroupSeparator">
            <summary>
            the grouping separator of the fraction part of the number
            </summary>
        </member>
        <member name="F:System.DecimalFormatConfig.FractionGroupSize">
            <summary>
            the grouping size of the fraction part of the number
            </summary>
        </member>
        <member name="P:System.Exception.Data">
            <summary>
            Gets a collection of key/value pairs that provide additional user-defined information about the exception.
            </summary>
        </member>
        <member name="P:System.Exception.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="P:System.Exception.InnerException">
            <summary>
            Gets the Exception instance that caused the current exception.
            </summary>
        </member>
        <member name="M:System.Exception.GetBaseException">
            <summary>
            Retrieves the lowest exception (inner most) for the given Exception.
            This will traverse exceptions using the innerException property.
            </summary>
            <returns>The first exception thrown in a chain of exceptions. If the InnerException property of the current exception is a null reference</returns>
        </member>
        <member name="P:System.Exception.StackTrace">
            <summary>
            Gets a string representation of the immediate frames on the call stack.
            </summary>
        </member>
        <member name="M:System.Math.Max(System.Byte,System.Byte)">
            <summary>
            Returns the larger of two 8-bit unsigned integers.
            </summary>
            <param name="val1">The first of two 8-bit unsigned integers to compare.</param>
            <param name="val2">The second of two 8-bit unsigned integers to compare.</param>
            <returns>Parameter val1 or val2, whichever is larger.</returns>
        </member>
        <member name="M:System.Math.Max(System.SByte,System.SByte)">
            <summary>
            Returns the larger of two 8-bit signed integers.
            </summary>
            <param name="val1">The first of two 8-bit signed integers to compare.</param>
            <param name="val2">The second of two 8-bit signed integers to compare.</param>
            <returns>Parameter val1 or val2, whichever is larger.</returns>
        </member>
        <member name="M:System.Math.Max(System.Int16,System.Int16)">
            <summary>
            Returns the larger of two 16-bit signed integers.
            </summary>
            <param name="val1">The first of two 16-bit signed integers to compare.</param>
            <param name="val2">The second of two 16-bit signed integers to compare.</param>
            <returns>Parameter val1 or val2, whichever is larger.</returns>
        </member>
        <member name="M:System.Math.Max(System.UInt16,System.UInt16)">
            <summary>
            Returns the larger of two 16-bit unsigned integers.
            </summary>
            <param name="val1">The first of two 16-bit unsigned integers to compare.</param>
            <param name="val2">The second of two 16-bit unsigned integers to compare.</param>
            <returns>Parameter val1 or val2, whichever is larger.</returns>
        </member>
        <member name="M:System.Math.Max(System.Single,System.Single)">
            <summary>
            Returns the larger of two single-precision floating-point numbers.
            </summary>
            <param name="val1">The first of two single-precision floating-point numbers to compare.</param>
            <param name="val2">The second of two single-precision floating-point numbers to compare.</param>
            <returns>Parameter val1 or val2, whichever is larger.</returns>
        </member>
        <member name="M:System.Math.Max(System.Int32,System.Int32)">
            <summary>
            Returns the larger of two 32-bit signed integers.
            </summary>
            <param name="val1">The first of two 32-bit signed integers to compare.</param>
            <param name="val2">The second of two 32-bit signed integers to compare.</param>
            <returns>Parameter val1 or val2, whichever is larger.</returns>
        </member>
        <member name="M:System.Math.Max(System.UInt32,System.UInt32)">
            <summary>
            Returns the larger of two 32-bit unsigned integers.
            </summary>
            <param name="val1">The first of two 32-bit unsigned integers to compare.</param>
            <param name="val2">The second of two 32-bit unsigned integers to compare.</param>
            <returns>Parameter val1 or val2, whichever is larger.</returns>
        </member>
        <member name="M:System.Math.Max(System.Double,System.Double)">
            <summary>
            Returns the larger of two double-precision floating-point numbers.
            </summary>
            <param name="val1">The first of two double-precision floating-point numbers to compare.</param>
            <param name="val2">The second of two double-precision floating-point numbers to compare.</param>
            <returns>Parameter val1 or val2, whichever is larger.</returns>
        </member>
        <member name="M:System.Math.Max(System.Int64,System.Int64)">
            <summary>
            Returns the larger of two 64-bit signed integers.
            </summary>
            <param name="val1">The first of two 64-bit signed integers to compare.</param>
            <param name="val2">The second of two 64-bit signed integers to compare.</param>
            <returns>Parameter val1 or val2, whichever is larger.</returns>
        </member>
        <member name="M:System.Math.Max(System.UInt64,System.UInt64)">
            <summary>
            Returns the larger of two 64-bit unsigned integers.
            </summary>
            <param name="val1">The first of two 64-bit unsigned integers to compare.</param>
            <param name="val2">The second of two 64-bit unsigned integers to compare.</param>
            <returns>Parameter val1 or val2, whichever is larger.</returns>
        </member>
        <member name="M:System.Math.Max(System.Decimal,System.Decimal)">
            <summary>
            Returns the larger of two decimal numbers.
            </summary>
            <param name="val1">The first of two decimal numbers to compare.</param>
            <param name="val2">The second of two decimal numbers to compare.</param>
            <returns>Parameter val1 or val2, whichever is larger.</returns>
        </member>
        <member name="M:System.Math.Min(System.Byte,System.Byte)">
            <summary>
            Returns the smaller of two 8-bit unsigned integers.
            </summary>
            <param name="val1">The first of two 8-bit unsigned integers to compare.</param>
            <param name="val2">The second of two 8-bit unsigned integers to compare.</param>
            <returns>Parameter val1 or val2, whichever is smaller.</returns>
        </member>
        <member name="M:System.Math.Min(System.SByte,System.SByte)">
            <summary>
            Returns the smaller of two 8-bit signed integers.
            </summary>
            <param name="val1">The first of two 8-bit signed integers to compare.</param>
            <param name="val2">The second of two 8-bit signed integers to compare.</param>
            <returns>Parameter val1 or val2, whichever is smaller.</returns>
        </member>
        <member name="M:System.Math.Min(System.Int16,System.Int16)">
            <summary>
            Returns the smaller of two 16-bit signed integers.
            </summary>
            <param name="val1">The first of two 16-bit signed integers to compare.</param>
            <param name="val2">The second of two 16-bit signed integers to compare.</param>
            <returns>Parameter val1 or val2, whichever is smaller.</returns>
        </member>
        <member name="M:System.Math.Min(System.UInt16,System.UInt16)">
            <summary>
            Returns the smaller of two 16-bit unsigned integers.
            </summary>
            <param name="val1">The first of two 16-bit unsigned integers to compare.</param>
            <param name="val2">The second of two 16-bit unsigned integers to compare.</param>
            <returns>Parameter val1 or val2, whichever is smaller.</returns>
        </member>
        <member name="M:System.Math.Min(System.Single,System.Single)">
            <summary>
            Returns the smaller of two single-precision floating-point numbers.
            </summary>
            <param name="val1">The first of two single-precision floating-point numbers to compare.</param>
            <param name="val2">The second of two single-precision floating-point numbers to compare.</param>
            <returns>Parameter val1 or val2, whichever is smaller.</returns>
        </member>
        <member name="M:System.Math.Min(System.Int32,System.Int32)">
            <summary>
            Returns the smaller of two 32-bit signed integers.
            </summary>
            <param name="val1">The first of two 32-bit signed integers to compare.</param>
            <param name="val2">The second of two 32-bit signed integers to compare.</param>
            <returns>Parameter val1 or val2, whichever is smaller.</returns>
        </member>
        <member name="M:System.Math.Min(System.UInt32,System.UInt32)">
            <summary>
            Returns the smaller of two 32-bit unsigned integers.
            </summary>
            <param name="val1">The first of two 32-bit unsigned integers to compare.</param>
            <param name="val2">The second of two 32-bit unsigned integers to compare.</param>
            <returns>Parameter val1 or val2, whichever is smaller.</returns>
        </member>
        <member name="M:System.Math.Min(System.Double,System.Double)">
            <summary>
            Returns the smaller of two double-precision floating-point numbers.
            </summary>
            <param name="val1">The first of two double-precision floating-point numbers to compare.</param>
            <param name="val2">The second of two double-precision floating-point numbers to compare.</param>
            <returns>Parameter val1 or val2, whichever is smaller.</returns>
        </member>
        <member name="M:System.Math.Min(System.Int64,System.Int64)">
            <summary>
            Returns the smaller of two 64-bit signed integers.
            </summary>
            <param name="val1">The first of two 64-bit signed integers to compare.</param>
            <param name="val2">The second of two 64-bit signed integers to compare.</param>
            <returns>Parameter val1 or val2, whichever is smaller.</returns>
        </member>
        <member name="M:System.Math.Min(System.UInt64,System.UInt64)">
            <summary>
            Returns the smaller of two 64-bit unsigned integers.
            </summary>
            <param name="val1">The first of two 64-bit unsigned integers to compare.</param>
            <param name="val2">The second of two 64-bit unsigned integers to compare.</param>
            <returns>Parameter val1 or val2, whichever is smaller.</returns>
        </member>
        <member name="M:System.Math.Min(System.Decimal,System.Decimal)">
            <summary>
            Returns the smaller of two decimal numbers.
            </summary>
            <param name="val1">The first of two decimal numbers to compare.</param>
            <param name="val2">The second of two decimal numbers to compare.</param>
            <returns>Parameter val1 or val2, whichever is smaller.</returns>
        </member>
        <member name="P:System.AttributeUsageAttribute.AllowMultiple">
            <summary>Gets or sets a Boolean value indicating whether more than one instance of the indicated attribute can be specified for a single program element.</summary>
            <returns>true if more than one instance is allowed to be specified; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:System.AttributeUsageAttribute.Inherited">
            <summary>Gets or sets a Boolean value indicating whether the indicated attribute can be inherited by derived classes and overriding members.</summary>
            <returns>true if the attribute can be inherited by derived classes and overriding members; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:System.AttributeUsageAttribute.ValidOn">
            <summary>Gets a set of values identifying which program elements that the indicated attribute can be applied to.</summary>
            <returns>One or several <see cref="T:System.AttributeTargets"/> values. The default is All.</returns>
        </member>
        <member name="T:System.String">
            <summary>
            The String global object is a constructor for strings, or a sequence of characters.
            </summary>
        </member>
        <member name="P:System.String.Length">
            <summary>
            Gets the number of characters in the current String object.
            </summary>
        </member>
        <member name="F:System.String.Empty">
            <summary>
            Represents the empty string. This field is read-only.
            </summary>
        </member>
        <member name="M:System.String.#ctor">
            <summary>
            The String global object is a constructor for strings, or a sequence of characters.
            </summary>
        </member>
        <member name="M:System.String.#ctor(System.Char,System.Int32)">
            <summary>
            Constructs a string from the value indicated by a specified character repeated a specified number of times.
            </summary>
            <param name="c">A character.</param>
            <param name="count">The number of times the character occurs.</param>
        </member>
        <member name="M:System.String.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether the specified string is null or an Empty string.
            </summary>
            <param name="value">The string to test. </param>
            <returns>true if the value parameter is null or an empty string (""); otherwise, false.</returns>
        </member>
        <member name="M:System.String.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether a specified string is null, empty, or consists only of white-space characters.
            </summary>
            <param name="value">The string to test.</param>
            <returns>true if the value parameter is null or String.Empty, or if value consists exclusively of white-space characters. </returns>
        </member>
        <member name="M:System.String.Equals(System.String,System.String)">
            <summary>
            Determines whether two specified String objects have the same value.
            </summary>
            <param name="a">The first string to compare, or null. </param>
            <param name="b">The second string to compare, or null. </param>
            <returns>true if the value of a is the same as the value of b; otherwise, false. If both a and b are null, the method returns true.</returns>
        </member>
        <member name="M:System.String.Equals(System.String,System.String,System.StringComparison)">
            <summary>
            Determines whether two specified String objects have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.
            </summary>
            <param name="a">The first string to compare, or null. </param>
            <param name="b">The second string to compare, or null. </param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the comparison.</param>
            <returns>true if the value of a is the same as the value of b; otherwise, false. If both a and b are null, the method returns true.</returns>
        </member>
        <member name="M:System.String.Equals(System.String,System.StringComparison)">
            <summary>
            Determines whether this string and a specified String object have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.
            </summary>
            <param name="value">The string to compare to this instance.</param>
            <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared. </param>
            <returns>true if the value of the value parameter is the same as this string; otherwise, false.</returns>
        </member>
        <member name="M:System.String.Equals(System.String)">
            <summary>
            Determines whether this instance and another specified String object have the same value.
            </summary>
            <param name="value">The string to compare to this instance.</param>
            <returns>true if the value of the value parameter is the same as this string; otherwise, false.</returns>
        </member>
        <member name="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Concatenates the members of a constructed IEnumerable collection of type String.
            </summary>
            <param name="values">A collection object that implements IEnumerable and whose generic type argument is String.</param>
            <returns>The concatenated strings in values, or String.Empty if values is an empty IEnumerable(Of String).</returns>
        </member>
        <member name="M:System.String.Concat(System.String,System.String)">
            <summary>
            Concatenates two specified instances of String.
            </summary>
            <param name="str0">The first string to concatenate.</param>
            <param name="str1">The second string to concatenate.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Concat(System.String,System.String,System.String)">
            <summary>
            Concatenates two specified instances of String.
            </summary>
            <param name="str0">The first string to concatenate.</param>
            <param name="str1">The second string to concatenate.</param>
            <param name="str2">The third string to concatenate.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
            <summary>
            Concatenates two specified instances of String.
            </summary>
            <param name="str0">The first string to concatenate.</param>
            <param name="str1">The second string to concatenate.</param>
            <param name="str2">The third string to concatenate..</param>
            <param name="str3">The fourth string to concatenate.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Concat(System.String[])">
            <summary>
            Concatenates the elements of a specified String array.
            </summary>
            <param name="values">An array of string instances.</param>
            <returns>The concatenated elements of values.</returns>
        </member>
        <member name="M:System.String.Concat(System.Object)">
            <summary>
            Creates the string representation of a specified object.
            </summary>
            <param name="arg0">The object to represent, or null.</param>
            <returns>The string representation of the value of arg0, or String.Empty if arg0 is null.</returns>
        </member>
        <member name="M:System.String.Concat(System.Object,System.Object)">
            <summary>
            Concatenates the string representations of two specified objects.
            </summary>
            <param name="arg0">The first object to concatenate.</param>
            <param name="arg1">The second object to concatenate.</param>
            <returns>The concatenated string representations of the values of arg0 and arg1.</returns>
        </member>
        <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
            <summary>
            The concat() method combines the text of two or more strings and returns a new string.
            </summary>
            <param name="arg0">The first object to concatenate.</param>
            <param name="arg1">The second object to concatenate.</param>
            <param name="arg2">The third object to concatenate.</param>
            <returns>The concatenated string representations of the values of arg0, arg1, and arg2.</returns>
        </member>
        <member name="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The concat() method combines the text of two or more strings and returns a new string.
            </summary>
            <param name="arg0">The first object to concatenate.</param>
            <param name="arg1">The second object to concatenate.</param>
            <param name="arg2">The third object to concatenate.</param>
            <param name="arg3">The fourth object to concatenate.</param>
            <returns>The concatenated string representation of each value in the parameter list.</returns>
        </member>
        <member name="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object,System.Object[])">
            <summary>
            The concat() method combines the text of two or more strings and returns a new string.
            </summary>
            <param name="arg0">The first object to concatenate.</param>
            <param name="arg1">The second object to concatenate.</param>
            <param name="arg2">The third object to concatenate.</param>
            <param name="arg3">The fourth object to concatenate.</param>
            <param name="args">An optional comma-delimited list of one or more additional objects to concatenate.</param>
            <returns>The concatenated string representation of each value in the parameter list.</returns>
        </member>
        <member name="M:System.String.Concat(System.Object[])">
            <summary>
            Concatenates the string representations of the elements in a specified Object array.
            </summary>
            <param name="args">An object array that contains the elements to concatenate.</param>
            <returns>The concatenated string representations of the values of the elements in args.</returns>
        </member>
        <member name="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates the members of an IEnumerable&lt;T&gt; implementation.
            </summary>
            <typeparam name="T">The type of the members of values.</typeparam>
            <param name="values">A collection object that implements the IEnumerable&lt;T&gt; interface.</param>
            <returns>The concatenated members in values.</returns>
        </member>
        <member name="M:System.String.Compare(System.String,System.String)">
            <summary>
            Compares two specified String objects and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="strB">The second string to compare.</param>
            <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</returns>
        </member>
        <member name="M:System.String.Compare(System.String,System.String,System.Boolean)">
            <summary>
            The compare() method compares two specified String objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="strB">The second string to compare.</param>
            <param name="ignoreCase">true to ignore case during the comparison; otherwise, false.</param>
            <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</returns>
        </member>
        <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Compares substrings of two specified String objects and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="indexA">The position of the substring within strA.</param>
            <param name="strB">The second string to compare.</param>
            <param name="indexB">The position of the substring within strB.</param>
            <param name="length">The maximum number of characters in the substrings to compare.</param>
            <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.</returns>
        </member>
        <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            The compare() method compares substrings of two specified String objects and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="indexA">The position of the substring within strA.</param>
            <param name="strB">The second string to compare.</param>
            <param name="indexB">The position of the substring within strB.</param>
            <param name="length">The maximum number of characters in the substrings to compare.</param>
            <param name="ignoreCase">true to ignore case during the comparison; otherwise, false.</param>
            <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</returns>
        </member>
        <member name="M:System.String.Compare(System.String,System.String,System.StringComparison)">
            <summary>
            Compares two specified String objects using the specified rules, and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="strB">The second string to compare.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</returns>
        </member>
        <member name="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Compares two specified String objects, ignoring or honoring their case, and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="strB">The second string to compare.</param>
            <param name="ignoreCase">true to ignore case during the comparison; otherwise, false.</param>
            <param name="culture">An object that supplies culture-specific comparison information.</param>
            <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</returns>
        </member>
        <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Compares substrings of two specified String objects using the specified rules, and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="strA">The first string to use in the comparison.</param>
            <param name="indexA">The position of the substring within strA.</param>
            <param name="strB">The second string to use in the comparison.</param>
            <param name="indexB">The position of the substring within strB.</param>
            <param name="length">The maximum number of characters in the substrings to compare.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules to use in the comparison.</param>
            <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</returns>
        </member>
        <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Compares substrings of two specified String objects, ignoring or honoring their case and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="strA">The first string to use in the comparison.</param>
            <param name="indexA">The position of the substring within strA.</param>
            <param name="strB">The second string to use in the comparison.</param>
            <param name="indexB">The position of the substring within strB.</param>
            <param name="length">The maximum number of characters in the substrings to compare.</param>
            <param name="ignoreCase">true to ignore case during the comparison; otherwise, false.</param>
            <param name="culture">An object that supplies culture-specific comparison information.</param>
            <returns>An integer that indicates the lexical relationship between the two comparands.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.Char)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character in this string.
            </summary>
            <param name="value">A Unicode character to seek.</param>
            <returns>The zero-based index position of value if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.Char,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.
            </summary>
            <param name="value">A Unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of value from the start of the string if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.String)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in this instance.
            </summary>
            <param name="value">The string to seek.</param>
            <returns>The zero-based index position of value if that string is found, or -1 if it is not. If value is String.Empty, the return value is 0.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.String,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position.
            </summary>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of value from the start of the current instance if that string is found, or -1 if it is not. If value is String.Empty, the return value is startIndex.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position and examines a specified number of character positions.
            </summary>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
            <summary>
            The indexOf() method returns the index within the calling String object of the first occurrence of the specified value. The search starts at a specified character position and
            examines a specified number of character positions. Returns -1 if the value is not found.
            </summary>
            <param name="searchValue">A string representing the value to search for.</param>
            <param name="fromIndex">The location within the calling string to start the search from.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.IndexOf(System.String,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in the current String object. A parameter specifies the type of search to use for the specified string.
            </summary>
            <param name="value">The string to seek.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>The index position of the value parameter if that string is found, or -1 if it is not. If value is Empty, the return value is 0.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in the current String object. Parameters specify the starting search position in the current string and the type of search to use for the specified string.
            </summary>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>The zero-based index position of the value parameter from the start of the current instance if that string is found, or -1 if it is not. If value is Empty, the return value is startIndex.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in the current String object. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.
            </summary>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>The zero-based index position of the value parameter from the start of the current instance if that string is found, or -1 if it is not. If value is Empty, the return value is startIndex.</returns>
        </member>
        <member name="M:System.String.LastIndexOf(System.Char)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.
            </summary>
            <param name="value">The Unicode character to seek.</param>
            <returns>The zero-based index position of value if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.
            </summary>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The starting position of the search. The search proceeds from startIndex toward the beginning of this instance.</param>
            <returns>The zero-based index position of value if that character is found, or -1 if it is not found or if the current instance equals String.Empty.</returns>
        </member>
        <member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.
            </summary>
            <param name="value">The Unicode character to seek.</param>
            <param name="startIndex">The starting position of the search. The search proceeds from startIndex toward the beginning of this instance.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>The zero-based index position of value if that character is found, or -1 if it is not found or if the current instance equals String.Empty.</returns>
        </member>
        <member name="M:System.String.LastIndexOf(System.String)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified string within this instance.
            </summary>
            <param name="value">The string to seek.</param>
            <returns>The zero-based starting index position of value if that string is found, or -1 if it is not. If value is String.Empty, the return value is the last index position in this instance.</returns>
        </member>
        <member name="M:System.String.LastIndexOf(System.String,System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.
            </summary>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position. The search proceeds from startIndex toward the beginning of this instance.</param>
            <returns>The zero-based starting index position of value if that string is found, or -1 if it is not found or if the current instance equals String.Empty. If value is String.Empty, the return value is the smaller of startIndex and the last index position in this instance.</returns>
        </member>
        <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.
            </summary>
            <param name="value">The string to seek.</param>
            <param name="startIndex">The search starting position. The search proceeds from startIndex toward the beginning of this instance.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>The zero-based starting index position of value if that string is found, or -1 if it is not found or if the current instance equals String.Empty. If value is Empty, the return value is the smaller of startIndex and the last index position in this instance.</returns>
        </member>
        <member name="M:System.String.LastIndexOfAny(System.Char[])">
            <summary>
            Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.
            </summary>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <returns>The index position of the last occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found.</returns>
        </member>
        <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string.
            </summary>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <param name="startIndex">The search starting position. The search proceeds from startIndex toward the beginning of this instance.</param>
            <returns>The index position of the last occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found or if the current instance equals String.Empty.</returns>
        </member>
        <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.
            </summary>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <param name="startIndex">The search starting position. The search proceeds from startIndex toward the beginning of this instance.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>The index position of the last occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found or if the current instance equals String.Empty.</returns>
        </member>
        <member name="M:System.String.Replace(System.Char,System.Char)">
            <summary>
            Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.
            </summary>
            <param name="oldChar">The Unicode character to be replaced.</param>
            <param name="newChar">The Unicode character to replace all occurrences of oldChar.</param>
            <returns>A string that is equivalent to this instance except that all instances of oldChar are replaced with newChar. If oldChar is not found in the current instance, the method returns the current instance unchanged.</returns>
        </member>
        <member name="M:System.String.Replace(System.String,System.String)">
            <summary>
            Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.
            </summary>
            <param name="oldValue">The string to be replaced.</param>
            <param name="newValue">The string to replace all occurrences of oldValue.</param>
            <returns>A string that is equivalent to the current string except that all instances of oldValue are replaced with newValue. If oldValue is not found in the current instance, the method returns the current instance unchanged.</returns>
        </member>
        <member name="M:System.String.Split(System.Char[])">
            <summary>
            Splits a string into substrings that are based on the characters in an array.
            </summary>
            <param name="separator">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or null.</param>
            <returns>An array whose elements contain the substrings from this instance that are delimited by one or more characters in separator. For more information, see the Remarks section.</returns>
        </member>
        <member name="M:System.String.Split(System.Char[],System.Int32)">
            <summary>
            Splits a string into a maximum number of substrings based on the characters in an array. You also specify the maximum number of substrings to return.
            </summary>
            <param name="separator">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or null.</param>
            <param name="count">The maximum number of substrings to return.</param>
            <returns>An array whose elements contain the substrings in this instance that are delimited by one or more characters in separator. For more information, see the Remarks section.</returns>
        </member>
        <member name="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
            <summary>
            Splits a string into a maximum number of substrings based on the characters in an array.
            </summary>
            <param name="separator">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or null.</param>
            <param name="count">The maximum number of substrings to return.</param>
            <param name="options">StringSplitOptions.RemoveEmptyEntries to omit empty array elements from the array returned; or StringSplitOptions.None to include empty array elements in the array returned.</param>
            <returns>An array whose elements contain the substrings in this string that are delimited by one or more characters in separator. For more information, see the Remarks section.</returns>
        </member>
        <member name="M:System.String.Split(System.Char[],System.StringSplitOptions)">
            <summary>
            Splits a string into substrings based on the characters in an array. You can specify whether the substrings include empty array elements.
            </summary>
            <param name="separator">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or null.</param>
            <param name="options">StringSplitOptions.RemoveEmptyEntries to omit empty array elements from the array returned; or StringSplitOptions.None to include empty array elements in the array returned.</param>
            <returns>An array whose elements contain the substrings in this string that are delimited by one or more characters in separator. For more information, see the Remarks section.</returns>
        </member>
        <member name="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
            <summary>
            Splits a string into a maximum number of substrings based on the strings in an array. You can specify whether the substrings include empty array elements.
            </summary>
            <param name="separator">A string array that delimits the substrings in this string, an empty array that contains no delimiters, or null.</param>
            <param name="count">The maximum number of substrings to return.</param>
            <param name="options">StringSplitOptions.RemoveEmptyEntries to omit empty array elements from the array returned; or StringSplitOptions.None to include empty array elements in the array returned.</param>
            <returns>An array whose elements contain the substrings in this string that are delimited by one or more strings in separator. For more information, see the Remarks section.</returns>
        </member>
        <member name="M:System.String.Split(System.String[],System.StringSplitOptions)">
            <summary>
            Splits a string into substrings based on the strings in an array. You can specify whether the substrings include empty array elements.
            </summary>
            <param name="separator">A string array that delimits the substrings in this string, an empty array that contains no delimiters, or null.</param>
            <param name="options">StringSplitOptions.RemoveEmptyEntries to omit empty array elements from the array returned; or StringSplitOptions.None to include empty array elements in the array returned.</param>
            <returns>An array whose elements contain the substrings in this string that are delimited by one or more strings in separator. For more information, see the Remarks section.</returns>
        </member>
        <member name="M:System.String.Substring(System.Int32)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified character position and continues to the end of the string.
            </summary>
            <param name="startIndex">The zero-based starting character position of a substring in this instance.</param>
            <returns>A string that is equivalent to the substring that begins at startIndex in this instance, or Empty if startIndex is equal to the length of this instance.</returns>
        </member>
        <member name="M:System.String.Substring(System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified character position and continues to the end of the string.
            </summary>
            <param name="startIndex">The zero-based starting character position of a substring in this instance.</param>
            <param name="length">The number of characters in the substring.</param>
            <returns>A string that is equivalent to the substring of length length that begins at startIndex in this instance, or Empty if startIndex is equal to the length of this instance and length is zero.</returns>
        </member>
        <member name="M:System.String.ToLower">
            <summary>
            Returns a copy of this string converted to lowercase.
            </summary>
            <returns>A string in lowercase.</returns>
        </member>
        <member name="M:System.String.ToUpper">
            <summary>
            Returns a copy of this string converted to uppercase.
            </summary>
            <returns>The uppercase equivalent of the current string.</returns>
        </member>
        <member name="M:System.String.Trim">
            <summary>
            Removes all leading and trailing white-space characters from the current String object.
            </summary>
            <returns>The string that remains after all white-space characters are removed from the start and end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</returns>
        </member>
        <member name="M:System.String.Trim(System.Char[])">
            <summary>
            Removes all leading and trailing occurrences of a set of characters specified in an array from the current String object.
            </summary>
            <param name="trimChars">An array of Unicode characters to remove, or null.</param>
            <returns>The string that remains after all occurrences of the characters in the trimChars parameter are removed from the start and end of the current string. If trimChars is null or an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</returns>
        </member>
        <member name="M:System.String.TrimEnd">
            <summary>
            Removes all trailing occurrences of a set of characters specified in an array from the current String object.
            </summary>
            <returns>The string that remains after all occurrences of the characters in the trimChars parameter are removed from the end of the current string. If trimChars is null or an empty array, Unicode white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</returns>
        </member>
        <member name="M:System.String.TrimEnd(System.Char[])">
            <summary>
            Removes all trailing occurrences of a set of characters specified in an array from the current String object.
            </summary>
            <param name="trimChars">An array of Unicode characters to remove, or null.</param>
            <returns>The string that remains after all occurrences of the characters in the trimChars parameter are removed from the end of the current string. If trimChars is null or an empty array, Unicode white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</returns>
        </member>
        <member name="M:System.String.TrimStart">
            <summary>
            Removes all leading occurrences of whitespaces specified in an array from the current String object.
            </summary>
            <returns>The string that remains after all occurrences of characters in the trimChars parameter are removed from the start of the current string. If trimChars is null or an empty array, white-space characters are removed instead.</returns>
        </member>
        <member name="M:System.String.TrimStart(System.Char[])">
            <summary>
            Removes all leading occurrences of a set of characters specified in an array from the current String object.
            </summary>
            <param name="trimChars">An array of Unicode characters to remove, or null.</param>
            <returns>The string that remains after all occurrences of characters in the trimChars parameter are removed from the start of the current string. If trimChars is null or an empty array, white-space characters are removed instead.</returns>
        </member>
        <member name="M:System.String.Contains(System.String)">
            <summary>
            Returns a value indicating whether a specified substring occurs within this string.
            </summary>
            <param name="value">The string to seek.</param>
            <returns>true if the value parameter occurs within this string, or if value is the empty string (""); otherwise, false.</returns>
        </member>
        <member name="M:System.String.EndsWith(System.String)">
            <summary>
            Determines whether the end of this string instance matches the specified string.
            </summary>
            <param name="value">The string to compare to the substring at the end of this instance.</param>
            <returns>true if value matches the end of this instance; otherwise, false.</returns>
        </member>
        <member name="M:System.String.StartsWith(System.String)">
            <summary>
            Determines whether the beginning of this string instance matches the specified string.
            </summary>
            <param name="value">The string to compare.</param>
            <returns>true if value matches the beginning of this string; otherwise, false.</returns>
        </member>
        <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Replaces the format item or items in a specified string with the string representation of the corresponding object. A parameter supplies culture-specific formatting information.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="arg0">The object to format.</param>
            <returns>A copy of format in which the format item or items have been replaced by the string representation of arg0.</returns>
        </member>
        <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
            <summary>
            Replaces the format items in a specified string with the string representation of two specified objects. A parameter supplies culture-specific formatting information.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <returns>A copy of format in which format items are replaced by the string representations of arg0 and arg1.</returns>
        </member>
        <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Replaces the format items in a specified string with the string representation of three specified objects. An parameter supplies culture-specific formatting information.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
            <returns>A copy of format in which the format items have been replaced by the string representations of arg0, arg1, and arg2.</returns>
        </member>
        <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Replaces the format items in a specified string with the string representations of corresponding objects in a specified array. A parameter supplies culture-specific formatting information.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>A copy of format in which the format items have been replaced by the string representation of the corresponding objects in args.</returns>
        </member>
        <member name="M:System.String.Format(System.String,System.Object)">
            <summary>
            Replaces one or more format items in a specified string with the string representation of a specified object.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The object to format.</param>
            <returns>A copy of format in which any format items are replaced by the string representation of arg0.</returns>
        </member>
        <member name="M:System.String.Format(System.String,System.Object,System.Object)">
            <summary>
            Replaces the format items in a specified string with the string representation of two specified objects.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <returns>A copy of format in which format items are replaced by the string representations of arg0 and arg1.</returns>
        </member>
        <member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Replaces the format items in a specified string with the string representation of three specified objects.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
            <returns>A copy of format in which the format items have been replaced by the string representations of arg0, arg1, and arg2.</returns>
        </member>
        <member name="M:System.String.Format(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>A copy of format in which the format items have been replaced by the string representation of the corresponding objects in args.</returns>
        </member>
        <member name="M:System.String.IndexOfAny(System.Char[])">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.
            </summary>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found.</returns>
        </member>
        <member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position.
            </summary>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions.
            </summary>
            <param name="anyOf">A Unicode character array containing one or more characters to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found.</returns>
        </member>
        <member name="M:System.String.ToCharArray">
            <summary>
            Copies the characters in this instance to a Unicode character array.
            </summary>
            <returns>A Unicode character array whose elements are the individual characters of this instance. If this instance is an empty string, the returned array is empty and has a zero length.</returns>
        </member>
        <member name="M:System.String.ToCharArray(System.Int32,System.Int32)">
            <summary>
            Copies the characters in a specified substring in this instance to a Unicode character array.
            </summary>
            <param name="startIndex">The starting position of a substring in this instance.</param>
            <param name="length">The length of the substring in this instance.</param>
            <returns>A Unicode character array whose elements are the length number of characters in this instance starting from character position startIndex.</returns>
        </member>
        <member name="P:System.String.Chars(System.Int32)">
            <summary>
            Gets the Char object at a specified position in the current String object.
            </summary>
            <param name="index">A position in the current string.</param>
            <returns>The object at position index.</returns>
        </member>
        <member name="M:System.String.GetEnumerator">
            <summary>
            Retrieves an object that can iterate through the individual characters in this string.
            </summary>
            <returns>An enumerator object.</returns>
        </member>
        <member name="M:System.String.System#Collections#Generic#IEnumerable{System#Char}#GetEnumerator">
            <summary>
            Retrieves an object that can iterate through the individual characters in this string.
            </summary>
            <returns>An enumerator object.</returns>
        </member>
        <member name="M:System.String.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retrieves an object that can iterate through the individual characters in this string.
            </summary>
            <returns>An enumerator object.</returns>
        </member>
        <member name="M:System.String.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified Object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified Object.
            </summary>
            <param name="value">An object that evaluates to a String.</param>
            <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the value parameter.</returns>
        </member>
        <member name="M:System.String.CompareTo(System.String)">
            <summary>
            Compares this instance with a specified String object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string.
            </summary>
            <param name="strB">The string to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the strB parameter.</returns>
        </member>
        <member name="M:System.String.Insert(System.Int32,System.String)">
            <summary>
            Returns a new string in which a specified string is inserted at a specified index position in this instance.
            </summary>
            <param name="startIndex">The zero-based index position of the insertion.</param>
            <param name="value">The string to insert.</param>
            <returns>A new string that is equivalent to this instance, but with value inserted at position startIndex.</returns>
        </member>
        <member name="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Concatenates the members of a constructed IEnumerable&lt;T&gt; collection of type String, using the specified separator between each member.
            </summary>
            <param name="separator">The string to use as a separator.separator is included in the returned string only if values has more than one element.</param>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <returns>A string that consists of the members of values delimited by the separator string. If values has no members, the method returns String.Empty.</returns>
        </member>
        <member name="M:System.String.Join(System.String,System.Object[])">
            <summary>
            Concatenates the elements of an object array, using the specified separator between each element.
            </summary>
            <param name="separator">The string to use as a separator. separator is included in the returned string only if values has more than one element.</param>
            <param name="values">An array that contains the elements to concatenate.</param>
            <returns>A string that consists of the elements of values delimited by the separator string. If values is an empty array, the method returns String.Empty.</returns>
        </member>
        <member name="M:System.String.Join(System.String,System.String[])">
            <summary>
            Concatenates all the elements of a string array, using the specified separator between each element.
            </summary>
            <param name="separator">The string to use as a separator. separator is included in the returned string only if value has more than one element.</param>
            <param name="value">An array that contains the elements to concatenate.</param>
            <returns>A string that consists of the elements in value delimited by the separator string. If value is an empty array, the method returns String.Empty.</returns>
        </member>
        <member name="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
            <summary>
            Concatenates the specified elements of a string array, using the specified separator between each element.
            </summary>
            <param name="separator">The string to use as a separator. separator is included in the returned string only if value has more than one element.</param>
            <param name="value">An array that contains the elements to concatenate.</param>
            <param name="startIndex">The first element in value to use.</param>
            <param name="count">The number of elements of value to use.</param>
            <returns>A string that consists of the strings in value delimited by the separator string. -or- String.Empty if count is zero, value has no elements, or separator and all the elements of value are String.Empty.</returns>
        </member>
        <member name="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates the members of a collection, using the specified separator between each member.
            </summary>
            <typeparam name="T">The type of the members of values.</typeparam>
            <param name="separator">The string to use as a separator.separator is included in the returned string only if values has more than one element.</param>
            <param name="values">A collection that contains the objects to concatenate.</param>
            <returns>A string that consists of the members of values delimited by the separator string. If values has no members, the method returns String.Empty.</returns>
        </member>
        <member name="M:System.String.PadLeft(System.Int32)">
            <summary>
            Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.
            </summary>
            <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</param>
            <returns>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of totalWidth. However, if totalWidth is less than the length of this instance, the method returns a reference to the existing instance. If totalWidth is equal to the length of this instance, the method returns a new string that is identical to this instance.</returns>
        </member>
        <member name="M:System.String.PadLeft(System.Int32,System.Char)">
            <summary>
            Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.
            </summary>
            <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</param>
            <param name="paddingChar">A Unicode padding character.</param>
            <returns>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many paddingChar characters as needed to create a length of totalWidth. However, if totalWidth is less than the length of this instance, the method returns a reference to the existing instance. If totalWidth is equal to the length of this instance, the method returns a new string that is identical to this instance.</returns>
        </member>
        <member name="M:System.String.PadRight(System.Int32)">
            <summary>
            Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.
            </summary>
            <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</param>
            <returns>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of totalWidth. However, if totalWidth is less than the length of this instance, the method returns a reference to the existing instance. If totalWidth is equal to the length of this instance, the method returns a new string that is identical to this instance.</returns>
        </member>
        <member name="M:System.String.PadRight(System.Int32,System.Char)">
            <summary>
            Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.
            </summary>
            <param name="totalWidth">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</param>
            <param name="paddingChar">A Unicode padding character.</param>
            <returns>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many paddingChar characters as needed to create a length of totalWidth. However, if totalWidth is less than the length of this instance, the method returns a reference to the existing instance. If totalWidth is equal to the length of this instance, the method returns a new string that is identical to this instance.</returns>
        </member>
        <member name="M:System.String.Remove(System.Int32)">
            <summary>
            Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.
            </summary>
            <param name="startIndex">The zero-based position to begin deleting characters.</param>
            <returns>A new string that is equivalent to this string except for the removed characters.</returns>
        </member>
        <member name="M:System.String.Remove(System.Int32,System.Int32)">
            <summary>
            Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.
            </summary>
            <param name="startIndex">The zero-based position to begin deleting characters.</param>
            <param name="count">The number of characters to delete.</param>
            <returns>A new string that is equivalent to this instance except for the removed characters.</returns>
        </member>
        <member name="M:System.String.Clone">
            <summary>
            Returns a reference to this instance of String.
            </summary>
            <returns>This instance of String.</returns>
        </member>
        <member name="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.
            </summary>
            <param name="sourceIndex">The index of the first character in this instance to copy.</param>
            <param name="destination">An array of Unicode characters to which characters in this instance are copied.</param>
            <param name="destinationIndex">The index in destination at which the copy operation begins.</param>
            <param name="count">The number of characters in this instance to copy to destination.</param>
        </member>
    </members>
</doc>
